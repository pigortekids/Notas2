
projeto2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d08  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000854  20000000  00402d08  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000dc  20000854  0040355c  00020854  2**2
                  ALLOC
  3 .stack        00003000  20000930  00403638  00020854  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020854  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002087e  2**0
                  CONTENTS, READONLY
  6 .debug_info   00009c57  00000000  00000000  000208d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a36  00000000  00000000  0002a52e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00003d9b  00000000  00000000  0002bf64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000880  00000000  00000000  0002fcff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000007e0  00000000  00000000  0003057f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00012481  00000000  00000000  00030d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000097a0  00000000  00000000  000431e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00052b9d  00000000  00000000  0004c980  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001b54  00000000  00000000  0009f520  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	20003930 	.word	0x20003930
  400004:	004008dd 	.word	0x004008dd
  400008:	004008d9 	.word	0x004008d9
  40000c:	004008d9 	.word	0x004008d9
  400010:	004008d9 	.word	0x004008d9
  400014:	004008d9 	.word	0x004008d9
  400018:	004008d9 	.word	0x004008d9
	...
  40002c:	004008d9 	.word	0x004008d9
  400030:	004008d9 	.word	0x004008d9
  400034:	00000000 	.word	0x00000000
  400038:	004008d9 	.word	0x004008d9
  40003c:	004008d9 	.word	0x004008d9
  400040:	004008d9 	.word	0x004008d9
  400044:	004008d9 	.word	0x004008d9
  400048:	004008d9 	.word	0x004008d9
  40004c:	004008d9 	.word	0x004008d9
  400050:	004008d9 	.word	0x004008d9
  400054:	004008d9 	.word	0x004008d9
  400058:	004008d9 	.word	0x004008d9
  40005c:	004008d9 	.word	0x004008d9
  400060:	004008d9 	.word	0x004008d9
  400064:	004008d9 	.word	0x004008d9
  400068:	00000000 	.word	0x00000000
  40006c:	0040075d 	.word	0x0040075d
  400070:	00400771 	.word	0x00400771
  400074:	00400785 	.word	0x00400785
  400078:	004008d9 	.word	0x004008d9
  40007c:	004008d9 	.word	0x004008d9
	...
  400088:	004008d9 	.word	0x004008d9
  40008c:	004008d9 	.word	0x004008d9
  400090:	004008d9 	.word	0x004008d9
  400094:	004008d9 	.word	0x004008d9
  400098:	004008d9 	.word	0x004008d9
  40009c:	004008d9 	.word	0x004008d9
  4000a0:	004008d9 	.word	0x004008d9
  4000a4:	004008d9 	.word	0x004008d9
  4000a8:	004008d9 	.word	0x004008d9
  4000ac:	004008d9 	.word	0x004008d9
  4000b0:	004008d9 	.word	0x004008d9
  4000b4:	004008d9 	.word	0x004008d9
  4000b8:	004008d9 	.word	0x004008d9
  4000bc:	004008d9 	.word	0x004008d9
  4000c0:	004008d9 	.word	0x004008d9
  4000c4:	004008d9 	.word	0x004008d9
  4000c8:	004008d9 	.word	0x004008d9

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000854 	.word	0x20000854
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00402d08 	.word	0x00402d08

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	20000858 	.word	0x20000858
  40011c:	00402d08 	.word	0x00402d08
  400120:	00402d08 	.word	0x00402d08
  400124:	00000000 	.word	0x00000000

00400128 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
  400128:	b990      	cbnz	r0, 400150 <_read+0x28>
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  40012a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40012e:	460c      	mov	r4, r1
  400130:	4690      	mov	r8, r2

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400132:	2a00      	cmp	r2, #0
  400134:	dd0f      	ble.n	400156 <_read+0x2e>
  400136:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400138:	4e08      	ldr	r6, [pc, #32]	; (40015c <_read+0x34>)
  40013a:	4d09      	ldr	r5, [pc, #36]	; (400160 <_read+0x38>)
  40013c:	6830      	ldr	r0, [r6, #0]
  40013e:	4621      	mov	r1, r4
  400140:	682b      	ldr	r3, [r5, #0]
  400142:	4798      	blx	r3
		ptr++;
  400144:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400146:	42a7      	cmp	r7, r4
  400148:	d1f8      	bne.n	40013c <_read+0x14>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
  40014a:	4640      	mov	r0, r8
  40014c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
  400150:	f04f 30ff 	mov.w	r0, #4294967295
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  400154:	4770      	bx	lr

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
  400156:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
  400158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40015c:	20000924 	.word	0x20000924
  400160:	2000091c 	.word	0x2000091c

00400164 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400164:	6943      	ldr	r3, [r0, #20]
  400166:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
  40016a:	bf1d      	ittte	ne
  40016c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
  400170:	61c1      	strne	r1, [r0, #28]
	return 0;
  400172:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
  400174:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
  400176:	4770      	bx	lr

00400178 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400178:	6943      	ldr	r3, [r0, #20]
  40017a:	f013 0f01 	tst.w	r3, #1
  40017e:	d005      	beq.n	40018c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400180:	6983      	ldr	r3, [r0, #24]
  400182:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400186:	600b      	str	r3, [r1, #0]

	return 0;
  400188:	2000      	movs	r0, #0
  40018a:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
  40018c:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
  40018e:	4770      	bx	lr

00400190 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400190:	3801      	subs	r0, #1
  400192:	2802      	cmp	r0, #2
  400194:	d815      	bhi.n	4001c2 <_write+0x32>
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
  400196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40019a:	460e      	mov	r6, r1
  40019c:	4614      	mov	r4, r2

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  40019e:	b19a      	cbz	r2, 4001c8 <_write+0x38>
  4001a0:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4001a2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4001dc <_write+0x4c>
  4001a6:	4f0c      	ldr	r7, [pc, #48]	; (4001d8 <_write+0x48>)
  4001a8:	f8d8 0000 	ldr.w	r0, [r8]
  4001ac:	f815 1b01 	ldrb.w	r1, [r5], #1
  4001b0:	683b      	ldr	r3, [r7, #0]
  4001b2:	4798      	blx	r3
  4001b4:	2800      	cmp	r0, #0
  4001b6:	db0a      	blt.n	4001ce <_write+0x3e>
  4001b8:	1ba8      	subs	r0, r5, r6

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001ba:	3c01      	subs	r4, #1
  4001bc:	d1f4      	bne.n	4001a8 <_write+0x18>
  4001be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
  4001c2:	f04f 30ff 	mov.w	r0, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
  4001c6:	4770      	bx	lr

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
  4001c8:	2000      	movs	r0, #0
  4001ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
  4001ce:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4001d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4001d6:	bf00      	nop
  4001d8:	20000920 	.word	0x20000920
  4001dc:	20000924 	.word	0x20000924

004001e0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
  4001e0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  4001e2:	23ac      	movs	r3, #172	; 0xac
  4001e4:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  4001e6:	680b      	ldr	r3, [r1, #0]
  4001e8:	684a      	ldr	r2, [r1, #4]
  4001ea:	fbb3 f3f2 	udiv	r3, r3, r2
  4001ee:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  4001f0:	1e5c      	subs	r4, r3, #1
  4001f2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
  4001f6:	4294      	cmp	r4, r2
  4001f8:	d80a      	bhi.n	400210 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
  4001fa:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
  4001fc:	688b      	ldr	r3, [r1, #8]
  4001fe:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  400200:	f240 2302 	movw	r3, #514	; 0x202
  400204:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  400208:	2350      	movs	r3, #80	; 0x50
  40020a:	6003      	str	r3, [r0, #0]

	return 0;
  40020c:	2000      	movs	r0, #0
  40020e:	e000      	b.n	400212 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
  400210:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
  400212:	bc10      	pop	{r4}
  400214:	4770      	bx	lr
  400216:	bf00      	nop

00400218 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400218:	6943      	ldr	r3, [r0, #20]
  40021a:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  40021e:	bf1a      	itte	ne
  400220:	61c1      	strne	r1, [r0, #28]
	return 0;
  400222:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
  400224:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
  400226:	4770      	bx	lr

00400228 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400228:	6943      	ldr	r3, [r0, #20]
  40022a:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  40022e:	bf1d      	ittte	ne
  400230:	6983      	ldrne	r3, [r0, #24]
  400232:	700b      	strbne	r3, [r1, #0]
	return 0;
  400234:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
  400236:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
  400238:	4770      	bx	lr
  40023a:	bf00      	nop

0040023c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40023c:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40023e:	480e      	ldr	r0, [pc, #56]	; (400278 <sysclk_init+0x3c>)
  400240:	4b0e      	ldr	r3, [pc, #56]	; (40027c <sysclk_init+0x40>)
  400242:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400244:	213e      	movs	r1, #62	; 0x3e
  400246:	2000      	movs	r0, #0
  400248:	4b0d      	ldr	r3, [pc, #52]	; (400280 <sysclk_init+0x44>)
  40024a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40024c:	4c0d      	ldr	r4, [pc, #52]	; (400284 <sysclk_init+0x48>)
  40024e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400250:	2800      	cmp	r0, #0
  400252:	d0fc      	beq.n	40024e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400254:	4b0c      	ldr	r3, [pc, #48]	; (400288 <sysclk_init+0x4c>)
  400256:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400258:	4a0c      	ldr	r2, [pc, #48]	; (40028c <sysclk_init+0x50>)
  40025a:	4b0d      	ldr	r3, [pc, #52]	; (400290 <sysclk_init+0x54>)
  40025c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40025e:	4c0d      	ldr	r4, [pc, #52]	; (400294 <sysclk_init+0x58>)
  400260:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400262:	2800      	cmp	r0, #0
  400264:	d0fc      	beq.n	400260 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400266:	2010      	movs	r0, #16
  400268:	4b0b      	ldr	r3, [pc, #44]	; (400298 <sysclk_init+0x5c>)
  40026a:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40026c:	4b0b      	ldr	r3, [pc, #44]	; (40029c <sysclk_init+0x60>)
  40026e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400270:	4801      	ldr	r0, [pc, #4]	; (400278 <sysclk_init+0x3c>)
  400272:	4b02      	ldr	r3, [pc, #8]	; (40027c <sysclk_init+0x40>)
  400274:	4798      	blx	r3
  400276:	bd10      	pop	{r4, pc}
  400278:	07270e00 	.word	0x07270e00
  40027c:	00400aa1 	.word	0x00400aa1
  400280:	00400801 	.word	0x00400801
  400284:	00400855 	.word	0x00400855
  400288:	00400865 	.word	0x00400865
  40028c:	20133f01 	.word	0x20133f01
  400290:	400e0400 	.word	0x400e0400
  400294:	00400875 	.word	0x00400875
  400298:	00400799 	.word	0x00400799
  40029c:	0040098d 	.word	0x0040098d

004002a0 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
  4002a0:	b538      	push	{r3, r4, r5, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002a6:	4b46      	ldr	r3, [pc, #280]	; (4003c0 <board_init+0x120>)
  4002a8:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4002aa:	200b      	movs	r0, #11
  4002ac:	4c45      	ldr	r4, [pc, #276]	; (4003c4 <board_init+0x124>)
  4002ae:	47a0      	blx	r4
  4002b0:	200c      	movs	r0, #12
  4002b2:	47a0      	blx	r4
  4002b4:	200d      	movs	r0, #13
  4002b6:	47a0      	blx	r4
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  4002b8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4002bc:	2013      	movs	r0, #19
  4002be:	4c42      	ldr	r4, [pc, #264]	; (4003c8 <board_init+0x128>)
  4002c0:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  4002c2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4002c6:	2014      	movs	r0, #20
  4002c8:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  4002ca:	4940      	ldr	r1, [pc, #256]	; (4003cc <board_init+0x12c>)
  4002cc:	2023      	movs	r0, #35	; 0x23
  4002ce:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
  4002d0:	493f      	ldr	r1, [pc, #252]	; (4003d0 <board_init+0x130>)
  4002d2:	204c      	movs	r0, #76	; 0x4c
  4002d4:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  4002d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4002da:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  4002de:	483d      	ldr	r0, [pc, #244]	; (4003d4 <board_init+0x134>)
  4002e0:	4b3d      	ldr	r3, [pc, #244]	; (4003d8 <board_init+0x138>)
  4002e2:	4798      	blx	r3
#endif

	/* Configure ADC example pins */
#ifdef CONF_BOARD_ADC
	/* TC TIOA configuration */
	gpio_configure_pin(PIN_TC0_TIOA0,PIN_TC0_TIOA0_FLAGS);
  4002e4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4002e8:	2000      	movs	r0, #0
  4002ea:	47a0      	blx	r4

	/* ADC Trigger configuration */
	gpio_configure_pin(PINS_ADC_TRIG, PINS_ADC_TRIG_FLAG);
  4002ec:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4002f0:	2008      	movs	r0, #8
  4002f2:	47a0      	blx	r4

	/* PWMH0 configuration */
	gpio_configure_pin(PIN_PWMC_PWMH0_TRIG, PIN_PWMC_PWMH0_TRIG_FLAG);
  4002f4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4002f8:	2052      	movs	r0, #82	; 0x52
  4002fa:	47a0      	blx	r4
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

	/* Configure SPI pins */
#ifdef CONF_BOARD_SPI
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  4002fc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400300:	200c      	movs	r0, #12
  400302:	47a0      	blx	r4
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  400304:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400308:	200d      	movs	r0, #13
  40030a:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  40030c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400310:	200e      	movs	r0, #14
  400312:	47a0      	blx	r4
	 * Hence a different PIN should be selected using the CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */

#  ifdef CONF_BOARD_SPI_NPCS0
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
  400314:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400318:	200b      	movs	r0, #11
  40031a:	47a0      	blx	r4
#  endif
#endif /* CONF_BOARD_SPI */

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART1_RXD_IDX, PIN_USART1_RXD_FLAGS);
  40031c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400320:	2015      	movs	r0, #21
  400322:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART1_TXD_IDX, PIN_USART1_TXD_FLAGS);
  400324:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400328:	2016      	movs	r0, #22
  40032a:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART1_SCK_IDX, PIN_USART1_SCK_FLAGS);
#endif

#ifdef CONF_BOARD_ADM3312_EN
	/* Configure ADM33312 enable pin */
	gpio_configure_pin(PIN_USART1_EN_IDX, PIN_USART1_EN_FLAGS);
  40032c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400330:	2017      	movs	r0, #23
  400332:	47a0      	blx	r4
	gpio_set_pin_low(PIN_USART1_EN_IDX);
  400334:	2017      	movs	r0, #23
  400336:	4b29      	ldr	r3, [pc, #164]	; (4003dc <board_init+0x13c>)
  400338:	4798      	blx	r3
	gpio_set_pin_low(PIN_RE_IDX);
#endif

#if defined(CONF_BOARD_ILI9325) || defined(CONF_BOARD_ILI93XX)
	/* Configure LCD EBI pins */
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAGS);
  40033a:	4d29      	ldr	r5, [pc, #164]	; (4003e0 <board_init+0x140>)
  40033c:	4629      	mov	r1, r5
  40033e:	2040      	movs	r0, #64	; 0x40
  400340:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAGS);
  400342:	4629      	mov	r1, r5
  400344:	2041      	movs	r0, #65	; 0x41
  400346:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAGS);
  400348:	4629      	mov	r1, r5
  40034a:	2042      	movs	r0, #66	; 0x42
  40034c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAGS);
  40034e:	4629      	mov	r1, r5
  400350:	2043      	movs	r0, #67	; 0x43
  400352:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAGS);
  400354:	4629      	mov	r1, r5
  400356:	2044      	movs	r0, #68	; 0x44
  400358:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAGS);
  40035a:	4629      	mov	r1, r5
  40035c:	2045      	movs	r0, #69	; 0x45
  40035e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAGS);
  400360:	4629      	mov	r1, r5
  400362:	2046      	movs	r0, #70	; 0x46
  400364:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAGS);
  400366:	4629      	mov	r1, r5
  400368:	2047      	movs	r0, #71	; 0x47
  40036a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
  40036c:	4629      	mov	r1, r5
  40036e:	204b      	movs	r0, #75	; 0x4b
  400370:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
  400372:	4629      	mov	r1, r5
  400374:	2048      	movs	r0, #72	; 0x48
  400376:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS1, PIN_EBI_NCS1_FLAGS);
  400378:	4629      	mov	r1, r5
  40037a:	204f      	movs	r0, #79	; 0x4f
  40037c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_LCD_RS, PIN_EBI_LCD_RS_FLAGS);
  40037e:	4629      	mov	r1, r5
  400380:	2053      	movs	r0, #83	; 0x53
  400382:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_AAT3155
	/* Configure Backlight control pin */
	gpio_configure_pin(BOARD_AAT31XX_SET_GPIO, BOARD_AAT31XX_SET_FLAGS);
  400384:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400388:	204d      	movs	r0, #77	; 0x4d
  40038a:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_ADS7843
	/* Configure Touchscreen SPI pins */
	gpio_configure_pin(BOARD_ADS7843_IRQ_GPIO,BOARD_ADS7843_IRQ_FLAGS);
  40038c:	f105 5500 	add.w	r5, r5, #536870912	; 0x20000000
  400390:	4629      	mov	r1, r5
  400392:	2010      	movs	r0, #16
  400394:	47a0      	blx	r4
	gpio_configure_pin(BOARD_ADS7843_BUSY_GPIO, BOARD_ADS7843_BUSY_FLAGS);
  400396:	4629      	mov	r1, r5
  400398:	2011      	movs	r0, #17
  40039a:	47a0      	blx	r4
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  40039c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4003a0:	200c      	movs	r0, #12
  4003a2:	47a0      	blx	r4
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  4003a4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4003a8:	200d      	movs	r0, #13
  4003aa:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  4003ac:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4003b0:	200e      	movs	r0, #14
  4003b2:	47a0      	blx	r4
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
  4003b4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4003b8:	200b      	movs	r0, #11
  4003ba:	47a0      	blx	r4
  4003bc:	bd38      	pop	{r3, r4, r5, pc}
  4003be:	bf00      	nop
  4003c0:	400e1450 	.word	0x400e1450
  4003c4:	00400885 	.word	0x00400885
  4003c8:	004004f5 	.word	0x004004f5
  4003cc:	28000079 	.word	0x28000079
  4003d0:	28000059 	.word	0x28000059
  4003d4:	400e0e00 	.word	0x400e0e00
  4003d8:	00400619 	.word	0x00400619
  4003dc:	004004d9 	.word	0x004004d9
  4003e0:	08000001 	.word	0x08000001

004003e4 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4003e4:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4003e6:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4003ea:	d02f      	beq.n	40044c <pio_set_peripheral+0x68>
  4003ec:	d807      	bhi.n	4003fe <pio_set_peripheral+0x1a>
  4003ee:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4003f2:	d014      	beq.n	40041e <pio_set_peripheral+0x3a>
  4003f4:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4003f8:	d01e      	beq.n	400438 <pio_set_peripheral+0x54>
  4003fa:	b939      	cbnz	r1, 40040c <pio_set_peripheral+0x28>
  4003fc:	4770      	bx	lr
  4003fe:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400402:	d036      	beq.n	400472 <pio_set_peripheral+0x8e>
  400404:	d804      	bhi.n	400410 <pio_set_peripheral+0x2c>
  400406:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40040a:	d029      	beq.n	400460 <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40040c:	6042      	str	r2, [r0, #4]
  40040e:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400410:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400414:	d02d      	beq.n	400472 <pio_set_peripheral+0x8e>
  400416:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40041a:	d02a      	beq.n	400472 <pio_set_peripheral+0x8e>
  40041c:	e7f6      	b.n	40040c <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  40041e:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400420:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400422:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400424:	43d3      	mvns	r3, r2
  400426:	4021      	ands	r1, r4
  400428:	4019      	ands	r1, r3
  40042a:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40042c:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40042e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400430:	4021      	ands	r1, r4
  400432:	400b      	ands	r3, r1
  400434:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400436:	e01a      	b.n	40046e <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400438:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40043a:	4313      	orrs	r3, r2
  40043c:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40043e:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400440:	6f43      	ldr	r3, [r0, #116]	; 0x74
  400442:	400b      	ands	r3, r1
  400444:	ea23 0302 	bic.w	r3, r3, r2
  400448:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40044a:	e7df      	b.n	40040c <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40044c:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40044e:	6f03      	ldr	r3, [r0, #112]	; 0x70
  400450:	400b      	ands	r3, r1
  400452:	ea23 0302 	bic.w	r3, r3, r2
  400456:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400458:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40045a:	4313      	orrs	r3, r2
  40045c:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40045e:	e7d5      	b.n	40040c <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400460:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400462:	4313      	orrs	r3, r2
  400464:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400466:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400468:	4313      	orrs	r3, r2
  40046a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40046c:	e7ce      	b.n	40040c <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40046e:	6042      	str	r2, [r0, #4]
}
  400470:	bc10      	pop	{r4}
  400472:	4770      	bx	lr

00400474 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400474:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400476:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  40047a:	bf14      	ite	ne
  40047c:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40047e:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400480:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  400484:	bf14      	ite	ne
  400486:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400488:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  40048a:	f012 0f02 	tst.w	r2, #2
  40048e:	d002      	beq.n	400496 <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  400490:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  400494:	e004      	b.n	4004a0 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400496:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  40049a:	bf18      	it	ne
  40049c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  4004a0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4004a2:	6001      	str	r1, [r0, #0]
  4004a4:	4770      	bx	lr
  4004a6:	bf00      	nop

004004a8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  4004a8:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4004aa:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4004ac:	9c01      	ldr	r4, [sp, #4]
  4004ae:	b10c      	cbz	r4, 4004b4 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  4004b0:	6641      	str	r1, [r0, #100]	; 0x64
  4004b2:	e000      	b.n	4004b6 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4004b4:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4004b6:	b10b      	cbz	r3, 4004bc <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  4004b8:	6501      	str	r1, [r0, #80]	; 0x50
  4004ba:	e000      	b.n	4004be <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4004bc:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4004be:	b10a      	cbz	r2, 4004c4 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  4004c0:	6301      	str	r1, [r0, #48]	; 0x30
  4004c2:	e000      	b.n	4004c6 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4004c4:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4004c6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4004c8:	6001      	str	r1, [r0, #0]
}
  4004ca:	bc10      	pop	{r4}
  4004cc:	4770      	bx	lr
  4004ce:	bf00      	nop

004004d0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4004d0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4004d2:	4770      	bx	lr

004004d4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4004d4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4004d6:	4770      	bx	lr

004004d8 <pio_set_pin_low>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4004d8:	0943      	lsrs	r3, r0, #5
  4004da:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4004de:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4004e2:	025b      	lsls	r3, r3, #9
void pio_set_pin_low(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  4004e4:	f000 001f 	and.w	r0, r0, #31
  4004e8:	2201      	movs	r2, #1
  4004ea:	fa02 f000 	lsl.w	r0, r2, r0
  4004ee:	6358      	str	r0, [r3, #52]	; 0x34
  4004f0:	4770      	bx	lr
  4004f2:	bf00      	nop

004004f4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  4004f4:	b570      	push	{r4, r5, r6, lr}
  4004f6:	b082      	sub	sp, #8
  4004f8:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4004fa:	0943      	lsrs	r3, r0, #5
  4004fc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400500:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400504:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400506:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  40050a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40050e:	d047      	beq.n	4005a0 <pio_configure_pin+0xac>
  400510:	d809      	bhi.n	400526 <pio_configure_pin+0x32>
  400512:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400516:	d021      	beq.n	40055c <pio_configure_pin+0x68>
  400518:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40051c:	d02f      	beq.n	40057e <pio_configure_pin+0x8a>
  40051e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400522:	d16f      	bne.n	400604 <pio_configure_pin+0x110>
  400524:	e009      	b.n	40053a <pio_configure_pin+0x46>
  400526:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40052a:	d055      	beq.n	4005d8 <pio_configure_pin+0xe4>
  40052c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400530:	d052      	beq.n	4005d8 <pio_configure_pin+0xe4>
  400532:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400536:	d044      	beq.n	4005c2 <pio_configure_pin+0xce>
  400538:	e064      	b.n	400604 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40053a:	f000 001f 	and.w	r0, r0, #31
  40053e:	2601      	movs	r6, #1
  400540:	4086      	lsls	r6, r0
  400542:	4632      	mov	r2, r6
  400544:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400548:	4620      	mov	r0, r4
  40054a:	4b30      	ldr	r3, [pc, #192]	; (40060c <pio_configure_pin+0x118>)
  40054c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40054e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400552:	bf14      	ite	ne
  400554:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400556:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400558:	2001      	movs	r0, #1
  40055a:	e054      	b.n	400606 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40055c:	f000 001f 	and.w	r0, r0, #31
  400560:	2601      	movs	r6, #1
  400562:	4086      	lsls	r6, r0
  400564:	4632      	mov	r2, r6
  400566:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40056a:	4620      	mov	r0, r4
  40056c:	4b27      	ldr	r3, [pc, #156]	; (40060c <pio_configure_pin+0x118>)
  40056e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400570:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400574:	bf14      	ite	ne
  400576:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400578:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40057a:	2001      	movs	r0, #1
  40057c:	e043      	b.n	400606 <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40057e:	f000 001f 	and.w	r0, r0, #31
  400582:	2601      	movs	r6, #1
  400584:	4086      	lsls	r6, r0
  400586:	4632      	mov	r2, r6
  400588:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40058c:	4620      	mov	r0, r4
  40058e:	4b1f      	ldr	r3, [pc, #124]	; (40060c <pio_configure_pin+0x118>)
  400590:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400592:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400596:	bf14      	ite	ne
  400598:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40059a:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40059c:	2001      	movs	r0, #1
  40059e:	e032      	b.n	400606 <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4005a0:	f000 001f 	and.w	r0, r0, #31
  4005a4:	2601      	movs	r6, #1
  4005a6:	4086      	lsls	r6, r0
  4005a8:	4632      	mov	r2, r6
  4005aa:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4005ae:	4620      	mov	r0, r4
  4005b0:	4b16      	ldr	r3, [pc, #88]	; (40060c <pio_configure_pin+0x118>)
  4005b2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4005b4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4005b8:	bf14      	ite	ne
  4005ba:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4005bc:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4005be:	2001      	movs	r0, #1
  4005c0:	e021      	b.n	400606 <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4005c2:	f000 011f 	and.w	r1, r0, #31
  4005c6:	2601      	movs	r6, #1
  4005c8:	462a      	mov	r2, r5
  4005ca:	fa06 f101 	lsl.w	r1, r6, r1
  4005ce:	4620      	mov	r0, r4
  4005d0:	4b0f      	ldr	r3, [pc, #60]	; (400610 <pio_configure_pin+0x11c>)
  4005d2:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4005d4:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  4005d6:	e016      	b.n	400606 <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4005d8:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  4005dc:	f000 011f 	and.w	r1, r0, #31
  4005e0:	2601      	movs	r6, #1
  4005e2:	ea05 0306 	and.w	r3, r5, r6
  4005e6:	9300      	str	r3, [sp, #0]
  4005e8:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4005ec:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4005f0:	bf14      	ite	ne
  4005f2:	2200      	movne	r2, #0
  4005f4:	2201      	moveq	r2, #1
  4005f6:	fa06 f101 	lsl.w	r1, r6, r1
  4005fa:	4620      	mov	r0, r4
  4005fc:	4c05      	ldr	r4, [pc, #20]	; (400614 <pio_configure_pin+0x120>)
  4005fe:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  400600:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400602:	e000      	b.n	400606 <pio_configure_pin+0x112>

	default:
		return 0;
  400604:	2000      	movs	r0, #0
	}

	return 1;
}
  400606:	b002      	add	sp, #8
  400608:	bd70      	pop	{r4, r5, r6, pc}
  40060a:	bf00      	nop
  40060c:	004003e5 	.word	0x004003e5
  400610:	00400475 	.word	0x00400475
  400614:	004004a9 	.word	0x004004a9

00400618 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  400618:	b570      	push	{r4, r5, r6, lr}
  40061a:	b082      	sub	sp, #8
  40061c:	4605      	mov	r5, r0
  40061e:	460e      	mov	r6, r1
  400620:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400622:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  400626:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40062a:	d038      	beq.n	40069e <pio_configure_pin_group+0x86>
  40062c:	d809      	bhi.n	400642 <pio_configure_pin_group+0x2a>
  40062e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400632:	d01c      	beq.n	40066e <pio_configure_pin_group+0x56>
  400634:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400638:	d025      	beq.n	400686 <pio_configure_pin_group+0x6e>
  40063a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40063e:	d150      	bne.n	4006e2 <pio_configure_pin_group+0xca>
  400640:	e009      	b.n	400656 <pio_configure_pin_group+0x3e>
  400642:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400646:	d03a      	beq.n	4006be <pio_configure_pin_group+0xa6>
  400648:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40064c:	d037      	beq.n	4006be <pio_configure_pin_group+0xa6>
  40064e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400652:	d030      	beq.n	4006b6 <pio_configure_pin_group+0x9e>
  400654:	e045      	b.n	4006e2 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  400656:	460a      	mov	r2, r1
  400658:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40065c:	4b22      	ldr	r3, [pc, #136]	; (4006e8 <pio_configure_pin_group+0xd0>)
  40065e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400660:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400664:	bf14      	ite	ne
  400666:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400668:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40066a:	2001      	movs	r0, #1
  40066c:	e03a      	b.n	4006e4 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  40066e:	460a      	mov	r2, r1
  400670:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400674:	4b1c      	ldr	r3, [pc, #112]	; (4006e8 <pio_configure_pin_group+0xd0>)
  400676:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400678:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40067c:	bf14      	ite	ne
  40067e:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400680:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400682:	2001      	movs	r0, #1
  400684:	e02e      	b.n	4006e4 <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  400686:	460a      	mov	r2, r1
  400688:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40068c:	4b16      	ldr	r3, [pc, #88]	; (4006e8 <pio_configure_pin_group+0xd0>)
  40068e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400690:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400694:	bf14      	ite	ne
  400696:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400698:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40069a:	2001      	movs	r0, #1
  40069c:	e022      	b.n	4006e4 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  40069e:	460a      	mov	r2, r1
  4006a0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4006a4:	4b10      	ldr	r3, [pc, #64]	; (4006e8 <pio_configure_pin_group+0xd0>)
  4006a6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4006a8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4006ac:	bf14      	ite	ne
  4006ae:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4006b0:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4006b2:	2001      	movs	r0, #1
  4006b4:	e016      	b.n	4006e4 <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  4006b6:	4b0d      	ldr	r3, [pc, #52]	; (4006ec <pio_configure_pin_group+0xd4>)
  4006b8:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4006ba:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  4006bc:	e012      	b.n	4006e4 <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  4006be:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
  4006c2:	f004 0301 	and.w	r3, r4, #1
  4006c6:	9300      	str	r3, [sp, #0]
  4006c8:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4006cc:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4006d0:	bf14      	ite	ne
  4006d2:	2200      	movne	r2, #0
  4006d4:	2201      	moveq	r2, #1
  4006d6:	4631      	mov	r1, r6
  4006d8:	4628      	mov	r0, r5
  4006da:	4c05      	ldr	r4, [pc, #20]	; (4006f0 <pio_configure_pin_group+0xd8>)
  4006dc:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  4006de:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4006e0:	e000      	b.n	4006e4 <pio_configure_pin_group+0xcc>

	default:
		return 0;
  4006e2:	2000      	movs	r0, #0
	}

	return 1;
}
  4006e4:	b002      	add	sp, #8
  4006e6:	bd70      	pop	{r4, r5, r6, pc}
  4006e8:	004003e5 	.word	0x004003e5
  4006ec:	00400475 	.word	0x00400475
  4006f0:	004004a9 	.word	0x004004a9

004006f4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4006f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4006f8:	4681      	mov	r9, r0
  4006fa:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4006fc:	4b12      	ldr	r3, [pc, #72]	; (400748 <pio_handler_process+0x54>)
  4006fe:	4798      	blx	r3
  400700:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400702:	4648      	mov	r0, r9
  400704:	4b11      	ldr	r3, [pc, #68]	; (40074c <pio_handler_process+0x58>)
  400706:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400708:	4005      	ands	r5, r0
  40070a:	d013      	beq.n	400734 <pio_handler_process+0x40>
  40070c:	4c10      	ldr	r4, [pc, #64]	; (400750 <pio_handler_process+0x5c>)
  40070e:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400712:	6823      	ldr	r3, [r4, #0]
  400714:	4543      	cmp	r3, r8
  400716:	d108      	bne.n	40072a <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400718:	6861      	ldr	r1, [r4, #4]
  40071a:	4229      	tst	r1, r5
  40071c:	d005      	beq.n	40072a <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40071e:	68e3      	ldr	r3, [r4, #12]
  400720:	4640      	mov	r0, r8
  400722:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400724:	6863      	ldr	r3, [r4, #4]
  400726:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40072a:	42b4      	cmp	r4, r6
  40072c:	d002      	beq.n	400734 <pio_handler_process+0x40>
  40072e:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400730:	2d00      	cmp	r5, #0
  400732:	d1ee      	bne.n	400712 <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400734:	4b07      	ldr	r3, [pc, #28]	; (400754 <pio_handler_process+0x60>)
  400736:	681b      	ldr	r3, [r3, #0]
  400738:	b123      	cbz	r3, 400744 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  40073a:	4b07      	ldr	r3, [pc, #28]	; (400758 <pio_handler_process+0x64>)
  40073c:	681b      	ldr	r3, [r3, #0]
  40073e:	b10b      	cbz	r3, 400744 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400740:	4648      	mov	r0, r9
  400742:	4798      	blx	r3
  400744:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400748:	004004d1 	.word	0x004004d1
  40074c:	004004d5 	.word	0x004004d5
  400750:	20000874 	.word	0x20000874
  400754:	20000928 	.word	0x20000928
  400758:	20000870 	.word	0x20000870

0040075c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40075c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40075e:	210b      	movs	r1, #11
  400760:	4801      	ldr	r0, [pc, #4]	; (400768 <PIOA_Handler+0xc>)
  400762:	4b02      	ldr	r3, [pc, #8]	; (40076c <PIOA_Handler+0x10>)
  400764:	4798      	blx	r3
  400766:	bd08      	pop	{r3, pc}
  400768:	400e0e00 	.word	0x400e0e00
  40076c:	004006f5 	.word	0x004006f5

00400770 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400770:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400772:	210c      	movs	r1, #12
  400774:	4801      	ldr	r0, [pc, #4]	; (40077c <PIOB_Handler+0xc>)
  400776:	4b02      	ldr	r3, [pc, #8]	; (400780 <PIOB_Handler+0x10>)
  400778:	4798      	blx	r3
  40077a:	bd08      	pop	{r3, pc}
  40077c:	400e1000 	.word	0x400e1000
  400780:	004006f5 	.word	0x004006f5

00400784 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400784:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400786:	210d      	movs	r1, #13
  400788:	4801      	ldr	r0, [pc, #4]	; (400790 <PIOC_Handler+0xc>)
  40078a:	4b02      	ldr	r3, [pc, #8]	; (400794 <PIOC_Handler+0x10>)
  40078c:	4798      	blx	r3
  40078e:	bd08      	pop	{r3, pc}
  400790:	400e1200 	.word	0x400e1200
  400794:	004006f5 	.word	0x004006f5

00400798 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400798:	4a18      	ldr	r2, [pc, #96]	; (4007fc <pmc_switch_mck_to_pllack+0x64>)
  40079a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40079c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4007a0:	4318      	orrs	r0, r3
  4007a2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007a4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007a6:	f013 0f08 	tst.w	r3, #8
  4007aa:	d003      	beq.n	4007b4 <pmc_switch_mck_to_pllack+0x1c>
  4007ac:	e009      	b.n	4007c2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4007ae:	3b01      	subs	r3, #1
  4007b0:	d103      	bne.n	4007ba <pmc_switch_mck_to_pllack+0x22>
  4007b2:	e01e      	b.n	4007f2 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4007b8:	4910      	ldr	r1, [pc, #64]	; (4007fc <pmc_switch_mck_to_pllack+0x64>)
  4007ba:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4007bc:	f012 0f08 	tst.w	r2, #8
  4007c0:	d0f5      	beq.n	4007ae <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4007c2:	4a0e      	ldr	r2, [pc, #56]	; (4007fc <pmc_switch_mck_to_pllack+0x64>)
  4007c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4007c6:	f023 0303 	bic.w	r3, r3, #3
  4007ca:	f043 0302 	orr.w	r3, r3, #2
  4007ce:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007d0:	6e90      	ldr	r0, [r2, #104]	; 0x68
  4007d2:	f010 0008 	ands.w	r0, r0, #8
  4007d6:	d004      	beq.n	4007e2 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4007d8:	2000      	movs	r0, #0
  4007da:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  4007dc:	3b01      	subs	r3, #1
  4007de:	d103      	bne.n	4007e8 <pmc_switch_mck_to_pllack+0x50>
  4007e0:	e009      	b.n	4007f6 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4007e6:	4905      	ldr	r1, [pc, #20]	; (4007fc <pmc_switch_mck_to_pllack+0x64>)
  4007e8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4007ea:	f012 0f08 	tst.w	r2, #8
  4007ee:	d0f5      	beq.n	4007dc <pmc_switch_mck_to_pllack+0x44>
  4007f0:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4007f2:	2001      	movs	r0, #1
  4007f4:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4007f6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4007f8:	4770      	bx	lr
  4007fa:	bf00      	nop
  4007fc:	400e0400 	.word	0x400e0400

00400800 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400800:	b138      	cbz	r0, 400812 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400802:	4911      	ldr	r1, [pc, #68]	; (400848 <pmc_switch_mainck_to_xtal+0x48>)
  400804:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400806:	4a11      	ldr	r2, [pc, #68]	; (40084c <pmc_switch_mainck_to_xtal+0x4c>)
  400808:	401a      	ands	r2, r3
  40080a:	4b11      	ldr	r3, [pc, #68]	; (400850 <pmc_switch_mainck_to_xtal+0x50>)
  40080c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40080e:	620b      	str	r3, [r1, #32]
  400810:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400812:	480d      	ldr	r0, [pc, #52]	; (400848 <pmc_switch_mainck_to_xtal+0x48>)
  400814:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400816:	0209      	lsls	r1, r1, #8
  400818:	b289      	uxth	r1, r1
  40081a:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
  40081e:	f023 0303 	bic.w	r3, r3, #3
  400822:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400826:	f043 0301 	orr.w	r3, r3, #1
  40082a:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40082c:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40082e:	4602      	mov	r2, r0
  400830:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400832:	f013 0f01 	tst.w	r3, #1
  400836:	d0fb      	beq.n	400830 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400838:	4a03      	ldr	r2, [pc, #12]	; (400848 <pmc_switch_mainck_to_xtal+0x48>)
  40083a:	6a13      	ldr	r3, [r2, #32]
  40083c:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400844:	6213      	str	r3, [r2, #32]
  400846:	4770      	bx	lr
  400848:	400e0400 	.word	0x400e0400
  40084c:	fec8fffc 	.word	0xfec8fffc
  400850:	01370002 	.word	0x01370002

00400854 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400854:	4b02      	ldr	r3, [pc, #8]	; (400860 <pmc_osc_is_ready_mainck+0xc>)
  400856:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400858:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40085c:	4770      	bx	lr
  40085e:	bf00      	nop
  400860:	400e0400 	.word	0x400e0400

00400864 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400864:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400868:	4b01      	ldr	r3, [pc, #4]	; (400870 <pmc_disable_pllack+0xc>)
  40086a:	629a      	str	r2, [r3, #40]	; 0x28
  40086c:	4770      	bx	lr
  40086e:	bf00      	nop
  400870:	400e0400 	.word	0x400e0400

00400874 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400874:	4b02      	ldr	r3, [pc, #8]	; (400880 <pmc_is_locked_pllack+0xc>)
  400876:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400878:	f000 0002 	and.w	r0, r0, #2
  40087c:	4770      	bx	lr
  40087e:	bf00      	nop
  400880:	400e0400 	.word	0x400e0400

00400884 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400884:	2822      	cmp	r0, #34	; 0x22
  400886:	d81e      	bhi.n	4008c6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400888:	281f      	cmp	r0, #31
  40088a:	d80c      	bhi.n	4008a6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40088c:	4b11      	ldr	r3, [pc, #68]	; (4008d4 <pmc_enable_periph_clk+0x50>)
  40088e:	699a      	ldr	r2, [r3, #24]
  400890:	2301      	movs	r3, #1
  400892:	4083      	lsls	r3, r0
  400894:	4393      	bics	r3, r2
  400896:	d018      	beq.n	4008ca <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400898:	2301      	movs	r3, #1
  40089a:	fa03 f000 	lsl.w	r0, r3, r0
  40089e:	4b0d      	ldr	r3, [pc, #52]	; (4008d4 <pmc_enable_periph_clk+0x50>)
  4008a0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4008a2:	2000      	movs	r0, #0
  4008a4:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4008a6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4008a8:	4b0a      	ldr	r3, [pc, #40]	; (4008d4 <pmc_enable_periph_clk+0x50>)
  4008aa:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4008ae:	2301      	movs	r3, #1
  4008b0:	4083      	lsls	r3, r0
  4008b2:	4393      	bics	r3, r2
  4008b4:	d00b      	beq.n	4008ce <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4008b6:	2301      	movs	r3, #1
  4008b8:	fa03 f000 	lsl.w	r0, r3, r0
  4008bc:	4b05      	ldr	r3, [pc, #20]	; (4008d4 <pmc_enable_periph_clk+0x50>)
  4008be:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  4008c2:	2000      	movs	r0, #0
  4008c4:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  4008c6:	2001      	movs	r0, #1
  4008c8:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4008ca:	2000      	movs	r0, #0
  4008cc:	4770      	bx	lr
  4008ce:	2000      	movs	r0, #0
}
  4008d0:	4770      	bx	lr
  4008d2:	bf00      	nop
  4008d4:	400e0400 	.word	0x400e0400

004008d8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4008d8:	e7fe      	b.n	4008d8 <Dummy_Handler>
  4008da:	bf00      	nop

004008dc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4008dc:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  4008de:	4b20      	ldr	r3, [pc, #128]	; (400960 <Reset_Handler+0x84>)
  4008e0:	4a20      	ldr	r2, [pc, #128]	; (400964 <Reset_Handler+0x88>)
  4008e2:	429a      	cmp	r2, r3
  4008e4:	d912      	bls.n	40090c <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  4008e6:	4b20      	ldr	r3, [pc, #128]	; (400968 <Reset_Handler+0x8c>)
  4008e8:	4a1d      	ldr	r2, [pc, #116]	; (400960 <Reset_Handler+0x84>)
  4008ea:	429a      	cmp	r2, r3
  4008ec:	d21e      	bcs.n	40092c <Reset_Handler+0x50>
  4008ee:	4611      	mov	r1, r2
  4008f0:	3b01      	subs	r3, #1
  4008f2:	1a9b      	subs	r3, r3, r2
  4008f4:	f023 0303 	bic.w	r3, r3, #3
  4008f8:	3304      	adds	r3, #4
  4008fa:	4a1a      	ldr	r2, [pc, #104]	; (400964 <Reset_Handler+0x88>)
  4008fc:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  4008fe:	f852 0b04 	ldr.w	r0, [r2], #4
  400902:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  400906:	429a      	cmp	r2, r3
  400908:	d1f9      	bne.n	4008fe <Reset_Handler+0x22>
  40090a:	e00f      	b.n	40092c <Reset_Handler+0x50>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  40090c:	4b14      	ldr	r3, [pc, #80]	; (400960 <Reset_Handler+0x84>)
  40090e:	4a15      	ldr	r2, [pc, #84]	; (400964 <Reset_Handler+0x88>)
  400910:	429a      	cmp	r2, r3
  400912:	d20b      	bcs.n	40092c <Reset_Handler+0x50>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  400914:	4b14      	ldr	r3, [pc, #80]	; (400968 <Reset_Handler+0x8c>)
  400916:	4a12      	ldr	r2, [pc, #72]	; (400960 <Reset_Handler+0x84>)
  400918:	1a9a      	subs	r2, r3, r2
  40091a:	4814      	ldr	r0, [pc, #80]	; (40096c <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  40091c:	1811      	adds	r1, r2, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  40091e:	b12a      	cbz	r2, 40092c <Reset_Handler+0x50>
			*pDest-- = *pSrc--;
  400920:	f851 2904 	ldr.w	r2, [r1], #-4
  400924:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400928:	4281      	cmp	r1, r0
  40092a:	d1f9      	bne.n	400920 <Reset_Handler+0x44>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  40092c:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40092e:	4b10      	ldr	r3, [pc, #64]	; (400970 <Reset_Handler+0x94>)
  400930:	4a10      	ldr	r2, [pc, #64]	; (400974 <Reset_Handler+0x98>)
  400932:	429a      	cmp	r2, r3
  400934:	d20b      	bcs.n	40094e <Reset_Handler+0x72>
  400936:	1d13      	adds	r3, r2, #4
  400938:	4a0f      	ldr	r2, [pc, #60]	; (400978 <Reset_Handler+0x9c>)
  40093a:	1ad2      	subs	r2, r2, r3
  40093c:	f022 0203 	bic.w	r2, r2, #3
  400940:	441a      	add	r2, r3
  400942:	3b04      	subs	r3, #4
		*pDest++ = 0;
  400944:	2100      	movs	r1, #0
  400946:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  40094a:	429a      	cmp	r2, r3
  40094c:	d1fb      	bne.n	400946 <Reset_Handler+0x6a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  40094e:	4b0b      	ldr	r3, [pc, #44]	; (40097c <Reset_Handler+0xa0>)
  400950:	4a0b      	ldr	r2, [pc, #44]	; (400980 <Reset_Handler+0xa4>)
  400952:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  400954:	4b0b      	ldr	r3, [pc, #44]	; (400984 <Reset_Handler+0xa8>)
  400956:	4798      	blx	r3

	/* Branch to main function */
	main();
  400958:	4b0b      	ldr	r3, [pc, #44]	; (400988 <Reset_Handler+0xac>)
  40095a:	4798      	blx	r3
  40095c:	e7fe      	b.n	40095c <Reset_Handler+0x80>
  40095e:	bf00      	nop
  400960:	20000000 	.word	0x20000000
  400964:	00402d08 	.word	0x00402d08
  400968:	20000854 	.word	0x20000854
  40096c:	00402d04 	.word	0x00402d04
  400970:	20000930 	.word	0x20000930
  400974:	20000854 	.word	0x20000854
  400978:	20000933 	.word	0x20000933
  40097c:	e000ed00 	.word	0xe000ed00
  400980:	00400000 	.word	0x00400000
  400984:	00400e25 	.word	0x00400e25
  400988:	00400d25 	.word	0x00400d25

0040098c <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  40098c:	4b3d      	ldr	r3, [pc, #244]	; (400a84 <SystemCoreClockUpdate+0xf8>)
  40098e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400990:	f003 0303 	and.w	r3, r3, #3
  400994:	2b03      	cmp	r3, #3
  400996:	d85d      	bhi.n	400a54 <SystemCoreClockUpdate+0xc8>
  400998:	e8df f003 	tbb	[pc, r3]
  40099c:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  4009a0:	4b39      	ldr	r3, [pc, #228]	; (400a88 <SystemCoreClockUpdate+0xfc>)
  4009a2:	695b      	ldr	r3, [r3, #20]
  4009a4:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4009a8:	bf14      	ite	ne
  4009aa:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4009ae:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4009b2:	4b36      	ldr	r3, [pc, #216]	; (400a8c <SystemCoreClockUpdate+0x100>)
  4009b4:	601a      	str	r2, [r3, #0]
  4009b6:	e04d      	b.n	400a54 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4009b8:	4b32      	ldr	r3, [pc, #200]	; (400a84 <SystemCoreClockUpdate+0xf8>)
  4009ba:	6a1b      	ldr	r3, [r3, #32]
  4009bc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4009c0:	d003      	beq.n	4009ca <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4009c2:	4a33      	ldr	r2, [pc, #204]	; (400a90 <SystemCoreClockUpdate+0x104>)
  4009c4:	4b31      	ldr	r3, [pc, #196]	; (400a8c <SystemCoreClockUpdate+0x100>)
  4009c6:	601a      	str	r2, [r3, #0]
  4009c8:	e044      	b.n	400a54 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4009ca:	4a32      	ldr	r2, [pc, #200]	; (400a94 <SystemCoreClockUpdate+0x108>)
  4009cc:	4b2f      	ldr	r3, [pc, #188]	; (400a8c <SystemCoreClockUpdate+0x100>)
  4009ce:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4009d0:	4b2c      	ldr	r3, [pc, #176]	; (400a84 <SystemCoreClockUpdate+0xf8>)
  4009d2:	6a1b      	ldr	r3, [r3, #32]
  4009d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4009d8:	2b10      	cmp	r3, #16
  4009da:	d002      	beq.n	4009e2 <SystemCoreClockUpdate+0x56>
  4009dc:	2b20      	cmp	r3, #32
  4009de:	d004      	beq.n	4009ea <SystemCoreClockUpdate+0x5e>
  4009e0:	e038      	b.n	400a54 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4009e2:	4a2d      	ldr	r2, [pc, #180]	; (400a98 <SystemCoreClockUpdate+0x10c>)
  4009e4:	4b29      	ldr	r3, [pc, #164]	; (400a8c <SystemCoreClockUpdate+0x100>)
  4009e6:	601a      	str	r2, [r3, #0]
			break;
  4009e8:	e034      	b.n	400a54 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4009ea:	4a29      	ldr	r2, [pc, #164]	; (400a90 <SystemCoreClockUpdate+0x104>)
  4009ec:	4b27      	ldr	r3, [pc, #156]	; (400a8c <SystemCoreClockUpdate+0x100>)
  4009ee:	601a      	str	r2, [r3, #0]
			break;
  4009f0:	e030      	b.n	400a54 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4009f2:	4b24      	ldr	r3, [pc, #144]	; (400a84 <SystemCoreClockUpdate+0xf8>)
  4009f4:	6a1b      	ldr	r3, [r3, #32]
  4009f6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4009fa:	d003      	beq.n	400a04 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  4009fc:	4a24      	ldr	r2, [pc, #144]	; (400a90 <SystemCoreClockUpdate+0x104>)
  4009fe:	4b23      	ldr	r3, [pc, #140]	; (400a8c <SystemCoreClockUpdate+0x100>)
  400a00:	601a      	str	r2, [r3, #0]
  400a02:	e012      	b.n	400a2a <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400a04:	4a23      	ldr	r2, [pc, #140]	; (400a94 <SystemCoreClockUpdate+0x108>)
  400a06:	4b21      	ldr	r3, [pc, #132]	; (400a8c <SystemCoreClockUpdate+0x100>)
  400a08:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400a0a:	4b1e      	ldr	r3, [pc, #120]	; (400a84 <SystemCoreClockUpdate+0xf8>)
  400a0c:	6a1b      	ldr	r3, [r3, #32]
  400a0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a12:	2b10      	cmp	r3, #16
  400a14:	d002      	beq.n	400a1c <SystemCoreClockUpdate+0x90>
  400a16:	2b20      	cmp	r3, #32
  400a18:	d004      	beq.n	400a24 <SystemCoreClockUpdate+0x98>
  400a1a:	e006      	b.n	400a2a <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400a1c:	4a1e      	ldr	r2, [pc, #120]	; (400a98 <SystemCoreClockUpdate+0x10c>)
  400a1e:	4b1b      	ldr	r3, [pc, #108]	; (400a8c <SystemCoreClockUpdate+0x100>)
  400a20:	601a      	str	r2, [r3, #0]
					break;
  400a22:	e002      	b.n	400a2a <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400a24:	4a1a      	ldr	r2, [pc, #104]	; (400a90 <SystemCoreClockUpdate+0x104>)
  400a26:	4b19      	ldr	r3, [pc, #100]	; (400a8c <SystemCoreClockUpdate+0x100>)
  400a28:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  400a2a:	4b16      	ldr	r3, [pc, #88]	; (400a84 <SystemCoreClockUpdate+0xf8>)
  400a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a2e:	f003 0303 	and.w	r3, r3, #3
  400a32:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400a34:	4a13      	ldr	r2, [pc, #76]	; (400a84 <SystemCoreClockUpdate+0xf8>)
  400a36:	bf07      	ittee	eq
  400a38:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400a3a:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400a3c:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400a3e:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  400a40:	4812      	ldr	r0, [pc, #72]	; (400a8c <SystemCoreClockUpdate+0x100>)
  400a42:	f3c3 410a 	ubfx	r1, r3, #16, #11
  400a46:	6803      	ldr	r3, [r0, #0]
  400a48:	fb01 3303 	mla	r3, r1, r3, r3
  400a4c:	b2d2      	uxtb	r2, r2
  400a4e:	fbb3 f3f2 	udiv	r3, r3, r2
  400a52:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  400a54:	4b0b      	ldr	r3, [pc, #44]	; (400a84 <SystemCoreClockUpdate+0xf8>)
  400a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a58:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a5c:	2b70      	cmp	r3, #112	; 0x70
  400a5e:	d107      	bne.n	400a70 <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  400a60:	4a0a      	ldr	r2, [pc, #40]	; (400a8c <SystemCoreClockUpdate+0x100>)
  400a62:	6813      	ldr	r3, [r2, #0]
  400a64:	490d      	ldr	r1, [pc, #52]	; (400a9c <SystemCoreClockUpdate+0x110>)
  400a66:	fba1 1303 	umull	r1, r3, r1, r3
  400a6a:	085b      	lsrs	r3, r3, #1
  400a6c:	6013      	str	r3, [r2, #0]
  400a6e:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400a70:	4b04      	ldr	r3, [pc, #16]	; (400a84 <SystemCoreClockUpdate+0xf8>)
  400a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  400a74:	4905      	ldr	r1, [pc, #20]	; (400a8c <SystemCoreClockUpdate+0x100>)
  400a76:	f3c3 1202 	ubfx	r2, r3, #4, #3
  400a7a:	680b      	ldr	r3, [r1, #0]
  400a7c:	40d3      	lsrs	r3, r2
  400a7e:	600b      	str	r3, [r1, #0]
  400a80:	4770      	bx	lr
  400a82:	bf00      	nop
  400a84:	400e0400 	.word	0x400e0400
  400a88:	400e1410 	.word	0x400e1410
  400a8c:	20000000 	.word	0x20000000
  400a90:	00b71b00 	.word	0x00b71b00
  400a94:	003d0900 	.word	0x003d0900
  400a98:	007a1200 	.word	0x007a1200
  400a9c:	aaaaaaab 	.word	0xaaaaaaab

00400aa0 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400aa0:	4b1a      	ldr	r3, [pc, #104]	; (400b0c <system_init_flash+0x6c>)
  400aa2:	4298      	cmp	r0, r3
  400aa4:	d807      	bhi.n	400ab6 <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400aa6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  400aaa:	4a19      	ldr	r2, [pc, #100]	; (400b10 <system_init_flash+0x70>)
  400aac:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400aae:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400ab2:	6013      	str	r3, [r2, #0]
  400ab4:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400ab6:	4b17      	ldr	r3, [pc, #92]	; (400b14 <system_init_flash+0x74>)
  400ab8:	4298      	cmp	r0, r3
  400aba:	d806      	bhi.n	400aca <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400abc:	4b16      	ldr	r3, [pc, #88]	; (400b18 <system_init_flash+0x78>)
  400abe:	4a14      	ldr	r2, [pc, #80]	; (400b10 <system_init_flash+0x70>)
  400ac0:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400ac2:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400ac6:	6013      	str	r3, [r2, #0]
  400ac8:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400aca:	4b14      	ldr	r3, [pc, #80]	; (400b1c <system_init_flash+0x7c>)
  400acc:	4298      	cmp	r0, r3
  400ace:	d806      	bhi.n	400ade <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400ad0:	4b13      	ldr	r3, [pc, #76]	; (400b20 <system_init_flash+0x80>)
  400ad2:	4a0f      	ldr	r2, [pc, #60]	; (400b10 <system_init_flash+0x70>)
  400ad4:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400ad6:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400ada:	6013      	str	r3, [r2, #0]
  400adc:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400ade:	4b11      	ldr	r3, [pc, #68]	; (400b24 <system_init_flash+0x84>)
  400ae0:	4298      	cmp	r0, r3
  400ae2:	d806      	bhi.n	400af2 <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400ae4:	4b10      	ldr	r3, [pc, #64]	; (400b28 <system_init_flash+0x88>)
  400ae6:	4a0a      	ldr	r2, [pc, #40]	; (400b10 <system_init_flash+0x70>)
  400ae8:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400aea:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400aee:	6013      	str	r3, [r2, #0]
  400af0:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400af2:	4b0e      	ldr	r3, [pc, #56]	; (400b2c <system_init_flash+0x8c>)
  400af4:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400af6:	bf94      	ite	ls
  400af8:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400afc:	4b0c      	ldrhi	r3, [pc, #48]	; (400b30 <system_init_flash+0x90>)
  400afe:	4a04      	ldr	r2, [pc, #16]	; (400b10 <system_init_flash+0x70>)
  400b00:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400b02:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400b06:	6013      	str	r3, [r2, #0]
  400b08:	4770      	bx	lr
  400b0a:	bf00      	nop
  400b0c:	01312cff 	.word	0x01312cff
  400b10:	400e0a00 	.word	0x400e0a00
  400b14:	026259ff 	.word	0x026259ff
  400b18:	04000100 	.word	0x04000100
  400b1c:	039386ff 	.word	0x039386ff
  400b20:	04000200 	.word	0x04000200
  400b24:	04c4b3ff 	.word	0x04c4b3ff
  400b28:	04000300 	.word	0x04000300
  400b2c:	05f5e0ff 	.word	0x05f5e0ff
  400b30:	04000500 	.word	0x04000500

00400b34 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400b34:	4b09      	ldr	r3, [pc, #36]	; (400b5c <_sbrk+0x28>)
  400b36:	681b      	ldr	r3, [r3, #0]
  400b38:	b913      	cbnz	r3, 400b40 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
  400b3a:	4a09      	ldr	r2, [pc, #36]	; (400b60 <_sbrk+0x2c>)
  400b3c:	4b07      	ldr	r3, [pc, #28]	; (400b5c <_sbrk+0x28>)
  400b3e:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  400b40:	4b06      	ldr	r3, [pc, #24]	; (400b5c <_sbrk+0x28>)
  400b42:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400b44:	181a      	adds	r2, r3, r0
  400b46:	4907      	ldr	r1, [pc, #28]	; (400b64 <_sbrk+0x30>)
  400b48:	4291      	cmp	r1, r2
  400b4a:	db04      	blt.n	400b56 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
  400b4c:	4610      	mov	r0, r2
  400b4e:	4a03      	ldr	r2, [pc, #12]	; (400b5c <_sbrk+0x28>)
  400b50:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400b52:	4618      	mov	r0, r3
  400b54:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
  400b56:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
  400b5a:	4770      	bx	lr
  400b5c:	200008e4 	.word	0x200008e4
  400b60:	20003930 	.word	0x20003930
  400b64:	20027ffc 	.word	0x20027ffc

00400b68 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400b68:	f04f 30ff 	mov.w	r0, #4294967295
  400b6c:	4770      	bx	lr
  400b6e:	bf00      	nop

00400b70 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400b70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400b74:	604b      	str	r3, [r1, #4]

	return 0;
}
  400b76:	2000      	movs	r0, #0
  400b78:	4770      	bx	lr
  400b7a:	bf00      	nop

00400b7c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400b7c:	2001      	movs	r0, #1
  400b7e:	4770      	bx	lr

00400b80 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400b80:	2000      	movs	r0, #0
  400b82:	4770      	bx	lr

00400b84 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  400b84:	b5f0      	push	{r4, r5, r6, r7, lr}
  400b86:	b083      	sub	sp, #12
  400b88:	4605      	mov	r5, r0
  400b8a:	460c      	mov	r4, r1
	uint32_t val = 0;
  400b8c:	2300      	movs	r3, #0
  400b8e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400b90:	4b18      	ldr	r3, [pc, #96]	; (400bf4 <usart_serial_getchar+0x70>)
  400b92:	4298      	cmp	r0, r3
  400b94:	d107      	bne.n	400ba6 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
  400b96:	461f      	mov	r7, r3
  400b98:	4e17      	ldr	r6, [pc, #92]	; (400bf8 <usart_serial_getchar+0x74>)
  400b9a:	4621      	mov	r1, r4
  400b9c:	4638      	mov	r0, r7
  400b9e:	47b0      	blx	r6
  400ba0:	2800      	cmp	r0, #0
  400ba2:	d1fa      	bne.n	400b9a <usart_serial_getchar+0x16>
  400ba4:	e017      	b.n	400bd6 <usart_serial_getchar+0x52>
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400ba6:	4b15      	ldr	r3, [pc, #84]	; (400bfc <usart_serial_getchar+0x78>)
  400ba8:	4298      	cmp	r0, r3
  400baa:	d107      	bne.n	400bbc <usart_serial_getchar+0x38>
		while (uart_read((Uart*)p_usart, data));
  400bac:	461e      	mov	r6, r3
  400bae:	4d12      	ldr	r5, [pc, #72]	; (400bf8 <usart_serial_getchar+0x74>)
  400bb0:	4621      	mov	r1, r4
  400bb2:	4630      	mov	r0, r6
  400bb4:	47a8      	blx	r5
  400bb6:	2800      	cmp	r0, #0
  400bb8:	d1fa      	bne.n	400bb0 <usart_serial_getchar+0x2c>
  400bba:	e018      	b.n	400bee <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400bbc:	4b10      	ldr	r3, [pc, #64]	; (400c00 <usart_serial_getchar+0x7c>)
  400bbe:	4298      	cmp	r0, r3
  400bc0:	d109      	bne.n	400bd6 <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
  400bc2:	461e      	mov	r6, r3
  400bc4:	4d0f      	ldr	r5, [pc, #60]	; (400c04 <usart_serial_getchar+0x80>)
  400bc6:	a901      	add	r1, sp, #4
  400bc8:	4630      	mov	r0, r6
  400bca:	47a8      	blx	r5
  400bcc:	2800      	cmp	r0, #0
  400bce:	d1fa      	bne.n	400bc6 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
  400bd0:	9b01      	ldr	r3, [sp, #4]
  400bd2:	7023      	strb	r3, [r4, #0]
  400bd4:	e00b      	b.n	400bee <usart_serial_getchar+0x6a>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400bd6:	4b0c      	ldr	r3, [pc, #48]	; (400c08 <usart_serial_getchar+0x84>)
  400bd8:	429d      	cmp	r5, r3
  400bda:	d108      	bne.n	400bee <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
  400bdc:	461e      	mov	r6, r3
  400bde:	4d09      	ldr	r5, [pc, #36]	; (400c04 <usart_serial_getchar+0x80>)
  400be0:	a901      	add	r1, sp, #4
  400be2:	4630      	mov	r0, r6
  400be4:	47a8      	blx	r5
  400be6:	2800      	cmp	r0, #0
  400be8:	d1fa      	bne.n	400be0 <usart_serial_getchar+0x5c>
		*data = (uint8_t)(val & 0xFF);
  400bea:	9b01      	ldr	r3, [sp, #4]
  400bec:	7023      	strb	r3, [r4, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  400bee:	b003      	add	sp, #12
  400bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400bf2:	bf00      	nop
  400bf4:	400e0600 	.word	0x400e0600
  400bf8:	00400229 	.word	0x00400229
  400bfc:	400e0800 	.word	0x400e0800
  400c00:	40024000 	.word	0x40024000
  400c04:	00400179 	.word	0x00400179
  400c08:	40028000 	.word	0x40028000

00400c0c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
  400c0c:	b570      	push	{r4, r5, r6, lr}
  400c0e:	460c      	mov	r4, r1
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  400c10:	4b18      	ldr	r3, [pc, #96]	; (400c74 <usart_serial_putchar+0x68>)
  400c12:	4298      	cmp	r0, r3
  400c14:	d108      	bne.n	400c28 <usart_serial_putchar+0x1c>
		while (uart_write((Uart*)p_usart, c)!=0);
  400c16:	461e      	mov	r6, r3
  400c18:	4d17      	ldr	r5, [pc, #92]	; (400c78 <usart_serial_putchar+0x6c>)
  400c1a:	4621      	mov	r1, r4
  400c1c:	4630      	mov	r0, r6
  400c1e:	47a8      	blx	r5
  400c20:	2800      	cmp	r0, #0
  400c22:	d1fa      	bne.n	400c1a <usart_serial_putchar+0xe>
		return 1;
  400c24:	2001      	movs	r0, #1
  400c26:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  400c28:	4b14      	ldr	r3, [pc, #80]	; (400c7c <usart_serial_putchar+0x70>)
  400c2a:	4298      	cmp	r0, r3
  400c2c:	d108      	bne.n	400c40 <usart_serial_putchar+0x34>
		while (uart_write((Uart*)p_usart, c)!=0);
  400c2e:	461e      	mov	r6, r3
  400c30:	4d11      	ldr	r5, [pc, #68]	; (400c78 <usart_serial_putchar+0x6c>)
  400c32:	4621      	mov	r1, r4
  400c34:	4630      	mov	r0, r6
  400c36:	47a8      	blx	r5
  400c38:	2800      	cmp	r0, #0
  400c3a:	d1fa      	bne.n	400c32 <usart_serial_putchar+0x26>
		return 1;
  400c3c:	2001      	movs	r0, #1
  400c3e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  400c40:	4b0f      	ldr	r3, [pc, #60]	; (400c80 <usart_serial_putchar+0x74>)
  400c42:	4298      	cmp	r0, r3
  400c44:	d108      	bne.n	400c58 <usart_serial_putchar+0x4c>
		while (usart_write(p_usart, c)!=0);
  400c46:	461e      	mov	r6, r3
  400c48:	4d0e      	ldr	r5, [pc, #56]	; (400c84 <usart_serial_putchar+0x78>)
  400c4a:	4621      	mov	r1, r4
  400c4c:	4630      	mov	r0, r6
  400c4e:	47a8      	blx	r5
  400c50:	2800      	cmp	r0, #0
  400c52:	d1fa      	bne.n	400c4a <usart_serial_putchar+0x3e>
		return 1;
  400c54:	2001      	movs	r0, #1
  400c56:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  400c58:	4b0b      	ldr	r3, [pc, #44]	; (400c88 <usart_serial_putchar+0x7c>)
  400c5a:	4298      	cmp	r0, r3
  400c5c:	d108      	bne.n	400c70 <usart_serial_putchar+0x64>
		while (usart_write(p_usart, c)!=0);
  400c5e:	461e      	mov	r6, r3
  400c60:	4d08      	ldr	r5, [pc, #32]	; (400c84 <usart_serial_putchar+0x78>)
  400c62:	4621      	mov	r1, r4
  400c64:	4630      	mov	r0, r6
  400c66:	47a8      	blx	r5
  400c68:	2800      	cmp	r0, #0
  400c6a:	d1fa      	bne.n	400c62 <usart_serial_putchar+0x56>
		return 1;
  400c6c:	2001      	movs	r0, #1
  400c6e:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
  400c70:	2000      	movs	r0, #0
}
  400c72:	bd70      	pop	{r4, r5, r6, pc}
  400c74:	400e0600 	.word	0x400e0600
  400c78:	00400219 	.word	0x00400219
  400c7c:	400e0800 	.word	0x400e0800
  400c80:	40024000 	.word	0x40024000
  400c84:	00400165 	.word	0x00400165
  400c88:	40028000 	.word	0x40028000

00400c8c <inicializacao_UART>:
#define BUTAUM1 1<<3
#define BUTAUM2 1<<12
#define SENSOR 1<<1*/


void inicializacao_UART (){
  400c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400c90:	b084      	sub	sp, #16
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400c92:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400d20 <inicializacao_UART+0x94>
  400c96:	f8cd 8004 	str.w	r8, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  400c9a:	4c16      	ldr	r4, [pc, #88]	; (400cf4 <inicializacao_UART+0x68>)
  400c9c:	6823      	ldr	r3, [r4, #0]
  400c9e:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  400ca0:	68a3      	ldr	r3, [r4, #8]
  400ca2:	9303      	str	r3, [sp, #12]
  400ca4:	2008      	movs	r0, #8
  400ca6:	4f14      	ldr	r7, [pc, #80]	; (400cf8 <inicializacao_UART+0x6c>)
  400ca8:	47b8      	blx	r7
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART0);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400caa:	4d14      	ldr	r5, [pc, #80]	; (400cfc <inicializacao_UART+0x70>)
  400cac:	a901      	add	r1, sp, #4
  400cae:	4628      	mov	r0, r5
  400cb0:	4e13      	ldr	r6, [pc, #76]	; (400d00 <inicializacao_UART+0x74>)
  400cb2:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  400cb4:	4b13      	ldr	r3, [pc, #76]	; (400d04 <inicializacao_UART+0x78>)
  400cb6:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  400cb8:	4a13      	ldr	r2, [pc, #76]	; (400d08 <inicializacao_UART+0x7c>)
  400cba:	4b14      	ldr	r3, [pc, #80]	; (400d0c <inicializacao_UART+0x80>)
  400cbc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  400cbe:	4a14      	ldr	r2, [pc, #80]	; (400d10 <inicializacao_UART+0x84>)
  400cc0:	4b14      	ldr	r3, [pc, #80]	; (400d14 <inicializacao_UART+0x88>)
  400cc2:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
  400cc4:	f8cd 8004 	str.w	r8, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
  400cc8:	6823      	ldr	r3, [r4, #0]
  400cca:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
  400ccc:	68a3      	ldr	r3, [r4, #8]
  400cce:	9303      	str	r3, [sp, #12]
  400cd0:	2008      	movs	r0, #8
  400cd2:	47b8      	blx	r7
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART0);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
  400cd4:	a901      	add	r1, sp, #4
  400cd6:	4628      	mov	r0, r5
  400cd8:	47b0      	blx	r6
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  400cda:	4d0f      	ldr	r5, [pc, #60]	; (400d18 <inicializacao_UART+0x8c>)
  400cdc:	682b      	ldr	r3, [r5, #0]
  400cde:	2100      	movs	r1, #0
  400ce0:	6898      	ldr	r0, [r3, #8]
  400ce2:	4c0e      	ldr	r4, [pc, #56]	; (400d1c <inicializacao_UART+0x90>)
  400ce4:	47a0      	blx	r4
	setbuf(stdin, NULL);
  400ce6:	682b      	ldr	r3, [r5, #0]
  400ce8:	2100      	movs	r1, #0
  400cea:	6858      	ldr	r0, [r3, #4]
  400cec:	47a0      	blx	r4
		.paritytype = CONF_UART_PARITY,
		.stopbits = CONF_UART_STOP_BITS
	};
	usart_serial_init(CONF_UART, &usart_options);
	stdio_serial_init((Usart *)CONF_UART, &usart_options);
}
  400cee:	b004      	add	sp, #16
  400cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400cf4:	20000004 	.word	0x20000004
  400cf8:	00400885 	.word	0x00400885
  400cfc:	400e0600 	.word	0x400e0600
  400d00:	004001e1 	.word	0x004001e1
  400d04:	20000924 	.word	0x20000924
  400d08:	00400c0d 	.word	0x00400c0d
  400d0c:	20000920 	.word	0x20000920
  400d10:	00400b85 	.word	0x00400b85
  400d14:	2000091c 	.word	0x2000091c
  400d18:	20000440 	.word	0x20000440
  400d1c:	00400fbd 	.word	0x00400fbd
  400d20:	07270e00 	.word	0x07270e00

00400d24 <main>:


int main (void){
  400d24:	b570      	push	{r4, r5, r6, lr}
	sysclk_init();
  400d26:	4b36      	ldr	r3, [pc, #216]	; (400e00 <main+0xdc>)
  400d28:	4798      	blx	r3
	board_init();
  400d2a:	4b36      	ldr	r3, [pc, #216]	; (400e04 <main+0xe0>)
  400d2c:	4798      	blx	r3
  400d2e:	200b      	movs	r0, #11
  400d30:	4c35      	ldr	r4, [pc, #212]	; (400e08 <main+0xe4>)
  400d32:	47a0      	blx	r4
  400d34:	200c      	movs	r0, #12
  400d36:	47a0      	blx	r4
  400d38:	200d      	movs	r0, #13
  400d3a:	47a0      	blx	r4
	PIOB->PIO_ODR = (BUTAUM1);
	PIOC->PIO_ODR = (BUTAUM2);
	PIOC->PIO_ODR = (SENSOR);*/

	//inicializar o UART
	inicializacao_UART();
  400d3c:	4b33      	ldr	r3, [pc, #204]	; (400e0c <main+0xe8>)
  400d3e:	4798      	blx	r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400d40:	4a33      	ldr	r2, [pc, #204]	; (400e10 <main+0xec>)
  400d42:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400d46:	6113      	str	r3, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d48:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400d4c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  400d50:	6113      	str	r3, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d52:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400d56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  400d5a:	6113      	str	r3, [r2, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d5c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	puts("chama no xesque\r");*/

	char key;

	while(1){
		key = getchar(); //espera uma char
  400d60:	4c2c      	ldr	r4, [pc, #176]	; (400e14 <main+0xf0>)
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400d62:	4d2b      	ldr	r5, [pc, #172]	; (400e10 <main+0xec>)
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400d64:	4616      	mov	r6, r2
  400d66:	6820      	ldr	r0, [r4, #0]
  400d68:	6842      	ldr	r2, [r0, #4]
  400d6a:	6853      	ldr	r3, [r2, #4]
  400d6c:	3b01      	subs	r3, #1
  400d6e:	6053      	str	r3, [r2, #4]
  400d70:	2b00      	cmp	r3, #0
  400d72:	da04      	bge.n	400d7e <main+0x5a>
  400d74:	6841      	ldr	r1, [r0, #4]
  400d76:	4b28      	ldr	r3, [pc, #160]	; (400e18 <main+0xf4>)
  400d78:	4798      	blx	r3
  400d7a:	b2c0      	uxtb	r0, r0
  400d7c:	e004      	b.n	400d88 <main+0x64>
  400d7e:	6842      	ldr	r2, [r0, #4]
  400d80:	6813      	ldr	r3, [r2, #0]
  400d82:	1c59      	adds	r1, r3, #1
  400d84:	6011      	str	r1, [r2, #0]
  400d86:	7818      	ldrb	r0, [r3, #0]
		switch(key){
  400d88:	3841      	subs	r0, #65	; 0x41
  400d8a:	2832      	cmp	r0, #50	; 0x32
  400d8c:	d833      	bhi.n	400df6 <main+0xd2>
  400d8e:	e8df f000 	tbb	[pc, r0]
  400d92:	261a      	.short	0x261a
  400d94:	32323232 	.word	0x32323232
  400d98:	32323232 	.word	0x32323232
  400d9c:	32323232 	.word	0x32323232
  400da0:	32323232 	.word	0x32323232
  400da4:	32323232 	.word	0x32323232
  400da8:	32323232 	.word	0x32323232
  400dac:	32323232 	.word	0x32323232
  400db0:	32323232 	.word	0x32323232
  400db4:	32322232 	.word	0x32322232
  400db8:	32322e2a 	.word	0x32322e2a
  400dbc:	32323232 	.word	0x32323232
  400dc0:	32323232 	.word	0x32323232
  400dc4:	1e          	.byte	0x1e
  400dc5:	00          	.byte	0x00
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400dc6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  400dca:	6333      	str	r3, [r6, #48]	; 0x30
  400dcc:	e7cb      	b.n	400d66 <main+0x42>
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400dce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400dd2:	636b      	str	r3, [r5, #52]	; 0x34
  400dd4:	e7c7      	b.n	400d66 <main+0x42>
  400dd6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  400dda:	636b      	str	r3, [r5, #52]	; 0x34
  400ddc:	e7c3      	b.n	400d66 <main+0x42>
  400dde:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  400de2:	6373      	str	r3, [r6, #52]	; 0x34
  400de4:	e7bf      	b.n	400d66 <main+0x42>
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400de6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400dea:	632b      	str	r3, [r5, #48]	; 0x30
  400dec:	e7bb      	b.n	400d66 <main+0x42>
  400dee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  400df2:	632b      	str	r3, [r5, #48]	; 0x30
  400df4:	e7b7      	b.n	400d66 <main+0x42>
				ioport_set_pin_level(LED_AZUL, 1); break;
			case 'h':
				//PIOA->PIO_SODR = (LED_VERDE); break;
				ioport_set_pin_level(LED_VERDE, 1); break;
			default:
				puts("BURRO!!!\r"); break;
  400df6:	4809      	ldr	r0, [pc, #36]	; (400e1c <main+0xf8>)
  400df8:	4b09      	ldr	r3, [pc, #36]	; (400e20 <main+0xfc>)
  400dfa:	4798      	blx	r3
  400dfc:	e7b3      	b.n	400d66 <main+0x42>
  400dfe:	bf00      	nop
  400e00:	0040023d 	.word	0x0040023d
  400e04:	004002a1 	.word	0x004002a1
  400e08:	00400885 	.word	0x00400885
  400e0c:	00400c8d 	.word	0x00400c8d
  400e10:	400e0e00 	.word	0x400e0e00
  400e14:	20000440 	.word	0x20000440
  400e18:	00400f89 	.word	0x00400f89
  400e1c:	00402ccc 	.word	0x00402ccc
  400e20:	00400f79 	.word	0x00400f79

00400e24 <__libc_init_array>:
  400e24:	b570      	push	{r4, r5, r6, lr}
  400e26:	4e0f      	ldr	r6, [pc, #60]	; (400e64 <__libc_init_array+0x40>)
  400e28:	4d0f      	ldr	r5, [pc, #60]	; (400e68 <__libc_init_array+0x44>)
  400e2a:	1b76      	subs	r6, r6, r5
  400e2c:	10b6      	asrs	r6, r6, #2
  400e2e:	bf18      	it	ne
  400e30:	2400      	movne	r4, #0
  400e32:	d005      	beq.n	400e40 <__libc_init_array+0x1c>
  400e34:	3401      	adds	r4, #1
  400e36:	f855 3b04 	ldr.w	r3, [r5], #4
  400e3a:	4798      	blx	r3
  400e3c:	42a6      	cmp	r6, r4
  400e3e:	d1f9      	bne.n	400e34 <__libc_init_array+0x10>
  400e40:	4e0a      	ldr	r6, [pc, #40]	; (400e6c <__libc_init_array+0x48>)
  400e42:	4d0b      	ldr	r5, [pc, #44]	; (400e70 <__libc_init_array+0x4c>)
  400e44:	1b76      	subs	r6, r6, r5
  400e46:	f001 ff4d 	bl	402ce4 <_init>
  400e4a:	10b6      	asrs	r6, r6, #2
  400e4c:	bf18      	it	ne
  400e4e:	2400      	movne	r4, #0
  400e50:	d006      	beq.n	400e60 <__libc_init_array+0x3c>
  400e52:	3401      	adds	r4, #1
  400e54:	f855 3b04 	ldr.w	r3, [r5], #4
  400e58:	4798      	blx	r3
  400e5a:	42a6      	cmp	r6, r4
  400e5c:	d1f9      	bne.n	400e52 <__libc_init_array+0x2e>
  400e5e:	bd70      	pop	{r4, r5, r6, pc}
  400e60:	bd70      	pop	{r4, r5, r6, pc}
  400e62:	bf00      	nop
  400e64:	00402cf0 	.word	0x00402cf0
  400e68:	00402cf0 	.word	0x00402cf0
  400e6c:	00402cf8 	.word	0x00402cf8
  400e70:	00402cf0 	.word	0x00402cf0

00400e74 <memset>:
  400e74:	b470      	push	{r4, r5, r6}
  400e76:	0784      	lsls	r4, r0, #30
  400e78:	d046      	beq.n	400f08 <memset+0x94>
  400e7a:	1e54      	subs	r4, r2, #1
  400e7c:	2a00      	cmp	r2, #0
  400e7e:	d041      	beq.n	400f04 <memset+0x90>
  400e80:	b2cd      	uxtb	r5, r1
  400e82:	4603      	mov	r3, r0
  400e84:	e002      	b.n	400e8c <memset+0x18>
  400e86:	1e62      	subs	r2, r4, #1
  400e88:	b3e4      	cbz	r4, 400f04 <memset+0x90>
  400e8a:	4614      	mov	r4, r2
  400e8c:	f803 5b01 	strb.w	r5, [r3], #1
  400e90:	079a      	lsls	r2, r3, #30
  400e92:	d1f8      	bne.n	400e86 <memset+0x12>
  400e94:	2c03      	cmp	r4, #3
  400e96:	d92e      	bls.n	400ef6 <memset+0x82>
  400e98:	b2cd      	uxtb	r5, r1
  400e9a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  400e9e:	2c0f      	cmp	r4, #15
  400ea0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  400ea4:	d919      	bls.n	400eda <memset+0x66>
  400ea6:	f103 0210 	add.w	r2, r3, #16
  400eaa:	4626      	mov	r6, r4
  400eac:	3e10      	subs	r6, #16
  400eae:	2e0f      	cmp	r6, #15
  400eb0:	f842 5c10 	str.w	r5, [r2, #-16]
  400eb4:	f842 5c0c 	str.w	r5, [r2, #-12]
  400eb8:	f842 5c08 	str.w	r5, [r2, #-8]
  400ebc:	f842 5c04 	str.w	r5, [r2, #-4]
  400ec0:	f102 0210 	add.w	r2, r2, #16
  400ec4:	d8f2      	bhi.n	400eac <memset+0x38>
  400ec6:	f1a4 0210 	sub.w	r2, r4, #16
  400eca:	f022 020f 	bic.w	r2, r2, #15
  400ece:	f004 040f 	and.w	r4, r4, #15
  400ed2:	3210      	adds	r2, #16
  400ed4:	2c03      	cmp	r4, #3
  400ed6:	4413      	add	r3, r2
  400ed8:	d90d      	bls.n	400ef6 <memset+0x82>
  400eda:	461e      	mov	r6, r3
  400edc:	4622      	mov	r2, r4
  400ede:	3a04      	subs	r2, #4
  400ee0:	2a03      	cmp	r2, #3
  400ee2:	f846 5b04 	str.w	r5, [r6], #4
  400ee6:	d8fa      	bhi.n	400ede <memset+0x6a>
  400ee8:	1f22      	subs	r2, r4, #4
  400eea:	f022 0203 	bic.w	r2, r2, #3
  400eee:	3204      	adds	r2, #4
  400ef0:	4413      	add	r3, r2
  400ef2:	f004 0403 	and.w	r4, r4, #3
  400ef6:	b12c      	cbz	r4, 400f04 <memset+0x90>
  400ef8:	b2c9      	uxtb	r1, r1
  400efa:	441c      	add	r4, r3
  400efc:	f803 1b01 	strb.w	r1, [r3], #1
  400f00:	42a3      	cmp	r3, r4
  400f02:	d1fb      	bne.n	400efc <memset+0x88>
  400f04:	bc70      	pop	{r4, r5, r6}
  400f06:	4770      	bx	lr
  400f08:	4614      	mov	r4, r2
  400f0a:	4603      	mov	r3, r0
  400f0c:	e7c2      	b.n	400e94 <memset+0x20>
  400f0e:	bf00      	nop

00400f10 <_puts_r>:
  400f10:	b5f0      	push	{r4, r5, r6, r7, lr}
  400f12:	4605      	mov	r5, r0
  400f14:	b089      	sub	sp, #36	; 0x24
  400f16:	4608      	mov	r0, r1
  400f18:	460c      	mov	r4, r1
  400f1a:	f000 f911 	bl	401140 <strlen>
  400f1e:	6bab      	ldr	r3, [r5, #56]	; 0x38
  400f20:	4f14      	ldr	r7, [pc, #80]	; (400f74 <_puts_r+0x64>)
  400f22:	9404      	str	r4, [sp, #16]
  400f24:	2601      	movs	r6, #1
  400f26:	1c44      	adds	r4, r0, #1
  400f28:	a904      	add	r1, sp, #16
  400f2a:	2202      	movs	r2, #2
  400f2c:	9403      	str	r4, [sp, #12]
  400f2e:	9005      	str	r0, [sp, #20]
  400f30:	68ac      	ldr	r4, [r5, #8]
  400f32:	9706      	str	r7, [sp, #24]
  400f34:	9607      	str	r6, [sp, #28]
  400f36:	9101      	str	r1, [sp, #4]
  400f38:	9202      	str	r2, [sp, #8]
  400f3a:	b1b3      	cbz	r3, 400f6a <_puts_r+0x5a>
  400f3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  400f40:	049a      	lsls	r2, r3, #18
  400f42:	d406      	bmi.n	400f52 <_puts_r+0x42>
  400f44:	6e62      	ldr	r2, [r4, #100]	; 0x64
  400f46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  400f4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  400f4e:	81a3      	strh	r3, [r4, #12]
  400f50:	6662      	str	r2, [r4, #100]	; 0x64
  400f52:	4621      	mov	r1, r4
  400f54:	4628      	mov	r0, r5
  400f56:	aa01      	add	r2, sp, #4
  400f58:	f000 fc0e 	bl	401778 <__sfvwrite_r>
  400f5c:	2800      	cmp	r0, #0
  400f5e:	bf14      	ite	ne
  400f60:	f04f 30ff 	movne.w	r0, #4294967295
  400f64:	200a      	moveq	r0, #10
  400f66:	b009      	add	sp, #36	; 0x24
  400f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400f6a:	4628      	mov	r0, r5
  400f6c:	f000 fab0 	bl	4014d0 <__sinit>
  400f70:	e7e4      	b.n	400f3c <_puts_r+0x2c>
  400f72:	bf00      	nop
  400f74:	00402ce0 	.word	0x00402ce0

00400f78 <puts>:
  400f78:	4b02      	ldr	r3, [pc, #8]	; (400f84 <puts+0xc>)
  400f7a:	4601      	mov	r1, r0
  400f7c:	6818      	ldr	r0, [r3, #0]
  400f7e:	f7ff bfc7 	b.w	400f10 <_puts_r>
  400f82:	bf00      	nop
  400f84:	20000440 	.word	0x20000440

00400f88 <__srget_r>:
  400f88:	b538      	push	{r3, r4, r5, lr}
  400f8a:	460c      	mov	r4, r1
  400f8c:	4605      	mov	r5, r0
  400f8e:	b108      	cbz	r0, 400f94 <__srget_r+0xc>
  400f90:	6b83      	ldr	r3, [r0, #56]	; 0x38
  400f92:	b163      	cbz	r3, 400fae <__srget_r+0x26>
  400f94:	4628      	mov	r0, r5
  400f96:	4621      	mov	r1, r4
  400f98:	f001 fc46 	bl	402828 <__srefill_r>
  400f9c:	b950      	cbnz	r0, 400fb4 <__srget_r+0x2c>
  400f9e:	e894 000c 	ldmia.w	r4, {r2, r3}
  400fa2:	3b01      	subs	r3, #1
  400fa4:	1c51      	adds	r1, r2, #1
  400fa6:	e884 000a 	stmia.w	r4, {r1, r3}
  400faa:	7810      	ldrb	r0, [r2, #0]
  400fac:	bd38      	pop	{r3, r4, r5, pc}
  400fae:	f000 fa8f 	bl	4014d0 <__sinit>
  400fb2:	e7ef      	b.n	400f94 <__srget_r+0xc>
  400fb4:	f04f 30ff 	mov.w	r0, #4294967295
  400fb8:	bd38      	pop	{r3, r4, r5, pc}
  400fba:	bf00      	nop

00400fbc <setbuf>:
  400fbc:	2900      	cmp	r1, #0
  400fbe:	bf0c      	ite	eq
  400fc0:	2202      	moveq	r2, #2
  400fc2:	2200      	movne	r2, #0
  400fc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  400fc8:	f000 b800 	b.w	400fcc <setvbuf>

00400fcc <setvbuf>:
  400fcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400fd0:	4c51      	ldr	r4, [pc, #324]	; (401118 <setvbuf+0x14c>)
  400fd2:	6825      	ldr	r5, [r4, #0]
  400fd4:	b083      	sub	sp, #12
  400fd6:	4604      	mov	r4, r0
  400fd8:	460f      	mov	r7, r1
  400fda:	4690      	mov	r8, r2
  400fdc:	461e      	mov	r6, r3
  400fde:	b115      	cbz	r5, 400fe6 <setvbuf+0x1a>
  400fe0:	6bab      	ldr	r3, [r5, #56]	; 0x38
  400fe2:	2b00      	cmp	r3, #0
  400fe4:	d079      	beq.n	4010da <setvbuf+0x10e>
  400fe6:	f1b8 0f02 	cmp.w	r8, #2
  400fea:	d004      	beq.n	400ff6 <setvbuf+0x2a>
  400fec:	f1b8 0f01 	cmp.w	r8, #1
  400ff0:	d87f      	bhi.n	4010f2 <setvbuf+0x126>
  400ff2:	2e00      	cmp	r6, #0
  400ff4:	db7d      	blt.n	4010f2 <setvbuf+0x126>
  400ff6:	4621      	mov	r1, r4
  400ff8:	4628      	mov	r0, r5
  400ffa:	f000 f9c3 	bl	401384 <_fflush_r>
  400ffe:	6b21      	ldr	r1, [r4, #48]	; 0x30
  401000:	b141      	cbz	r1, 401014 <setvbuf+0x48>
  401002:	f104 0340 	add.w	r3, r4, #64	; 0x40
  401006:	4299      	cmp	r1, r3
  401008:	d002      	beq.n	401010 <setvbuf+0x44>
  40100a:	4628      	mov	r0, r5
  40100c:	f000 facc 	bl	4015a8 <_free_r>
  401010:	2300      	movs	r3, #0
  401012:	6323      	str	r3, [r4, #48]	; 0x30
  401014:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401018:	2200      	movs	r2, #0
  40101a:	61a2      	str	r2, [r4, #24]
  40101c:	6062      	str	r2, [r4, #4]
  40101e:	061a      	lsls	r2, r3, #24
  401020:	d454      	bmi.n	4010cc <setvbuf+0x100>
  401022:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  401026:	f023 0303 	bic.w	r3, r3, #3
  40102a:	f1b8 0f02 	cmp.w	r8, #2
  40102e:	81a3      	strh	r3, [r4, #12]
  401030:	d039      	beq.n	4010a6 <setvbuf+0xda>
  401032:	ab01      	add	r3, sp, #4
  401034:	466a      	mov	r2, sp
  401036:	4621      	mov	r1, r4
  401038:	4628      	mov	r0, r5
  40103a:	f000 fd6f 	bl	401b1c <__swhatbuf_r>
  40103e:	89a3      	ldrh	r3, [r4, #12]
  401040:	4318      	orrs	r0, r3
  401042:	81a0      	strh	r0, [r4, #12]
  401044:	b326      	cbz	r6, 401090 <setvbuf+0xc4>
  401046:	b327      	cbz	r7, 401092 <setvbuf+0xc6>
  401048:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40104a:	2b00      	cmp	r3, #0
  40104c:	d04d      	beq.n	4010ea <setvbuf+0x11e>
  40104e:	9b00      	ldr	r3, [sp, #0]
  401050:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
  401054:	6027      	str	r7, [r4, #0]
  401056:	429e      	cmp	r6, r3
  401058:	bf1c      	itt	ne
  40105a:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
  40105e:	81a0      	strhne	r0, [r4, #12]
  401060:	f1b8 0f01 	cmp.w	r8, #1
  401064:	bf08      	it	eq
  401066:	f040 0001 	orreq.w	r0, r0, #1
  40106a:	b283      	uxth	r3, r0
  40106c:	bf08      	it	eq
  40106e:	81a0      	strheq	r0, [r4, #12]
  401070:	f003 0008 	and.w	r0, r3, #8
  401074:	b280      	uxth	r0, r0
  401076:	6127      	str	r7, [r4, #16]
  401078:	6166      	str	r6, [r4, #20]
  40107a:	b318      	cbz	r0, 4010c4 <setvbuf+0xf8>
  40107c:	f013 0001 	ands.w	r0, r3, #1
  401080:	d02f      	beq.n	4010e2 <setvbuf+0x116>
  401082:	2000      	movs	r0, #0
  401084:	4276      	negs	r6, r6
  401086:	61a6      	str	r6, [r4, #24]
  401088:	60a0      	str	r0, [r4, #8]
  40108a:	b003      	add	sp, #12
  40108c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401090:	9e00      	ldr	r6, [sp, #0]
  401092:	4630      	mov	r0, r6
  401094:	f000 fdb6 	bl	401c04 <malloc>
  401098:	4607      	mov	r7, r0
  40109a:	b368      	cbz	r0, 4010f8 <setvbuf+0x12c>
  40109c:	89a3      	ldrh	r3, [r4, #12]
  40109e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4010a2:	81a3      	strh	r3, [r4, #12]
  4010a4:	e7d0      	b.n	401048 <setvbuf+0x7c>
  4010a6:	2000      	movs	r0, #0
  4010a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4010ac:	f043 0302 	orr.w	r3, r3, #2
  4010b0:	2500      	movs	r5, #0
  4010b2:	2101      	movs	r1, #1
  4010b4:	81a3      	strh	r3, [r4, #12]
  4010b6:	60a5      	str	r5, [r4, #8]
  4010b8:	6022      	str	r2, [r4, #0]
  4010ba:	6122      	str	r2, [r4, #16]
  4010bc:	6161      	str	r1, [r4, #20]
  4010be:	b003      	add	sp, #12
  4010c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4010c4:	60a0      	str	r0, [r4, #8]
  4010c6:	b003      	add	sp, #12
  4010c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4010cc:	6921      	ldr	r1, [r4, #16]
  4010ce:	4628      	mov	r0, r5
  4010d0:	f000 fa6a 	bl	4015a8 <_free_r>
  4010d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4010d8:	e7a3      	b.n	401022 <setvbuf+0x56>
  4010da:	4628      	mov	r0, r5
  4010dc:	f000 f9f8 	bl	4014d0 <__sinit>
  4010e0:	e781      	b.n	400fe6 <setvbuf+0x1a>
  4010e2:	60a6      	str	r6, [r4, #8]
  4010e4:	b003      	add	sp, #12
  4010e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4010ea:	4628      	mov	r0, r5
  4010ec:	f000 f9f0 	bl	4014d0 <__sinit>
  4010f0:	e7ad      	b.n	40104e <setvbuf+0x82>
  4010f2:	f04f 30ff 	mov.w	r0, #4294967295
  4010f6:	e7e2      	b.n	4010be <setvbuf+0xf2>
  4010f8:	f8dd 9000 	ldr.w	r9, [sp]
  4010fc:	45b1      	cmp	r9, r6
  4010fe:	d006      	beq.n	40110e <setvbuf+0x142>
  401100:	4648      	mov	r0, r9
  401102:	f000 fd7f 	bl	401c04 <malloc>
  401106:	4607      	mov	r7, r0
  401108:	b108      	cbz	r0, 40110e <setvbuf+0x142>
  40110a:	464e      	mov	r6, r9
  40110c:	e7c6      	b.n	40109c <setvbuf+0xd0>
  40110e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401112:	f04f 30ff 	mov.w	r0, #4294967295
  401116:	e7c7      	b.n	4010a8 <setvbuf+0xdc>
  401118:	20000440 	.word	0x20000440
	...

00401140 <strlen>:
  401140:	f890 f000 	pld	[r0]
  401144:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  401148:	f020 0107 	bic.w	r1, r0, #7
  40114c:	f06f 0c00 	mvn.w	ip, #0
  401150:	f010 0407 	ands.w	r4, r0, #7
  401154:	f891 f020 	pld	[r1, #32]
  401158:	f040 8049 	bne.w	4011ee <strlen+0xae>
  40115c:	f04f 0400 	mov.w	r4, #0
  401160:	f06f 0007 	mvn.w	r0, #7
  401164:	e9d1 2300 	ldrd	r2, r3, [r1]
  401168:	f891 f040 	pld	[r1, #64]	; 0x40
  40116c:	f100 0008 	add.w	r0, r0, #8
  401170:	fa82 f24c 	uadd8	r2, r2, ip
  401174:	faa4 f28c 	sel	r2, r4, ip
  401178:	fa83 f34c 	uadd8	r3, r3, ip
  40117c:	faa2 f38c 	sel	r3, r2, ip
  401180:	bb4b      	cbnz	r3, 4011d6 <strlen+0x96>
  401182:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  401186:	fa82 f24c 	uadd8	r2, r2, ip
  40118a:	f100 0008 	add.w	r0, r0, #8
  40118e:	faa4 f28c 	sel	r2, r4, ip
  401192:	fa83 f34c 	uadd8	r3, r3, ip
  401196:	faa2 f38c 	sel	r3, r2, ip
  40119a:	b9e3      	cbnz	r3, 4011d6 <strlen+0x96>
  40119c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4011a0:	fa82 f24c 	uadd8	r2, r2, ip
  4011a4:	f100 0008 	add.w	r0, r0, #8
  4011a8:	faa4 f28c 	sel	r2, r4, ip
  4011ac:	fa83 f34c 	uadd8	r3, r3, ip
  4011b0:	faa2 f38c 	sel	r3, r2, ip
  4011b4:	b97b      	cbnz	r3, 4011d6 <strlen+0x96>
  4011b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4011ba:	f101 0120 	add.w	r1, r1, #32
  4011be:	fa82 f24c 	uadd8	r2, r2, ip
  4011c2:	f100 0008 	add.w	r0, r0, #8
  4011c6:	faa4 f28c 	sel	r2, r4, ip
  4011ca:	fa83 f34c 	uadd8	r3, r3, ip
  4011ce:	faa2 f38c 	sel	r3, r2, ip
  4011d2:	2b00      	cmp	r3, #0
  4011d4:	d0c6      	beq.n	401164 <strlen+0x24>
  4011d6:	2a00      	cmp	r2, #0
  4011d8:	bf04      	itt	eq
  4011da:	3004      	addeq	r0, #4
  4011dc:	461a      	moveq	r2, r3
  4011de:	ba12      	rev	r2, r2
  4011e0:	fab2 f282 	clz	r2, r2
  4011e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4011e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4011ec:	4770      	bx	lr
  4011ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4011f2:	f004 0503 	and.w	r5, r4, #3
  4011f6:	f1c4 0000 	rsb	r0, r4, #0
  4011fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4011fe:	f014 0f04 	tst.w	r4, #4
  401202:	f891 f040 	pld	[r1, #64]	; 0x40
  401206:	fa0c f505 	lsl.w	r5, ip, r5
  40120a:	ea62 0205 	orn	r2, r2, r5
  40120e:	bf1c      	itt	ne
  401210:	ea63 0305 	ornne	r3, r3, r5
  401214:	4662      	movne	r2, ip
  401216:	f04f 0400 	mov.w	r4, #0
  40121a:	e7a9      	b.n	401170 <strlen+0x30>

0040121c <register_fini>:
  40121c:	4b02      	ldr	r3, [pc, #8]	; (401228 <register_fini+0xc>)
  40121e:	b113      	cbz	r3, 401226 <register_fini+0xa>
  401220:	4802      	ldr	r0, [pc, #8]	; (40122c <register_fini+0x10>)
  401222:	f000 b805 	b.w	401230 <atexit>
  401226:	4770      	bx	lr
  401228:	00000000 	.word	0x00000000
  40122c:	004014e5 	.word	0x004014e5

00401230 <atexit>:
  401230:	2300      	movs	r3, #0
  401232:	4601      	mov	r1, r0
  401234:	461a      	mov	r2, r3
  401236:	4618      	mov	r0, r3
  401238:	f001 bc50 	b.w	402adc <__register_exitproc>

0040123c <__sflush_r>:
  40123c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  401240:	b29a      	uxth	r2, r3
  401242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401246:	460d      	mov	r5, r1
  401248:	0711      	lsls	r1, r2, #28
  40124a:	4680      	mov	r8, r0
  40124c:	d43c      	bmi.n	4012c8 <__sflush_r+0x8c>
  40124e:	686a      	ldr	r2, [r5, #4]
  401250:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  401254:	2a00      	cmp	r2, #0
  401256:	81ab      	strh	r3, [r5, #12]
  401258:	dd73      	ble.n	401342 <__sflush_r+0x106>
  40125a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40125c:	2c00      	cmp	r4, #0
  40125e:	d04b      	beq.n	4012f8 <__sflush_r+0xbc>
  401260:	b29b      	uxth	r3, r3
  401262:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
  401266:	2100      	movs	r1, #0
  401268:	b292      	uxth	r2, r2
  40126a:	f8d8 6000 	ldr.w	r6, [r8]
  40126e:	f8c8 1000 	str.w	r1, [r8]
  401272:	2a00      	cmp	r2, #0
  401274:	d069      	beq.n	40134a <__sflush_r+0x10e>
  401276:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  401278:	075f      	lsls	r7, r3, #29
  40127a:	d505      	bpl.n	401288 <__sflush_r+0x4c>
  40127c:	6869      	ldr	r1, [r5, #4]
  40127e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  401280:	1a52      	subs	r2, r2, r1
  401282:	b10b      	cbz	r3, 401288 <__sflush_r+0x4c>
  401284:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  401286:	1ad2      	subs	r2, r2, r3
  401288:	2300      	movs	r3, #0
  40128a:	69e9      	ldr	r1, [r5, #28]
  40128c:	4640      	mov	r0, r8
  40128e:	47a0      	blx	r4
  401290:	1c44      	adds	r4, r0, #1
  401292:	d03c      	beq.n	40130e <__sflush_r+0xd2>
  401294:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  401298:	692a      	ldr	r2, [r5, #16]
  40129a:	602a      	str	r2, [r5, #0]
  40129c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4012a0:	2200      	movs	r2, #0
  4012a2:	81ab      	strh	r3, [r5, #12]
  4012a4:	04db      	lsls	r3, r3, #19
  4012a6:	606a      	str	r2, [r5, #4]
  4012a8:	d449      	bmi.n	40133e <__sflush_r+0x102>
  4012aa:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4012ac:	f8c8 6000 	str.w	r6, [r8]
  4012b0:	b311      	cbz	r1, 4012f8 <__sflush_r+0xbc>
  4012b2:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4012b6:	4299      	cmp	r1, r3
  4012b8:	d002      	beq.n	4012c0 <__sflush_r+0x84>
  4012ba:	4640      	mov	r0, r8
  4012bc:	f000 f974 	bl	4015a8 <_free_r>
  4012c0:	2000      	movs	r0, #0
  4012c2:	6328      	str	r0, [r5, #48]	; 0x30
  4012c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4012c8:	692e      	ldr	r6, [r5, #16]
  4012ca:	b1ae      	cbz	r6, 4012f8 <__sflush_r+0xbc>
  4012cc:	682c      	ldr	r4, [r5, #0]
  4012ce:	602e      	str	r6, [r5, #0]
  4012d0:	0790      	lsls	r0, r2, #30
  4012d2:	bf0c      	ite	eq
  4012d4:	696b      	ldreq	r3, [r5, #20]
  4012d6:	2300      	movne	r3, #0
  4012d8:	1ba4      	subs	r4, r4, r6
  4012da:	60ab      	str	r3, [r5, #8]
  4012dc:	e00a      	b.n	4012f4 <__sflush_r+0xb8>
  4012de:	4623      	mov	r3, r4
  4012e0:	4632      	mov	r2, r6
  4012e2:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4012e4:	69e9      	ldr	r1, [r5, #28]
  4012e6:	4640      	mov	r0, r8
  4012e8:	47b8      	blx	r7
  4012ea:	2800      	cmp	r0, #0
  4012ec:	eba4 0400 	sub.w	r4, r4, r0
  4012f0:	4406      	add	r6, r0
  4012f2:	dd04      	ble.n	4012fe <__sflush_r+0xc2>
  4012f4:	2c00      	cmp	r4, #0
  4012f6:	dcf2      	bgt.n	4012de <__sflush_r+0xa2>
  4012f8:	2000      	movs	r0, #0
  4012fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4012fe:	89ab      	ldrh	r3, [r5, #12]
  401300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  401304:	81ab      	strh	r3, [r5, #12]
  401306:	f04f 30ff 	mov.w	r0, #4294967295
  40130a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  40130e:	f8d8 2000 	ldr.w	r2, [r8]
  401312:	2a1d      	cmp	r2, #29
  401314:	d8f3      	bhi.n	4012fe <__sflush_r+0xc2>
  401316:	4b1a      	ldr	r3, [pc, #104]	; (401380 <__sflush_r+0x144>)
  401318:	40d3      	lsrs	r3, r2
  40131a:	f003 0301 	and.w	r3, r3, #1
  40131e:	f083 0401 	eor.w	r4, r3, #1
  401322:	2b00      	cmp	r3, #0
  401324:	d0eb      	beq.n	4012fe <__sflush_r+0xc2>
  401326:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40132a:	6929      	ldr	r1, [r5, #16]
  40132c:	6029      	str	r1, [r5, #0]
  40132e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  401332:	04d9      	lsls	r1, r3, #19
  401334:	606c      	str	r4, [r5, #4]
  401336:	81ab      	strh	r3, [r5, #12]
  401338:	d5b7      	bpl.n	4012aa <__sflush_r+0x6e>
  40133a:	2a00      	cmp	r2, #0
  40133c:	d1b5      	bne.n	4012aa <__sflush_r+0x6e>
  40133e:	6528      	str	r0, [r5, #80]	; 0x50
  401340:	e7b3      	b.n	4012aa <__sflush_r+0x6e>
  401342:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  401344:	2a00      	cmp	r2, #0
  401346:	dc88      	bgt.n	40125a <__sflush_r+0x1e>
  401348:	e7d6      	b.n	4012f8 <__sflush_r+0xbc>
  40134a:	2301      	movs	r3, #1
  40134c:	69e9      	ldr	r1, [r5, #28]
  40134e:	4640      	mov	r0, r8
  401350:	47a0      	blx	r4
  401352:	1c43      	adds	r3, r0, #1
  401354:	4602      	mov	r2, r0
  401356:	d002      	beq.n	40135e <__sflush_r+0x122>
  401358:	89ab      	ldrh	r3, [r5, #12]
  40135a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  40135c:	e78c      	b.n	401278 <__sflush_r+0x3c>
  40135e:	f8d8 3000 	ldr.w	r3, [r8]
  401362:	2b00      	cmp	r3, #0
  401364:	d0f8      	beq.n	401358 <__sflush_r+0x11c>
  401366:	2b1d      	cmp	r3, #29
  401368:	d001      	beq.n	40136e <__sflush_r+0x132>
  40136a:	2b16      	cmp	r3, #22
  40136c:	d102      	bne.n	401374 <__sflush_r+0x138>
  40136e:	f8c8 6000 	str.w	r6, [r8]
  401372:	e7c1      	b.n	4012f8 <__sflush_r+0xbc>
  401374:	89ab      	ldrh	r3, [r5, #12]
  401376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40137a:	81ab      	strh	r3, [r5, #12]
  40137c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401380:	20400001 	.word	0x20400001

00401384 <_fflush_r>:
  401384:	b510      	push	{r4, lr}
  401386:	4604      	mov	r4, r0
  401388:	b082      	sub	sp, #8
  40138a:	b108      	cbz	r0, 401390 <_fflush_r+0xc>
  40138c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40138e:	b153      	cbz	r3, 4013a6 <_fflush_r+0x22>
  401390:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
  401394:	b908      	cbnz	r0, 40139a <_fflush_r+0x16>
  401396:	b002      	add	sp, #8
  401398:	bd10      	pop	{r4, pc}
  40139a:	4620      	mov	r0, r4
  40139c:	b002      	add	sp, #8
  40139e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4013a2:	f7ff bf4b 	b.w	40123c <__sflush_r>
  4013a6:	9101      	str	r1, [sp, #4]
  4013a8:	f000 f892 	bl	4014d0 <__sinit>
  4013ac:	9901      	ldr	r1, [sp, #4]
  4013ae:	e7ef      	b.n	401390 <_fflush_r+0xc>

004013b0 <fflush>:
  4013b0:	b120      	cbz	r0, 4013bc <fflush+0xc>
  4013b2:	4b05      	ldr	r3, [pc, #20]	; (4013c8 <fflush+0x18>)
  4013b4:	4601      	mov	r1, r0
  4013b6:	6818      	ldr	r0, [r3, #0]
  4013b8:	f7ff bfe4 	b.w	401384 <_fflush_r>
  4013bc:	4b03      	ldr	r3, [pc, #12]	; (4013cc <fflush+0x1c>)
  4013be:	4904      	ldr	r1, [pc, #16]	; (4013d0 <fflush+0x20>)
  4013c0:	6818      	ldr	r0, [r3, #0]
  4013c2:	f000 bb81 	b.w	401ac8 <_fwalk_reent>
  4013c6:	bf00      	nop
  4013c8:	20000440 	.word	0x20000440
  4013cc:	00402cdc 	.word	0x00402cdc
  4013d0:	00401385 	.word	0x00401385

004013d4 <_cleanup_r>:
  4013d4:	4901      	ldr	r1, [pc, #4]	; (4013dc <_cleanup_r+0x8>)
  4013d6:	f000 bb77 	b.w	401ac8 <_fwalk_reent>
  4013da:	bf00      	nop
  4013dc:	00402ba5 	.word	0x00402ba5

004013e0 <__sinit.part.1>:
  4013e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4013e4:	4b35      	ldr	r3, [pc, #212]	; (4014bc <__sinit.part.1+0xdc>)
  4013e6:	6845      	ldr	r5, [r0, #4]
  4013e8:	63c3      	str	r3, [r0, #60]	; 0x3c
  4013ea:	2400      	movs	r4, #0
  4013ec:	4607      	mov	r7, r0
  4013ee:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
  4013f2:	2304      	movs	r3, #4
  4013f4:	2103      	movs	r1, #3
  4013f6:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
  4013fa:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
  4013fe:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
  401402:	b083      	sub	sp, #12
  401404:	602c      	str	r4, [r5, #0]
  401406:	606c      	str	r4, [r5, #4]
  401408:	60ac      	str	r4, [r5, #8]
  40140a:	666c      	str	r4, [r5, #100]	; 0x64
  40140c:	81ec      	strh	r4, [r5, #14]
  40140e:	612c      	str	r4, [r5, #16]
  401410:	616c      	str	r4, [r5, #20]
  401412:	61ac      	str	r4, [r5, #24]
  401414:	81ab      	strh	r3, [r5, #12]
  401416:	4621      	mov	r1, r4
  401418:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40141c:	2208      	movs	r2, #8
  40141e:	f7ff fd29 	bl	400e74 <memset>
  401422:	68be      	ldr	r6, [r7, #8]
  401424:	f8df b098 	ldr.w	fp, [pc, #152]	; 4014c0 <__sinit.part.1+0xe0>
  401428:	f8df a098 	ldr.w	sl, [pc, #152]	; 4014c4 <__sinit.part.1+0xe4>
  40142c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 4014c8 <__sinit.part.1+0xe8>
  401430:	f8df 8098 	ldr.w	r8, [pc, #152]	; 4014cc <__sinit.part.1+0xec>
  401434:	f8c5 b020 	str.w	fp, [r5, #32]
  401438:	2301      	movs	r3, #1
  40143a:	2209      	movs	r2, #9
  40143c:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  401440:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  401444:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  401448:	61ed      	str	r5, [r5, #28]
  40144a:	4621      	mov	r1, r4
  40144c:	81f3      	strh	r3, [r6, #14]
  40144e:	81b2      	strh	r2, [r6, #12]
  401450:	f106 005c 	add.w	r0, r6, #92	; 0x5c
  401454:	6034      	str	r4, [r6, #0]
  401456:	6074      	str	r4, [r6, #4]
  401458:	60b4      	str	r4, [r6, #8]
  40145a:	6674      	str	r4, [r6, #100]	; 0x64
  40145c:	6134      	str	r4, [r6, #16]
  40145e:	6174      	str	r4, [r6, #20]
  401460:	61b4      	str	r4, [r6, #24]
  401462:	2208      	movs	r2, #8
  401464:	9301      	str	r3, [sp, #4]
  401466:	f7ff fd05 	bl	400e74 <memset>
  40146a:	68fd      	ldr	r5, [r7, #12]
  40146c:	61f6      	str	r6, [r6, #28]
  40146e:	2012      	movs	r0, #18
  401470:	2202      	movs	r2, #2
  401472:	f8c6 b020 	str.w	fp, [r6, #32]
  401476:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
  40147a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
  40147e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
  401482:	4621      	mov	r1, r4
  401484:	81a8      	strh	r0, [r5, #12]
  401486:	81ea      	strh	r2, [r5, #14]
  401488:	602c      	str	r4, [r5, #0]
  40148a:	606c      	str	r4, [r5, #4]
  40148c:	60ac      	str	r4, [r5, #8]
  40148e:	666c      	str	r4, [r5, #100]	; 0x64
  401490:	612c      	str	r4, [r5, #16]
  401492:	616c      	str	r4, [r5, #20]
  401494:	61ac      	str	r4, [r5, #24]
  401496:	f105 005c 	add.w	r0, r5, #92	; 0x5c
  40149a:	2208      	movs	r2, #8
  40149c:	f7ff fcea 	bl	400e74 <memset>
  4014a0:	9b01      	ldr	r3, [sp, #4]
  4014a2:	61ed      	str	r5, [r5, #28]
  4014a4:	f8c5 b020 	str.w	fp, [r5, #32]
  4014a8:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  4014ac:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
  4014b0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
  4014b4:	63bb      	str	r3, [r7, #56]	; 0x38
  4014b6:	b003      	add	sp, #12
  4014b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4014bc:	004013d5 	.word	0x004013d5
  4014c0:	00402961 	.word	0x00402961
  4014c4:	00402985 	.word	0x00402985
  4014c8:	004029c1 	.word	0x004029c1
  4014cc:	004029e1 	.word	0x004029e1

004014d0 <__sinit>:
  4014d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4014d2:	b103      	cbz	r3, 4014d6 <__sinit+0x6>
  4014d4:	4770      	bx	lr
  4014d6:	f7ff bf83 	b.w	4013e0 <__sinit.part.1>
  4014da:	bf00      	nop

004014dc <__sfp_lock_acquire>:
  4014dc:	4770      	bx	lr
  4014de:	bf00      	nop

004014e0 <__sfp_lock_release>:
  4014e0:	4770      	bx	lr
  4014e2:	bf00      	nop

004014e4 <__libc_fini_array>:
  4014e4:	b538      	push	{r3, r4, r5, lr}
  4014e6:	4d07      	ldr	r5, [pc, #28]	; (401504 <__libc_fini_array+0x20>)
  4014e8:	4c07      	ldr	r4, [pc, #28]	; (401508 <__libc_fini_array+0x24>)
  4014ea:	1b2c      	subs	r4, r5, r4
  4014ec:	10a4      	asrs	r4, r4, #2
  4014ee:	d005      	beq.n	4014fc <__libc_fini_array+0x18>
  4014f0:	3c01      	subs	r4, #1
  4014f2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  4014f6:	4798      	blx	r3
  4014f8:	2c00      	cmp	r4, #0
  4014fa:	d1f9      	bne.n	4014f0 <__libc_fini_array+0xc>
  4014fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401500:	f001 bbfa 	b.w	402cf8 <_fini>
  401504:	00402d08 	.word	0x00402d08
  401508:	00402d04 	.word	0x00402d04

0040150c <_malloc_trim_r>:
  40150c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40150e:	4f23      	ldr	r7, [pc, #140]	; (40159c <_malloc_trim_r+0x90>)
  401510:	460c      	mov	r4, r1
  401512:	4606      	mov	r6, r0
  401514:	f000 ff8a 	bl	40242c <__malloc_lock>
  401518:	68bb      	ldr	r3, [r7, #8]
  40151a:	685d      	ldr	r5, [r3, #4]
  40151c:	f025 0503 	bic.w	r5, r5, #3
  401520:	1b29      	subs	r1, r5, r4
  401522:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
  401526:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40152a:	f021 010f 	bic.w	r1, r1, #15
  40152e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  401532:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  401536:	db07      	blt.n	401548 <_malloc_trim_r+0x3c>
  401538:	2100      	movs	r1, #0
  40153a:	4630      	mov	r0, r6
  40153c:	f001 f9fe 	bl	40293c <_sbrk_r>
  401540:	68bb      	ldr	r3, [r7, #8]
  401542:	442b      	add	r3, r5
  401544:	4298      	cmp	r0, r3
  401546:	d004      	beq.n	401552 <_malloc_trim_r+0x46>
  401548:	4630      	mov	r0, r6
  40154a:	f000 ff71 	bl	402430 <__malloc_unlock>
  40154e:	2000      	movs	r0, #0
  401550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401552:	4261      	negs	r1, r4
  401554:	4630      	mov	r0, r6
  401556:	f001 f9f1 	bl	40293c <_sbrk_r>
  40155a:	3001      	adds	r0, #1
  40155c:	d00d      	beq.n	40157a <_malloc_trim_r+0x6e>
  40155e:	4b10      	ldr	r3, [pc, #64]	; (4015a0 <_malloc_trim_r+0x94>)
  401560:	68ba      	ldr	r2, [r7, #8]
  401562:	6819      	ldr	r1, [r3, #0]
  401564:	1b2d      	subs	r5, r5, r4
  401566:	f045 0501 	orr.w	r5, r5, #1
  40156a:	4630      	mov	r0, r6
  40156c:	1b09      	subs	r1, r1, r4
  40156e:	6055      	str	r5, [r2, #4]
  401570:	6019      	str	r1, [r3, #0]
  401572:	f000 ff5d 	bl	402430 <__malloc_unlock>
  401576:	2001      	movs	r0, #1
  401578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40157a:	2100      	movs	r1, #0
  40157c:	4630      	mov	r0, r6
  40157e:	f001 f9dd 	bl	40293c <_sbrk_r>
  401582:	68ba      	ldr	r2, [r7, #8]
  401584:	1a83      	subs	r3, r0, r2
  401586:	2b0f      	cmp	r3, #15
  401588:	ddde      	ble.n	401548 <_malloc_trim_r+0x3c>
  40158a:	4c06      	ldr	r4, [pc, #24]	; (4015a4 <_malloc_trim_r+0x98>)
  40158c:	4904      	ldr	r1, [pc, #16]	; (4015a0 <_malloc_trim_r+0x94>)
  40158e:	6824      	ldr	r4, [r4, #0]
  401590:	f043 0301 	orr.w	r3, r3, #1
  401594:	1b00      	subs	r0, r0, r4
  401596:	6053      	str	r3, [r2, #4]
  401598:	6008      	str	r0, [r1, #0]
  40159a:	e7d5      	b.n	401548 <_malloc_trim_r+0x3c>
  40159c:	20000444 	.word	0x20000444
  4015a0:	200008f4 	.word	0x200008f4
  4015a4:	20000850 	.word	0x20000850

004015a8 <_free_r>:
  4015a8:	2900      	cmp	r1, #0
  4015aa:	d045      	beq.n	401638 <_free_r+0x90>
  4015ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4015b0:	460d      	mov	r5, r1
  4015b2:	4680      	mov	r8, r0
  4015b4:	f000 ff3a 	bl	40242c <__malloc_lock>
  4015b8:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4015bc:	496a      	ldr	r1, [pc, #424]	; (401768 <_free_r+0x1c0>)
  4015be:	f027 0301 	bic.w	r3, r7, #1
  4015c2:	f1a5 0408 	sub.w	r4, r5, #8
  4015c6:	18e2      	adds	r2, r4, r3
  4015c8:	688e      	ldr	r6, [r1, #8]
  4015ca:	6850      	ldr	r0, [r2, #4]
  4015cc:	42b2      	cmp	r2, r6
  4015ce:	f020 0003 	bic.w	r0, r0, #3
  4015d2:	d062      	beq.n	40169a <_free_r+0xf2>
  4015d4:	07fe      	lsls	r6, r7, #31
  4015d6:	6050      	str	r0, [r2, #4]
  4015d8:	d40b      	bmi.n	4015f2 <_free_r+0x4a>
  4015da:	f855 7c08 	ldr.w	r7, [r5, #-8]
  4015de:	1be4      	subs	r4, r4, r7
  4015e0:	f101 0e08 	add.w	lr, r1, #8
  4015e4:	68a5      	ldr	r5, [r4, #8]
  4015e6:	4575      	cmp	r5, lr
  4015e8:	443b      	add	r3, r7
  4015ea:	d06f      	beq.n	4016cc <_free_r+0x124>
  4015ec:	68e7      	ldr	r7, [r4, #12]
  4015ee:	60ef      	str	r7, [r5, #12]
  4015f0:	60bd      	str	r5, [r7, #8]
  4015f2:	1815      	adds	r5, r2, r0
  4015f4:	686d      	ldr	r5, [r5, #4]
  4015f6:	07ed      	lsls	r5, r5, #31
  4015f8:	d542      	bpl.n	401680 <_free_r+0xd8>
  4015fa:	f043 0201 	orr.w	r2, r3, #1
  4015fe:	6062      	str	r2, [r4, #4]
  401600:	50e3      	str	r3, [r4, r3]
  401602:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401606:	d218      	bcs.n	40163a <_free_r+0x92>
  401608:	08db      	lsrs	r3, r3, #3
  40160a:	1c5a      	adds	r2, r3, #1
  40160c:	684d      	ldr	r5, [r1, #4]
  40160e:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
  401612:	60a7      	str	r7, [r4, #8]
  401614:	2001      	movs	r0, #1
  401616:	109b      	asrs	r3, r3, #2
  401618:	fa00 f303 	lsl.w	r3, r0, r3
  40161c:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
  401620:	431d      	orrs	r5, r3
  401622:	3808      	subs	r0, #8
  401624:	60e0      	str	r0, [r4, #12]
  401626:	604d      	str	r5, [r1, #4]
  401628:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
  40162c:	60fc      	str	r4, [r7, #12]
  40162e:	4640      	mov	r0, r8
  401630:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  401634:	f000 befc 	b.w	402430 <__malloc_unlock>
  401638:	4770      	bx	lr
  40163a:	0a5a      	lsrs	r2, r3, #9
  40163c:	2a04      	cmp	r2, #4
  40163e:	d853      	bhi.n	4016e8 <_free_r+0x140>
  401640:	099a      	lsrs	r2, r3, #6
  401642:	f102 0739 	add.w	r7, r2, #57	; 0x39
  401646:	007f      	lsls	r7, r7, #1
  401648:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40164c:	eb01 0087 	add.w	r0, r1, r7, lsl #2
  401650:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
  401654:	4944      	ldr	r1, [pc, #272]	; (401768 <_free_r+0x1c0>)
  401656:	3808      	subs	r0, #8
  401658:	4290      	cmp	r0, r2
  40165a:	d04d      	beq.n	4016f8 <_free_r+0x150>
  40165c:	6851      	ldr	r1, [r2, #4]
  40165e:	f021 0103 	bic.w	r1, r1, #3
  401662:	428b      	cmp	r3, r1
  401664:	d202      	bcs.n	40166c <_free_r+0xc4>
  401666:	6892      	ldr	r2, [r2, #8]
  401668:	4290      	cmp	r0, r2
  40166a:	d1f7      	bne.n	40165c <_free_r+0xb4>
  40166c:	68d0      	ldr	r0, [r2, #12]
  40166e:	60e0      	str	r0, [r4, #12]
  401670:	60a2      	str	r2, [r4, #8]
  401672:	6084      	str	r4, [r0, #8]
  401674:	60d4      	str	r4, [r2, #12]
  401676:	4640      	mov	r0, r8
  401678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40167c:	f000 bed8 	b.w	402430 <__malloc_unlock>
  401680:	6895      	ldr	r5, [r2, #8]
  401682:	4f3a      	ldr	r7, [pc, #232]	; (40176c <_free_r+0x1c4>)
  401684:	42bd      	cmp	r5, r7
  401686:	4403      	add	r3, r0
  401688:	d03f      	beq.n	40170a <_free_r+0x162>
  40168a:	68d0      	ldr	r0, [r2, #12]
  40168c:	60e8      	str	r0, [r5, #12]
  40168e:	f043 0201 	orr.w	r2, r3, #1
  401692:	6085      	str	r5, [r0, #8]
  401694:	6062      	str	r2, [r4, #4]
  401696:	50e3      	str	r3, [r4, r3]
  401698:	e7b3      	b.n	401602 <_free_r+0x5a>
  40169a:	07ff      	lsls	r7, r7, #31
  40169c:	4403      	add	r3, r0
  40169e:	d407      	bmi.n	4016b0 <_free_r+0x108>
  4016a0:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4016a4:	1aa4      	subs	r4, r4, r2
  4016a6:	4413      	add	r3, r2
  4016a8:	68a0      	ldr	r0, [r4, #8]
  4016aa:	68e2      	ldr	r2, [r4, #12]
  4016ac:	60c2      	str	r2, [r0, #12]
  4016ae:	6090      	str	r0, [r2, #8]
  4016b0:	4a2f      	ldr	r2, [pc, #188]	; (401770 <_free_r+0x1c8>)
  4016b2:	6812      	ldr	r2, [r2, #0]
  4016b4:	f043 0001 	orr.w	r0, r3, #1
  4016b8:	4293      	cmp	r3, r2
  4016ba:	6060      	str	r0, [r4, #4]
  4016bc:	608c      	str	r4, [r1, #8]
  4016be:	d3b6      	bcc.n	40162e <_free_r+0x86>
  4016c0:	4b2c      	ldr	r3, [pc, #176]	; (401774 <_free_r+0x1cc>)
  4016c2:	4640      	mov	r0, r8
  4016c4:	6819      	ldr	r1, [r3, #0]
  4016c6:	f7ff ff21 	bl	40150c <_malloc_trim_r>
  4016ca:	e7b0      	b.n	40162e <_free_r+0x86>
  4016cc:	1811      	adds	r1, r2, r0
  4016ce:	6849      	ldr	r1, [r1, #4]
  4016d0:	07c9      	lsls	r1, r1, #31
  4016d2:	d444      	bmi.n	40175e <_free_r+0x1b6>
  4016d4:	6891      	ldr	r1, [r2, #8]
  4016d6:	68d2      	ldr	r2, [r2, #12]
  4016d8:	60ca      	str	r2, [r1, #12]
  4016da:	4403      	add	r3, r0
  4016dc:	f043 0001 	orr.w	r0, r3, #1
  4016e0:	6091      	str	r1, [r2, #8]
  4016e2:	6060      	str	r0, [r4, #4]
  4016e4:	50e3      	str	r3, [r4, r3]
  4016e6:	e7a2      	b.n	40162e <_free_r+0x86>
  4016e8:	2a14      	cmp	r2, #20
  4016ea:	d817      	bhi.n	40171c <_free_r+0x174>
  4016ec:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  4016f0:	007f      	lsls	r7, r7, #1
  4016f2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  4016f6:	e7a9      	b.n	40164c <_free_r+0xa4>
  4016f8:	10aa      	asrs	r2, r5, #2
  4016fa:	684b      	ldr	r3, [r1, #4]
  4016fc:	2501      	movs	r5, #1
  4016fe:	fa05 f202 	lsl.w	r2, r5, r2
  401702:	4313      	orrs	r3, r2
  401704:	604b      	str	r3, [r1, #4]
  401706:	4602      	mov	r2, r0
  401708:	e7b1      	b.n	40166e <_free_r+0xc6>
  40170a:	f043 0201 	orr.w	r2, r3, #1
  40170e:	614c      	str	r4, [r1, #20]
  401710:	610c      	str	r4, [r1, #16]
  401712:	60e5      	str	r5, [r4, #12]
  401714:	60a5      	str	r5, [r4, #8]
  401716:	6062      	str	r2, [r4, #4]
  401718:	50e3      	str	r3, [r4, r3]
  40171a:	e788      	b.n	40162e <_free_r+0x86>
  40171c:	2a54      	cmp	r2, #84	; 0x54
  40171e:	d806      	bhi.n	40172e <_free_r+0x186>
  401720:	0b1a      	lsrs	r2, r3, #12
  401722:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  401726:	007f      	lsls	r7, r7, #1
  401728:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40172c:	e78e      	b.n	40164c <_free_r+0xa4>
  40172e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  401732:	d806      	bhi.n	401742 <_free_r+0x19a>
  401734:	0bda      	lsrs	r2, r3, #15
  401736:	f102 0778 	add.w	r7, r2, #120	; 0x78
  40173a:	007f      	lsls	r7, r7, #1
  40173c:	f102 0577 	add.w	r5, r2, #119	; 0x77
  401740:	e784      	b.n	40164c <_free_r+0xa4>
  401742:	f240 5054 	movw	r0, #1364	; 0x554
  401746:	4282      	cmp	r2, r0
  401748:	d806      	bhi.n	401758 <_free_r+0x1b0>
  40174a:	0c9a      	lsrs	r2, r3, #18
  40174c:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  401750:	007f      	lsls	r7, r7, #1
  401752:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  401756:	e779      	b.n	40164c <_free_r+0xa4>
  401758:	27fe      	movs	r7, #254	; 0xfe
  40175a:	257e      	movs	r5, #126	; 0x7e
  40175c:	e776      	b.n	40164c <_free_r+0xa4>
  40175e:	f043 0201 	orr.w	r2, r3, #1
  401762:	6062      	str	r2, [r4, #4]
  401764:	50e3      	str	r3, [r4, r3]
  401766:	e762      	b.n	40162e <_free_r+0x86>
  401768:	20000444 	.word	0x20000444
  40176c:	2000044c 	.word	0x2000044c
  401770:	2000084c 	.word	0x2000084c
  401774:	200008f0 	.word	0x200008f0

00401778 <__sfvwrite_r>:
  401778:	6893      	ldr	r3, [r2, #8]
  40177a:	2b00      	cmp	r3, #0
  40177c:	d076      	beq.n	40186c <__sfvwrite_r+0xf4>
  40177e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401782:	898b      	ldrh	r3, [r1, #12]
  401784:	b085      	sub	sp, #20
  401786:	460c      	mov	r4, r1
  401788:	0719      	lsls	r1, r3, #28
  40178a:	9001      	str	r0, [sp, #4]
  40178c:	4616      	mov	r6, r2
  40178e:	d529      	bpl.n	4017e4 <__sfvwrite_r+0x6c>
  401790:	6922      	ldr	r2, [r4, #16]
  401792:	b33a      	cbz	r2, 4017e4 <__sfvwrite_r+0x6c>
  401794:	f003 0802 	and.w	r8, r3, #2
  401798:	fa1f f088 	uxth.w	r0, r8
  40179c:	6835      	ldr	r5, [r6, #0]
  40179e:	2800      	cmp	r0, #0
  4017a0:	d02f      	beq.n	401802 <__sfvwrite_r+0x8a>
  4017a2:	f04f 0900 	mov.w	r9, #0
  4017a6:	4fb4      	ldr	r7, [pc, #720]	; (401a78 <__sfvwrite_r+0x300>)
  4017a8:	46c8      	mov	r8, r9
  4017aa:	46b2      	mov	sl, r6
  4017ac:	45b8      	cmp	r8, r7
  4017ae:	4643      	mov	r3, r8
  4017b0:	464a      	mov	r2, r9
  4017b2:	bf28      	it	cs
  4017b4:	463b      	movcs	r3, r7
  4017b6:	9801      	ldr	r0, [sp, #4]
  4017b8:	f1b8 0f00 	cmp.w	r8, #0
  4017bc:	d050      	beq.n	401860 <__sfvwrite_r+0xe8>
  4017be:	69e1      	ldr	r1, [r4, #28]
  4017c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4017c2:	47b0      	blx	r6
  4017c4:	2800      	cmp	r0, #0
  4017c6:	dd71      	ble.n	4018ac <__sfvwrite_r+0x134>
  4017c8:	f8da 3008 	ldr.w	r3, [sl, #8]
  4017cc:	1a1b      	subs	r3, r3, r0
  4017ce:	4481      	add	r9, r0
  4017d0:	ebc0 0808 	rsb	r8, r0, r8
  4017d4:	f8ca 3008 	str.w	r3, [sl, #8]
  4017d8:	2b00      	cmp	r3, #0
  4017da:	d1e7      	bne.n	4017ac <__sfvwrite_r+0x34>
  4017dc:	2000      	movs	r0, #0
  4017de:	b005      	add	sp, #20
  4017e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4017e4:	4621      	mov	r1, r4
  4017e6:	9801      	ldr	r0, [sp, #4]
  4017e8:	f001 f914 	bl	402a14 <__swsetup_r>
  4017ec:	2800      	cmp	r0, #0
  4017ee:	f040 813a 	bne.w	401a66 <__sfvwrite_r+0x2ee>
  4017f2:	89a3      	ldrh	r3, [r4, #12]
  4017f4:	6835      	ldr	r5, [r6, #0]
  4017f6:	f003 0802 	and.w	r8, r3, #2
  4017fa:	fa1f f088 	uxth.w	r0, r8
  4017fe:	2800      	cmp	r0, #0
  401800:	d1cf      	bne.n	4017a2 <__sfvwrite_r+0x2a>
  401802:	f013 0901 	ands.w	r9, r3, #1
  401806:	d15b      	bne.n	4018c0 <__sfvwrite_r+0x148>
  401808:	464f      	mov	r7, r9
  40180a:	9602      	str	r6, [sp, #8]
  40180c:	b31f      	cbz	r7, 401856 <__sfvwrite_r+0xde>
  40180e:	059a      	lsls	r2, r3, #22
  401810:	f8d4 8008 	ldr.w	r8, [r4, #8]
  401814:	d52c      	bpl.n	401870 <__sfvwrite_r+0xf8>
  401816:	4547      	cmp	r7, r8
  401818:	46c2      	mov	sl, r8
  40181a:	f0c0 80a4 	bcc.w	401966 <__sfvwrite_r+0x1ee>
  40181e:	f413 6f90 	tst.w	r3, #1152	; 0x480
  401822:	f040 80b1 	bne.w	401988 <__sfvwrite_r+0x210>
  401826:	6820      	ldr	r0, [r4, #0]
  401828:	4652      	mov	r2, sl
  40182a:	4649      	mov	r1, r9
  40182c:	f000 fd9a 	bl	402364 <memmove>
  401830:	68a0      	ldr	r0, [r4, #8]
  401832:	6823      	ldr	r3, [r4, #0]
  401834:	ebc8 0000 	rsb	r0, r8, r0
  401838:	4453      	add	r3, sl
  40183a:	60a0      	str	r0, [r4, #8]
  40183c:	6023      	str	r3, [r4, #0]
  40183e:	4638      	mov	r0, r7
  401840:	9a02      	ldr	r2, [sp, #8]
  401842:	6893      	ldr	r3, [r2, #8]
  401844:	1a1b      	subs	r3, r3, r0
  401846:	4481      	add	r9, r0
  401848:	1a3f      	subs	r7, r7, r0
  40184a:	6093      	str	r3, [r2, #8]
  40184c:	2b00      	cmp	r3, #0
  40184e:	d0c5      	beq.n	4017dc <__sfvwrite_r+0x64>
  401850:	89a3      	ldrh	r3, [r4, #12]
  401852:	2f00      	cmp	r7, #0
  401854:	d1db      	bne.n	40180e <__sfvwrite_r+0x96>
  401856:	f8d5 9000 	ldr.w	r9, [r5]
  40185a:	686f      	ldr	r7, [r5, #4]
  40185c:	3508      	adds	r5, #8
  40185e:	e7d5      	b.n	40180c <__sfvwrite_r+0x94>
  401860:	f8d5 9000 	ldr.w	r9, [r5]
  401864:	f8d5 8004 	ldr.w	r8, [r5, #4]
  401868:	3508      	adds	r5, #8
  40186a:	e79f      	b.n	4017ac <__sfvwrite_r+0x34>
  40186c:	2000      	movs	r0, #0
  40186e:	4770      	bx	lr
  401870:	6820      	ldr	r0, [r4, #0]
  401872:	6923      	ldr	r3, [r4, #16]
  401874:	4298      	cmp	r0, r3
  401876:	d803      	bhi.n	401880 <__sfvwrite_r+0x108>
  401878:	6961      	ldr	r1, [r4, #20]
  40187a:	428f      	cmp	r7, r1
  40187c:	f080 80b7 	bcs.w	4019ee <__sfvwrite_r+0x276>
  401880:	45b8      	cmp	r8, r7
  401882:	bf28      	it	cs
  401884:	46b8      	movcs	r8, r7
  401886:	4642      	mov	r2, r8
  401888:	4649      	mov	r1, r9
  40188a:	f000 fd6b 	bl	402364 <memmove>
  40188e:	68a3      	ldr	r3, [r4, #8]
  401890:	6822      	ldr	r2, [r4, #0]
  401892:	ebc8 0303 	rsb	r3, r8, r3
  401896:	4442      	add	r2, r8
  401898:	60a3      	str	r3, [r4, #8]
  40189a:	6022      	str	r2, [r4, #0]
  40189c:	2b00      	cmp	r3, #0
  40189e:	d149      	bne.n	401934 <__sfvwrite_r+0x1bc>
  4018a0:	4621      	mov	r1, r4
  4018a2:	9801      	ldr	r0, [sp, #4]
  4018a4:	f7ff fd6e 	bl	401384 <_fflush_r>
  4018a8:	2800      	cmp	r0, #0
  4018aa:	d043      	beq.n	401934 <__sfvwrite_r+0x1bc>
  4018ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4018b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4018b4:	f04f 30ff 	mov.w	r0, #4294967295
  4018b8:	81a3      	strh	r3, [r4, #12]
  4018ba:	b005      	add	sp, #20
  4018bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4018c0:	4680      	mov	r8, r0
  4018c2:	9002      	str	r0, [sp, #8]
  4018c4:	4682      	mov	sl, r0
  4018c6:	4681      	mov	r9, r0
  4018c8:	f1b9 0f00 	cmp.w	r9, #0
  4018cc:	d02a      	beq.n	401924 <__sfvwrite_r+0x1ac>
  4018ce:	9b02      	ldr	r3, [sp, #8]
  4018d0:	2b00      	cmp	r3, #0
  4018d2:	d04c      	beq.n	40196e <__sfvwrite_r+0x1f6>
  4018d4:	6820      	ldr	r0, [r4, #0]
  4018d6:	6923      	ldr	r3, [r4, #16]
  4018d8:	6962      	ldr	r2, [r4, #20]
  4018da:	45c8      	cmp	r8, r9
  4018dc:	46c3      	mov	fp, r8
  4018de:	bf28      	it	cs
  4018e0:	46cb      	movcs	fp, r9
  4018e2:	4298      	cmp	r0, r3
  4018e4:	465f      	mov	r7, fp
  4018e6:	d904      	bls.n	4018f2 <__sfvwrite_r+0x17a>
  4018e8:	68a3      	ldr	r3, [r4, #8]
  4018ea:	4413      	add	r3, r2
  4018ec:	459b      	cmp	fp, r3
  4018ee:	f300 8090 	bgt.w	401a12 <__sfvwrite_r+0x29a>
  4018f2:	4593      	cmp	fp, r2
  4018f4:	db20      	blt.n	401938 <__sfvwrite_r+0x1c0>
  4018f6:	4613      	mov	r3, r2
  4018f8:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4018fa:	69e1      	ldr	r1, [r4, #28]
  4018fc:	9801      	ldr	r0, [sp, #4]
  4018fe:	4652      	mov	r2, sl
  401900:	47b8      	blx	r7
  401902:	1e07      	subs	r7, r0, #0
  401904:	ddd2      	ble.n	4018ac <__sfvwrite_r+0x134>
  401906:	ebb8 0807 	subs.w	r8, r8, r7
  40190a:	d023      	beq.n	401954 <__sfvwrite_r+0x1dc>
  40190c:	68b3      	ldr	r3, [r6, #8]
  40190e:	1bdb      	subs	r3, r3, r7
  401910:	44ba      	add	sl, r7
  401912:	ebc7 0909 	rsb	r9, r7, r9
  401916:	60b3      	str	r3, [r6, #8]
  401918:	2b00      	cmp	r3, #0
  40191a:	f43f af5f 	beq.w	4017dc <__sfvwrite_r+0x64>
  40191e:	f1b9 0f00 	cmp.w	r9, #0
  401922:	d1d4      	bne.n	4018ce <__sfvwrite_r+0x156>
  401924:	2300      	movs	r3, #0
  401926:	f8d5 a000 	ldr.w	sl, [r5]
  40192a:	f8d5 9004 	ldr.w	r9, [r5, #4]
  40192e:	9302      	str	r3, [sp, #8]
  401930:	3508      	adds	r5, #8
  401932:	e7c9      	b.n	4018c8 <__sfvwrite_r+0x150>
  401934:	4640      	mov	r0, r8
  401936:	e783      	b.n	401840 <__sfvwrite_r+0xc8>
  401938:	465a      	mov	r2, fp
  40193a:	4651      	mov	r1, sl
  40193c:	f000 fd12 	bl	402364 <memmove>
  401940:	68a2      	ldr	r2, [r4, #8]
  401942:	6823      	ldr	r3, [r4, #0]
  401944:	ebcb 0202 	rsb	r2, fp, r2
  401948:	445b      	add	r3, fp
  40194a:	ebb8 0807 	subs.w	r8, r8, r7
  40194e:	60a2      	str	r2, [r4, #8]
  401950:	6023      	str	r3, [r4, #0]
  401952:	d1db      	bne.n	40190c <__sfvwrite_r+0x194>
  401954:	4621      	mov	r1, r4
  401956:	9801      	ldr	r0, [sp, #4]
  401958:	f7ff fd14 	bl	401384 <_fflush_r>
  40195c:	2800      	cmp	r0, #0
  40195e:	d1a5      	bne.n	4018ac <__sfvwrite_r+0x134>
  401960:	f8cd 8008 	str.w	r8, [sp, #8]
  401964:	e7d2      	b.n	40190c <__sfvwrite_r+0x194>
  401966:	6820      	ldr	r0, [r4, #0]
  401968:	46b8      	mov	r8, r7
  40196a:	46ba      	mov	sl, r7
  40196c:	e75c      	b.n	401828 <__sfvwrite_r+0xb0>
  40196e:	464a      	mov	r2, r9
  401970:	210a      	movs	r1, #10
  401972:	4650      	mov	r0, sl
  401974:	f000 fc0c 	bl	402190 <memchr>
  401978:	2800      	cmp	r0, #0
  40197a:	d06f      	beq.n	401a5c <__sfvwrite_r+0x2e4>
  40197c:	3001      	adds	r0, #1
  40197e:	2301      	movs	r3, #1
  401980:	ebca 0800 	rsb	r8, sl, r0
  401984:	9302      	str	r3, [sp, #8]
  401986:	e7a5      	b.n	4018d4 <__sfvwrite_r+0x15c>
  401988:	6962      	ldr	r2, [r4, #20]
  40198a:	6820      	ldr	r0, [r4, #0]
  40198c:	6921      	ldr	r1, [r4, #16]
  40198e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  401992:	ebc1 0a00 	rsb	sl, r1, r0
  401996:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40199a:	f10a 0001 	add.w	r0, sl, #1
  40199e:	ea4f 0868 	mov.w	r8, r8, asr #1
  4019a2:	4438      	add	r0, r7
  4019a4:	4540      	cmp	r0, r8
  4019a6:	4642      	mov	r2, r8
  4019a8:	bf84      	itt	hi
  4019aa:	4680      	movhi	r8, r0
  4019ac:	4642      	movhi	r2, r8
  4019ae:	055b      	lsls	r3, r3, #21
  4019b0:	d542      	bpl.n	401a38 <__sfvwrite_r+0x2c0>
  4019b2:	4611      	mov	r1, r2
  4019b4:	9801      	ldr	r0, [sp, #4]
  4019b6:	f000 f92d 	bl	401c14 <_malloc_r>
  4019ba:	4683      	mov	fp, r0
  4019bc:	2800      	cmp	r0, #0
  4019be:	d055      	beq.n	401a6c <__sfvwrite_r+0x2f4>
  4019c0:	4652      	mov	r2, sl
  4019c2:	6921      	ldr	r1, [r4, #16]
  4019c4:	f000 fc34 	bl	402230 <memcpy>
  4019c8:	89a3      	ldrh	r3, [r4, #12]
  4019ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4019ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4019d2:	81a3      	strh	r3, [r4, #12]
  4019d4:	ebca 0308 	rsb	r3, sl, r8
  4019d8:	eb0b 000a 	add.w	r0, fp, sl
  4019dc:	f8c4 8014 	str.w	r8, [r4, #20]
  4019e0:	f8c4 b010 	str.w	fp, [r4, #16]
  4019e4:	6020      	str	r0, [r4, #0]
  4019e6:	60a3      	str	r3, [r4, #8]
  4019e8:	46b8      	mov	r8, r7
  4019ea:	46ba      	mov	sl, r7
  4019ec:	e71c      	b.n	401828 <__sfvwrite_r+0xb0>
  4019ee:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  4019f2:	42bb      	cmp	r3, r7
  4019f4:	bf28      	it	cs
  4019f6:	463b      	movcs	r3, r7
  4019f8:	464a      	mov	r2, r9
  4019fa:	fb93 f3f1 	sdiv	r3, r3, r1
  4019fe:	9801      	ldr	r0, [sp, #4]
  401a00:	6a66      	ldr	r6, [r4, #36]	; 0x24
  401a02:	fb01 f303 	mul.w	r3, r1, r3
  401a06:	69e1      	ldr	r1, [r4, #28]
  401a08:	47b0      	blx	r6
  401a0a:	2800      	cmp	r0, #0
  401a0c:	f73f af18 	bgt.w	401840 <__sfvwrite_r+0xc8>
  401a10:	e74c      	b.n	4018ac <__sfvwrite_r+0x134>
  401a12:	461a      	mov	r2, r3
  401a14:	4651      	mov	r1, sl
  401a16:	9303      	str	r3, [sp, #12]
  401a18:	f000 fca4 	bl	402364 <memmove>
  401a1c:	6822      	ldr	r2, [r4, #0]
  401a1e:	9b03      	ldr	r3, [sp, #12]
  401a20:	9801      	ldr	r0, [sp, #4]
  401a22:	441a      	add	r2, r3
  401a24:	6022      	str	r2, [r4, #0]
  401a26:	4621      	mov	r1, r4
  401a28:	f7ff fcac 	bl	401384 <_fflush_r>
  401a2c:	9b03      	ldr	r3, [sp, #12]
  401a2e:	2800      	cmp	r0, #0
  401a30:	f47f af3c 	bne.w	4018ac <__sfvwrite_r+0x134>
  401a34:	461f      	mov	r7, r3
  401a36:	e766      	b.n	401906 <__sfvwrite_r+0x18e>
  401a38:	9801      	ldr	r0, [sp, #4]
  401a3a:	f000 fcfb 	bl	402434 <_realloc_r>
  401a3e:	4683      	mov	fp, r0
  401a40:	2800      	cmp	r0, #0
  401a42:	d1c7      	bne.n	4019d4 <__sfvwrite_r+0x25c>
  401a44:	9d01      	ldr	r5, [sp, #4]
  401a46:	6921      	ldr	r1, [r4, #16]
  401a48:	4628      	mov	r0, r5
  401a4a:	f7ff fdad 	bl	4015a8 <_free_r>
  401a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401a52:	220c      	movs	r2, #12
  401a54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  401a58:	602a      	str	r2, [r5, #0]
  401a5a:	e729      	b.n	4018b0 <__sfvwrite_r+0x138>
  401a5c:	2301      	movs	r3, #1
  401a5e:	f109 0801 	add.w	r8, r9, #1
  401a62:	9302      	str	r3, [sp, #8]
  401a64:	e736      	b.n	4018d4 <__sfvwrite_r+0x15c>
  401a66:	f04f 30ff 	mov.w	r0, #4294967295
  401a6a:	e6b8      	b.n	4017de <__sfvwrite_r+0x66>
  401a6c:	9a01      	ldr	r2, [sp, #4]
  401a6e:	230c      	movs	r3, #12
  401a70:	6013      	str	r3, [r2, #0]
  401a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401a76:	e71b      	b.n	4018b0 <__sfvwrite_r+0x138>
  401a78:	7ffffc00 	.word	0x7ffffc00

00401a7c <_fwalk>:
  401a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401a80:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  401a84:	d01b      	beq.n	401abe <_fwalk+0x42>
  401a86:	4688      	mov	r8, r1
  401a88:	2600      	movs	r6, #0
  401a8a:	687d      	ldr	r5, [r7, #4]
  401a8c:	68bc      	ldr	r4, [r7, #8]
  401a8e:	3d01      	subs	r5, #1
  401a90:	d40f      	bmi.n	401ab2 <_fwalk+0x36>
  401a92:	89a3      	ldrh	r3, [r4, #12]
  401a94:	2b01      	cmp	r3, #1
  401a96:	f105 35ff 	add.w	r5, r5, #4294967295
  401a9a:	d906      	bls.n	401aaa <_fwalk+0x2e>
  401a9c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  401aa0:	3301      	adds	r3, #1
  401aa2:	4620      	mov	r0, r4
  401aa4:	d001      	beq.n	401aaa <_fwalk+0x2e>
  401aa6:	47c0      	blx	r8
  401aa8:	4306      	orrs	r6, r0
  401aaa:	1c6b      	adds	r3, r5, #1
  401aac:	f104 0468 	add.w	r4, r4, #104	; 0x68
  401ab0:	d1ef      	bne.n	401a92 <_fwalk+0x16>
  401ab2:	683f      	ldr	r7, [r7, #0]
  401ab4:	2f00      	cmp	r7, #0
  401ab6:	d1e8      	bne.n	401a8a <_fwalk+0xe>
  401ab8:	4630      	mov	r0, r6
  401aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401abe:	463e      	mov	r6, r7
  401ac0:	4630      	mov	r0, r6
  401ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401ac6:	bf00      	nop

00401ac8 <_fwalk_reent>:
  401ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401acc:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  401ad0:	d01f      	beq.n	401b12 <_fwalk_reent+0x4a>
  401ad2:	4688      	mov	r8, r1
  401ad4:	4606      	mov	r6, r0
  401ad6:	f04f 0900 	mov.w	r9, #0
  401ada:	687d      	ldr	r5, [r7, #4]
  401adc:	68bc      	ldr	r4, [r7, #8]
  401ade:	3d01      	subs	r5, #1
  401ae0:	d411      	bmi.n	401b06 <_fwalk_reent+0x3e>
  401ae2:	89a3      	ldrh	r3, [r4, #12]
  401ae4:	2b01      	cmp	r3, #1
  401ae6:	f105 35ff 	add.w	r5, r5, #4294967295
  401aea:	d908      	bls.n	401afe <_fwalk_reent+0x36>
  401aec:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  401af0:	3301      	adds	r3, #1
  401af2:	4621      	mov	r1, r4
  401af4:	4630      	mov	r0, r6
  401af6:	d002      	beq.n	401afe <_fwalk_reent+0x36>
  401af8:	47c0      	blx	r8
  401afa:	ea49 0900 	orr.w	r9, r9, r0
  401afe:	1c6b      	adds	r3, r5, #1
  401b00:	f104 0468 	add.w	r4, r4, #104	; 0x68
  401b04:	d1ed      	bne.n	401ae2 <_fwalk_reent+0x1a>
  401b06:	683f      	ldr	r7, [r7, #0]
  401b08:	2f00      	cmp	r7, #0
  401b0a:	d1e6      	bne.n	401ada <_fwalk_reent+0x12>
  401b0c:	4648      	mov	r0, r9
  401b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401b12:	46b9      	mov	r9, r7
  401b14:	4648      	mov	r0, r9
  401b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401b1a:	bf00      	nop

00401b1c <__swhatbuf_r>:
  401b1c:	b570      	push	{r4, r5, r6, lr}
  401b1e:	460d      	mov	r5, r1
  401b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  401b24:	2900      	cmp	r1, #0
  401b26:	b090      	sub	sp, #64	; 0x40
  401b28:	4614      	mov	r4, r2
  401b2a:	461e      	mov	r6, r3
  401b2c:	db14      	blt.n	401b58 <__swhatbuf_r+0x3c>
  401b2e:	aa01      	add	r2, sp, #4
  401b30:	f001 f87a 	bl	402c28 <_fstat_r>
  401b34:	2800      	cmp	r0, #0
  401b36:	db0f      	blt.n	401b58 <__swhatbuf_r+0x3c>
  401b38:	9a02      	ldr	r2, [sp, #8]
  401b3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  401b3e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  401b42:	fab2 f282 	clz	r2, r2
  401b46:	0952      	lsrs	r2, r2, #5
  401b48:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401b4c:	f44f 6000 	mov.w	r0, #2048	; 0x800
  401b50:	6032      	str	r2, [r6, #0]
  401b52:	6023      	str	r3, [r4, #0]
  401b54:	b010      	add	sp, #64	; 0x40
  401b56:	bd70      	pop	{r4, r5, r6, pc}
  401b58:	89a8      	ldrh	r0, [r5, #12]
  401b5a:	f000 0080 	and.w	r0, r0, #128	; 0x80
  401b5e:	b282      	uxth	r2, r0
  401b60:	2000      	movs	r0, #0
  401b62:	6030      	str	r0, [r6, #0]
  401b64:	b11a      	cbz	r2, 401b6e <__swhatbuf_r+0x52>
  401b66:	2340      	movs	r3, #64	; 0x40
  401b68:	6023      	str	r3, [r4, #0]
  401b6a:	b010      	add	sp, #64	; 0x40
  401b6c:	bd70      	pop	{r4, r5, r6, pc}
  401b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  401b72:	4610      	mov	r0, r2
  401b74:	6023      	str	r3, [r4, #0]
  401b76:	b010      	add	sp, #64	; 0x40
  401b78:	bd70      	pop	{r4, r5, r6, pc}
  401b7a:	bf00      	nop

00401b7c <__smakebuf_r>:
  401b7c:	898a      	ldrh	r2, [r1, #12]
  401b7e:	0792      	lsls	r2, r2, #30
  401b80:	460b      	mov	r3, r1
  401b82:	d506      	bpl.n	401b92 <__smakebuf_r+0x16>
  401b84:	f101 0243 	add.w	r2, r1, #67	; 0x43
  401b88:	2101      	movs	r1, #1
  401b8a:	601a      	str	r2, [r3, #0]
  401b8c:	611a      	str	r2, [r3, #16]
  401b8e:	6159      	str	r1, [r3, #20]
  401b90:	4770      	bx	lr
  401b92:	b5f0      	push	{r4, r5, r6, r7, lr}
  401b94:	b083      	sub	sp, #12
  401b96:	ab01      	add	r3, sp, #4
  401b98:	466a      	mov	r2, sp
  401b9a:	460c      	mov	r4, r1
  401b9c:	4605      	mov	r5, r0
  401b9e:	f7ff ffbd 	bl	401b1c <__swhatbuf_r>
  401ba2:	9900      	ldr	r1, [sp, #0]
  401ba4:	4606      	mov	r6, r0
  401ba6:	4628      	mov	r0, r5
  401ba8:	f000 f834 	bl	401c14 <_malloc_r>
  401bac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401bb0:	b1d0      	cbz	r0, 401be8 <__smakebuf_r+0x6c>
  401bb2:	9a01      	ldr	r2, [sp, #4]
  401bb4:	4f12      	ldr	r7, [pc, #72]	; (401c00 <__smakebuf_r+0x84>)
  401bb6:	9900      	ldr	r1, [sp, #0]
  401bb8:	63ef      	str	r7, [r5, #60]	; 0x3c
  401bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  401bbe:	81a3      	strh	r3, [r4, #12]
  401bc0:	6020      	str	r0, [r4, #0]
  401bc2:	6120      	str	r0, [r4, #16]
  401bc4:	6161      	str	r1, [r4, #20]
  401bc6:	b91a      	cbnz	r2, 401bd0 <__smakebuf_r+0x54>
  401bc8:	4333      	orrs	r3, r6
  401bca:	81a3      	strh	r3, [r4, #12]
  401bcc:	b003      	add	sp, #12
  401bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401bd0:	4628      	mov	r0, r5
  401bd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  401bd6:	f001 f83b 	bl	402c50 <_isatty_r>
  401bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  401bde:	2800      	cmp	r0, #0
  401be0:	d0f2      	beq.n	401bc8 <__smakebuf_r+0x4c>
  401be2:	f043 0301 	orr.w	r3, r3, #1
  401be6:	e7ef      	b.n	401bc8 <__smakebuf_r+0x4c>
  401be8:	059a      	lsls	r2, r3, #22
  401bea:	d4ef      	bmi.n	401bcc <__smakebuf_r+0x50>
  401bec:	f104 0243 	add.w	r2, r4, #67	; 0x43
  401bf0:	f043 0302 	orr.w	r3, r3, #2
  401bf4:	2101      	movs	r1, #1
  401bf6:	81a3      	strh	r3, [r4, #12]
  401bf8:	6022      	str	r2, [r4, #0]
  401bfa:	6122      	str	r2, [r4, #16]
  401bfc:	6161      	str	r1, [r4, #20]
  401bfe:	e7e5      	b.n	401bcc <__smakebuf_r+0x50>
  401c00:	004013d5 	.word	0x004013d5

00401c04 <malloc>:
  401c04:	4b02      	ldr	r3, [pc, #8]	; (401c10 <malloc+0xc>)
  401c06:	4601      	mov	r1, r0
  401c08:	6818      	ldr	r0, [r3, #0]
  401c0a:	f000 b803 	b.w	401c14 <_malloc_r>
  401c0e:	bf00      	nop
  401c10:	20000440 	.word	0x20000440

00401c14 <_malloc_r>:
  401c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401c18:	f101 050b 	add.w	r5, r1, #11
  401c1c:	2d16      	cmp	r5, #22
  401c1e:	b083      	sub	sp, #12
  401c20:	4606      	mov	r6, r0
  401c22:	f240 809f 	bls.w	401d64 <_malloc_r+0x150>
  401c26:	f035 0507 	bics.w	r5, r5, #7
  401c2a:	f100 80bf 	bmi.w	401dac <_malloc_r+0x198>
  401c2e:	42a9      	cmp	r1, r5
  401c30:	f200 80bc 	bhi.w	401dac <_malloc_r+0x198>
  401c34:	f000 fbfa 	bl	40242c <__malloc_lock>
  401c38:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
  401c3c:	f0c0 829c 	bcc.w	402178 <_malloc_r+0x564>
  401c40:	0a6b      	lsrs	r3, r5, #9
  401c42:	f000 80ba 	beq.w	401dba <_malloc_r+0x1a6>
  401c46:	2b04      	cmp	r3, #4
  401c48:	f200 8183 	bhi.w	401f52 <_malloc_r+0x33e>
  401c4c:	09a8      	lsrs	r0, r5, #6
  401c4e:	f100 0e39 	add.w	lr, r0, #57	; 0x39
  401c52:	ea4f 034e 	mov.w	r3, lr, lsl #1
  401c56:	3038      	adds	r0, #56	; 0x38
  401c58:	4fc4      	ldr	r7, [pc, #784]	; (401f6c <_malloc_r+0x358>)
  401c5a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  401c5e:	f1a3 0108 	sub.w	r1, r3, #8
  401c62:	685c      	ldr	r4, [r3, #4]
  401c64:	42a1      	cmp	r1, r4
  401c66:	d107      	bne.n	401c78 <_malloc_r+0x64>
  401c68:	e0ac      	b.n	401dc4 <_malloc_r+0x1b0>
  401c6a:	2a00      	cmp	r2, #0
  401c6c:	f280 80ac 	bge.w	401dc8 <_malloc_r+0x1b4>
  401c70:	68e4      	ldr	r4, [r4, #12]
  401c72:	42a1      	cmp	r1, r4
  401c74:	f000 80a6 	beq.w	401dc4 <_malloc_r+0x1b0>
  401c78:	6863      	ldr	r3, [r4, #4]
  401c7a:	f023 0303 	bic.w	r3, r3, #3
  401c7e:	1b5a      	subs	r2, r3, r5
  401c80:	2a0f      	cmp	r2, #15
  401c82:	ddf2      	ble.n	401c6a <_malloc_r+0x56>
  401c84:	49b9      	ldr	r1, [pc, #740]	; (401f6c <_malloc_r+0x358>)
  401c86:	693c      	ldr	r4, [r7, #16]
  401c88:	f101 0e08 	add.w	lr, r1, #8
  401c8c:	4574      	cmp	r4, lr
  401c8e:	f000 81b3 	beq.w	401ff8 <_malloc_r+0x3e4>
  401c92:	6863      	ldr	r3, [r4, #4]
  401c94:	f023 0303 	bic.w	r3, r3, #3
  401c98:	1b5a      	subs	r2, r3, r5
  401c9a:	2a0f      	cmp	r2, #15
  401c9c:	f300 8199 	bgt.w	401fd2 <_malloc_r+0x3be>
  401ca0:	2a00      	cmp	r2, #0
  401ca2:	f8c1 e014 	str.w	lr, [r1, #20]
  401ca6:	f8c1 e010 	str.w	lr, [r1, #16]
  401caa:	f280 809e 	bge.w	401dea <_malloc_r+0x1d6>
  401cae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  401cb2:	f080 8167 	bcs.w	401f84 <_malloc_r+0x370>
  401cb6:	08db      	lsrs	r3, r3, #3
  401cb8:	f103 0c01 	add.w	ip, r3, #1
  401cbc:	2201      	movs	r2, #1
  401cbe:	109b      	asrs	r3, r3, #2
  401cc0:	fa02 f303 	lsl.w	r3, r2, r3
  401cc4:	684a      	ldr	r2, [r1, #4]
  401cc6:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
  401cca:	f8c4 8008 	str.w	r8, [r4, #8]
  401cce:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
  401cd2:	431a      	orrs	r2, r3
  401cd4:	f1a9 0308 	sub.w	r3, r9, #8
  401cd8:	60e3      	str	r3, [r4, #12]
  401cda:	604a      	str	r2, [r1, #4]
  401cdc:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
  401ce0:	f8c8 400c 	str.w	r4, [r8, #12]
  401ce4:	1083      	asrs	r3, r0, #2
  401ce6:	2401      	movs	r4, #1
  401ce8:	409c      	lsls	r4, r3
  401cea:	4294      	cmp	r4, r2
  401cec:	f200 808a 	bhi.w	401e04 <_malloc_r+0x1f0>
  401cf0:	4214      	tst	r4, r2
  401cf2:	d106      	bne.n	401d02 <_malloc_r+0xee>
  401cf4:	f020 0003 	bic.w	r0, r0, #3
  401cf8:	0064      	lsls	r4, r4, #1
  401cfa:	4214      	tst	r4, r2
  401cfc:	f100 0004 	add.w	r0, r0, #4
  401d00:	d0fa      	beq.n	401cf8 <_malloc_r+0xe4>
  401d02:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  401d06:	46cc      	mov	ip, r9
  401d08:	4680      	mov	r8, r0
  401d0a:	f8dc 100c 	ldr.w	r1, [ip, #12]
  401d0e:	458c      	cmp	ip, r1
  401d10:	d107      	bne.n	401d22 <_malloc_r+0x10e>
  401d12:	e173      	b.n	401ffc <_malloc_r+0x3e8>
  401d14:	2a00      	cmp	r2, #0
  401d16:	f280 8181 	bge.w	40201c <_malloc_r+0x408>
  401d1a:	68c9      	ldr	r1, [r1, #12]
  401d1c:	458c      	cmp	ip, r1
  401d1e:	f000 816d 	beq.w	401ffc <_malloc_r+0x3e8>
  401d22:	684b      	ldr	r3, [r1, #4]
  401d24:	f023 0303 	bic.w	r3, r3, #3
  401d28:	1b5a      	subs	r2, r3, r5
  401d2a:	2a0f      	cmp	r2, #15
  401d2c:	ddf2      	ble.n	401d14 <_malloc_r+0x100>
  401d2e:	460c      	mov	r4, r1
  401d30:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  401d34:	f854 8f08 	ldr.w	r8, [r4, #8]!
  401d38:	194b      	adds	r3, r1, r5
  401d3a:	f045 0501 	orr.w	r5, r5, #1
  401d3e:	604d      	str	r5, [r1, #4]
  401d40:	f042 0101 	orr.w	r1, r2, #1
  401d44:	f8c8 c00c 	str.w	ip, [r8, #12]
  401d48:	4630      	mov	r0, r6
  401d4a:	f8cc 8008 	str.w	r8, [ip, #8]
  401d4e:	617b      	str	r3, [r7, #20]
  401d50:	613b      	str	r3, [r7, #16]
  401d52:	f8c3 e00c 	str.w	lr, [r3, #12]
  401d56:	f8c3 e008 	str.w	lr, [r3, #8]
  401d5a:	6059      	str	r1, [r3, #4]
  401d5c:	509a      	str	r2, [r3, r2]
  401d5e:	f000 fb67 	bl	402430 <__malloc_unlock>
  401d62:	e01f      	b.n	401da4 <_malloc_r+0x190>
  401d64:	2910      	cmp	r1, #16
  401d66:	d821      	bhi.n	401dac <_malloc_r+0x198>
  401d68:	f000 fb60 	bl	40242c <__malloc_lock>
  401d6c:	2510      	movs	r5, #16
  401d6e:	2306      	movs	r3, #6
  401d70:	2002      	movs	r0, #2
  401d72:	4f7e      	ldr	r7, [pc, #504]	; (401f6c <_malloc_r+0x358>)
  401d74:	eb07 0383 	add.w	r3, r7, r3, lsl #2
  401d78:	f1a3 0208 	sub.w	r2, r3, #8
  401d7c:	685c      	ldr	r4, [r3, #4]
  401d7e:	4294      	cmp	r4, r2
  401d80:	f000 8145 	beq.w	40200e <_malloc_r+0x3fa>
  401d84:	6863      	ldr	r3, [r4, #4]
  401d86:	68e1      	ldr	r1, [r4, #12]
  401d88:	68a5      	ldr	r5, [r4, #8]
  401d8a:	f023 0303 	bic.w	r3, r3, #3
  401d8e:	4423      	add	r3, r4
  401d90:	4630      	mov	r0, r6
  401d92:	685a      	ldr	r2, [r3, #4]
  401d94:	60e9      	str	r1, [r5, #12]
  401d96:	f042 0201 	orr.w	r2, r2, #1
  401d9a:	608d      	str	r5, [r1, #8]
  401d9c:	605a      	str	r2, [r3, #4]
  401d9e:	f000 fb47 	bl	402430 <__malloc_unlock>
  401da2:	3408      	adds	r4, #8
  401da4:	4620      	mov	r0, r4
  401da6:	b003      	add	sp, #12
  401da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401dac:	2400      	movs	r4, #0
  401dae:	230c      	movs	r3, #12
  401db0:	4620      	mov	r0, r4
  401db2:	6033      	str	r3, [r6, #0]
  401db4:	b003      	add	sp, #12
  401db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401dba:	2380      	movs	r3, #128	; 0x80
  401dbc:	f04f 0e40 	mov.w	lr, #64	; 0x40
  401dc0:	203f      	movs	r0, #63	; 0x3f
  401dc2:	e749      	b.n	401c58 <_malloc_r+0x44>
  401dc4:	4670      	mov	r0, lr
  401dc6:	e75d      	b.n	401c84 <_malloc_r+0x70>
  401dc8:	4423      	add	r3, r4
  401dca:	68e1      	ldr	r1, [r4, #12]
  401dcc:	685a      	ldr	r2, [r3, #4]
  401dce:	68a5      	ldr	r5, [r4, #8]
  401dd0:	f042 0201 	orr.w	r2, r2, #1
  401dd4:	60e9      	str	r1, [r5, #12]
  401dd6:	4630      	mov	r0, r6
  401dd8:	608d      	str	r5, [r1, #8]
  401dda:	605a      	str	r2, [r3, #4]
  401ddc:	f000 fb28 	bl	402430 <__malloc_unlock>
  401de0:	3408      	adds	r4, #8
  401de2:	4620      	mov	r0, r4
  401de4:	b003      	add	sp, #12
  401de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401dea:	4423      	add	r3, r4
  401dec:	4630      	mov	r0, r6
  401dee:	685a      	ldr	r2, [r3, #4]
  401df0:	f042 0201 	orr.w	r2, r2, #1
  401df4:	605a      	str	r2, [r3, #4]
  401df6:	f000 fb1b 	bl	402430 <__malloc_unlock>
  401dfa:	3408      	adds	r4, #8
  401dfc:	4620      	mov	r0, r4
  401dfe:	b003      	add	sp, #12
  401e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401e04:	68bc      	ldr	r4, [r7, #8]
  401e06:	6863      	ldr	r3, [r4, #4]
  401e08:	f023 0803 	bic.w	r8, r3, #3
  401e0c:	45a8      	cmp	r8, r5
  401e0e:	d304      	bcc.n	401e1a <_malloc_r+0x206>
  401e10:	ebc5 0308 	rsb	r3, r5, r8
  401e14:	2b0f      	cmp	r3, #15
  401e16:	f300 808c 	bgt.w	401f32 <_malloc_r+0x31e>
  401e1a:	4b55      	ldr	r3, [pc, #340]	; (401f70 <_malloc_r+0x35c>)
  401e1c:	f8df 9160 	ldr.w	r9, [pc, #352]	; 401f80 <_malloc_r+0x36c>
  401e20:	681a      	ldr	r2, [r3, #0]
  401e22:	f8d9 3000 	ldr.w	r3, [r9]
  401e26:	3301      	adds	r3, #1
  401e28:	442a      	add	r2, r5
  401e2a:	eb04 0a08 	add.w	sl, r4, r8
  401e2e:	f000 8160 	beq.w	4020f2 <_malloc_r+0x4de>
  401e32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
  401e36:	320f      	adds	r2, #15
  401e38:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  401e3c:	f022 020f 	bic.w	r2, r2, #15
  401e40:	4611      	mov	r1, r2
  401e42:	4630      	mov	r0, r6
  401e44:	9201      	str	r2, [sp, #4]
  401e46:	f000 fd79 	bl	40293c <_sbrk_r>
  401e4a:	f1b0 3fff 	cmp.w	r0, #4294967295
  401e4e:	4683      	mov	fp, r0
  401e50:	9a01      	ldr	r2, [sp, #4]
  401e52:	f000 8158 	beq.w	402106 <_malloc_r+0x4f2>
  401e56:	4582      	cmp	sl, r0
  401e58:	f200 80fc 	bhi.w	402054 <_malloc_r+0x440>
  401e5c:	4b45      	ldr	r3, [pc, #276]	; (401f74 <_malloc_r+0x360>)
  401e5e:	6819      	ldr	r1, [r3, #0]
  401e60:	45da      	cmp	sl, fp
  401e62:	4411      	add	r1, r2
  401e64:	6019      	str	r1, [r3, #0]
  401e66:	f000 8153 	beq.w	402110 <_malloc_r+0x4fc>
  401e6a:	f8d9 0000 	ldr.w	r0, [r9]
  401e6e:	f8df e110 	ldr.w	lr, [pc, #272]	; 401f80 <_malloc_r+0x36c>
  401e72:	3001      	adds	r0, #1
  401e74:	bf1b      	ittet	ne
  401e76:	ebca 0a0b 	rsbne	sl, sl, fp
  401e7a:	4451      	addne	r1, sl
  401e7c:	f8ce b000 	streq.w	fp, [lr]
  401e80:	6019      	strne	r1, [r3, #0]
  401e82:	f01b 0107 	ands.w	r1, fp, #7
  401e86:	f000 8117 	beq.w	4020b8 <_malloc_r+0x4a4>
  401e8a:	f1c1 0008 	rsb	r0, r1, #8
  401e8e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  401e92:	4483      	add	fp, r0
  401e94:	3108      	adds	r1, #8
  401e96:	445a      	add	r2, fp
  401e98:	f3c2 020b 	ubfx	r2, r2, #0, #12
  401e9c:	ebc2 0901 	rsb	r9, r2, r1
  401ea0:	4649      	mov	r1, r9
  401ea2:	4630      	mov	r0, r6
  401ea4:	9301      	str	r3, [sp, #4]
  401ea6:	f000 fd49 	bl	40293c <_sbrk_r>
  401eaa:	1c43      	adds	r3, r0, #1
  401eac:	9b01      	ldr	r3, [sp, #4]
  401eae:	f000 813f 	beq.w	402130 <_malloc_r+0x51c>
  401eb2:	ebcb 0200 	rsb	r2, fp, r0
  401eb6:	444a      	add	r2, r9
  401eb8:	f042 0201 	orr.w	r2, r2, #1
  401ebc:	6819      	ldr	r1, [r3, #0]
  401ebe:	f8c7 b008 	str.w	fp, [r7, #8]
  401ec2:	4449      	add	r1, r9
  401ec4:	42bc      	cmp	r4, r7
  401ec6:	f8cb 2004 	str.w	r2, [fp, #4]
  401eca:	6019      	str	r1, [r3, #0]
  401ecc:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 401f74 <_malloc_r+0x360>
  401ed0:	d016      	beq.n	401f00 <_malloc_r+0x2ec>
  401ed2:	f1b8 0f0f 	cmp.w	r8, #15
  401ed6:	f240 80fd 	bls.w	4020d4 <_malloc_r+0x4c0>
  401eda:	6862      	ldr	r2, [r4, #4]
  401edc:	f1a8 030c 	sub.w	r3, r8, #12
  401ee0:	f023 0307 	bic.w	r3, r3, #7
  401ee4:	18e0      	adds	r0, r4, r3
  401ee6:	f002 0201 	and.w	r2, r2, #1
  401eea:	f04f 0e05 	mov.w	lr, #5
  401eee:	431a      	orrs	r2, r3
  401ef0:	2b0f      	cmp	r3, #15
  401ef2:	6062      	str	r2, [r4, #4]
  401ef4:	f8c0 e004 	str.w	lr, [r0, #4]
  401ef8:	f8c0 e008 	str.w	lr, [r0, #8]
  401efc:	f200 811c 	bhi.w	402138 <_malloc_r+0x524>
  401f00:	4b1d      	ldr	r3, [pc, #116]	; (401f78 <_malloc_r+0x364>)
  401f02:	68bc      	ldr	r4, [r7, #8]
  401f04:	681a      	ldr	r2, [r3, #0]
  401f06:	4291      	cmp	r1, r2
  401f08:	bf88      	it	hi
  401f0a:	6019      	strhi	r1, [r3, #0]
  401f0c:	4b1b      	ldr	r3, [pc, #108]	; (401f7c <_malloc_r+0x368>)
  401f0e:	681a      	ldr	r2, [r3, #0]
  401f10:	4291      	cmp	r1, r2
  401f12:	6862      	ldr	r2, [r4, #4]
  401f14:	bf88      	it	hi
  401f16:	6019      	strhi	r1, [r3, #0]
  401f18:	f022 0203 	bic.w	r2, r2, #3
  401f1c:	4295      	cmp	r5, r2
  401f1e:	eba2 0305 	sub.w	r3, r2, r5
  401f22:	d801      	bhi.n	401f28 <_malloc_r+0x314>
  401f24:	2b0f      	cmp	r3, #15
  401f26:	dc04      	bgt.n	401f32 <_malloc_r+0x31e>
  401f28:	4630      	mov	r0, r6
  401f2a:	f000 fa81 	bl	402430 <__malloc_unlock>
  401f2e:	2400      	movs	r4, #0
  401f30:	e738      	b.n	401da4 <_malloc_r+0x190>
  401f32:	1962      	adds	r2, r4, r5
  401f34:	f043 0301 	orr.w	r3, r3, #1
  401f38:	f045 0501 	orr.w	r5, r5, #1
  401f3c:	6065      	str	r5, [r4, #4]
  401f3e:	4630      	mov	r0, r6
  401f40:	60ba      	str	r2, [r7, #8]
  401f42:	6053      	str	r3, [r2, #4]
  401f44:	f000 fa74 	bl	402430 <__malloc_unlock>
  401f48:	3408      	adds	r4, #8
  401f4a:	4620      	mov	r0, r4
  401f4c:	b003      	add	sp, #12
  401f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  401f52:	2b14      	cmp	r3, #20
  401f54:	d971      	bls.n	40203a <_malloc_r+0x426>
  401f56:	2b54      	cmp	r3, #84	; 0x54
  401f58:	f200 80a4 	bhi.w	4020a4 <_malloc_r+0x490>
  401f5c:	0b28      	lsrs	r0, r5, #12
  401f5e:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
  401f62:	ea4f 034e 	mov.w	r3, lr, lsl #1
  401f66:	306e      	adds	r0, #110	; 0x6e
  401f68:	e676      	b.n	401c58 <_malloc_r+0x44>
  401f6a:	bf00      	nop
  401f6c:	20000444 	.word	0x20000444
  401f70:	200008f0 	.word	0x200008f0
  401f74:	200008f4 	.word	0x200008f4
  401f78:	200008ec 	.word	0x200008ec
  401f7c:	200008e8 	.word	0x200008e8
  401f80:	20000850 	.word	0x20000850
  401f84:	0a5a      	lsrs	r2, r3, #9
  401f86:	2a04      	cmp	r2, #4
  401f88:	d95e      	bls.n	402048 <_malloc_r+0x434>
  401f8a:	2a14      	cmp	r2, #20
  401f8c:	f200 80b3 	bhi.w	4020f6 <_malloc_r+0x4e2>
  401f90:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  401f94:	0049      	lsls	r1, r1, #1
  401f96:	325b      	adds	r2, #91	; 0x5b
  401f98:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
  401f9c:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
  401fa0:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 402180 <_malloc_r+0x56c>
  401fa4:	f1ac 0c08 	sub.w	ip, ip, #8
  401fa8:	458c      	cmp	ip, r1
  401faa:	f000 8088 	beq.w	4020be <_malloc_r+0x4aa>
  401fae:	684a      	ldr	r2, [r1, #4]
  401fb0:	f022 0203 	bic.w	r2, r2, #3
  401fb4:	4293      	cmp	r3, r2
  401fb6:	d202      	bcs.n	401fbe <_malloc_r+0x3aa>
  401fb8:	6889      	ldr	r1, [r1, #8]
  401fba:	458c      	cmp	ip, r1
  401fbc:	d1f7      	bne.n	401fae <_malloc_r+0x39a>
  401fbe:	f8d1 c00c 	ldr.w	ip, [r1, #12]
  401fc2:	687a      	ldr	r2, [r7, #4]
  401fc4:	f8c4 c00c 	str.w	ip, [r4, #12]
  401fc8:	60a1      	str	r1, [r4, #8]
  401fca:	f8cc 4008 	str.w	r4, [ip, #8]
  401fce:	60cc      	str	r4, [r1, #12]
  401fd0:	e688      	b.n	401ce4 <_malloc_r+0xd0>
  401fd2:	1963      	adds	r3, r4, r5
  401fd4:	f042 0701 	orr.w	r7, r2, #1
  401fd8:	f045 0501 	orr.w	r5, r5, #1
  401fdc:	6065      	str	r5, [r4, #4]
  401fde:	4630      	mov	r0, r6
  401fe0:	614b      	str	r3, [r1, #20]
  401fe2:	610b      	str	r3, [r1, #16]
  401fe4:	f8c3 e00c 	str.w	lr, [r3, #12]
  401fe8:	f8c3 e008 	str.w	lr, [r3, #8]
  401fec:	605f      	str	r7, [r3, #4]
  401fee:	509a      	str	r2, [r3, r2]
  401ff0:	3408      	adds	r4, #8
  401ff2:	f000 fa1d 	bl	402430 <__malloc_unlock>
  401ff6:	e6d5      	b.n	401da4 <_malloc_r+0x190>
  401ff8:	684a      	ldr	r2, [r1, #4]
  401ffa:	e673      	b.n	401ce4 <_malloc_r+0xd0>
  401ffc:	f108 0801 	add.w	r8, r8, #1
  402000:	f018 0f03 	tst.w	r8, #3
  402004:	f10c 0c08 	add.w	ip, ip, #8
  402008:	f47f ae7f 	bne.w	401d0a <_malloc_r+0xf6>
  40200c:	e030      	b.n	402070 <_malloc_r+0x45c>
  40200e:	68dc      	ldr	r4, [r3, #12]
  402010:	42a3      	cmp	r3, r4
  402012:	bf08      	it	eq
  402014:	3002      	addeq	r0, #2
  402016:	f43f ae35 	beq.w	401c84 <_malloc_r+0x70>
  40201a:	e6b3      	b.n	401d84 <_malloc_r+0x170>
  40201c:	440b      	add	r3, r1
  40201e:	460c      	mov	r4, r1
  402020:	685a      	ldr	r2, [r3, #4]
  402022:	68c9      	ldr	r1, [r1, #12]
  402024:	f854 5f08 	ldr.w	r5, [r4, #8]!
  402028:	f042 0201 	orr.w	r2, r2, #1
  40202c:	605a      	str	r2, [r3, #4]
  40202e:	4630      	mov	r0, r6
  402030:	60e9      	str	r1, [r5, #12]
  402032:	608d      	str	r5, [r1, #8]
  402034:	f000 f9fc 	bl	402430 <__malloc_unlock>
  402038:	e6b4      	b.n	401da4 <_malloc_r+0x190>
  40203a:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
  40203e:	f103 005b 	add.w	r0, r3, #91	; 0x5b
  402042:	ea4f 034e 	mov.w	r3, lr, lsl #1
  402046:	e607      	b.n	401c58 <_malloc_r+0x44>
  402048:	099a      	lsrs	r2, r3, #6
  40204a:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40204e:	0049      	lsls	r1, r1, #1
  402050:	3238      	adds	r2, #56	; 0x38
  402052:	e7a1      	b.n	401f98 <_malloc_r+0x384>
  402054:	42bc      	cmp	r4, r7
  402056:	4b4a      	ldr	r3, [pc, #296]	; (402180 <_malloc_r+0x56c>)
  402058:	f43f af00 	beq.w	401e5c <_malloc_r+0x248>
  40205c:	689c      	ldr	r4, [r3, #8]
  40205e:	6862      	ldr	r2, [r4, #4]
  402060:	f022 0203 	bic.w	r2, r2, #3
  402064:	e75a      	b.n	401f1c <_malloc_r+0x308>
  402066:	f859 3908 	ldr.w	r3, [r9], #-8
  40206a:	4599      	cmp	r9, r3
  40206c:	f040 8082 	bne.w	402174 <_malloc_r+0x560>
  402070:	f010 0f03 	tst.w	r0, #3
  402074:	f100 30ff 	add.w	r0, r0, #4294967295
  402078:	d1f5      	bne.n	402066 <_malloc_r+0x452>
  40207a:	687b      	ldr	r3, [r7, #4]
  40207c:	ea23 0304 	bic.w	r3, r3, r4
  402080:	607b      	str	r3, [r7, #4]
  402082:	0064      	lsls	r4, r4, #1
  402084:	429c      	cmp	r4, r3
  402086:	f63f aebd 	bhi.w	401e04 <_malloc_r+0x1f0>
  40208a:	2c00      	cmp	r4, #0
  40208c:	f43f aeba 	beq.w	401e04 <_malloc_r+0x1f0>
  402090:	421c      	tst	r4, r3
  402092:	4640      	mov	r0, r8
  402094:	f47f ae35 	bne.w	401d02 <_malloc_r+0xee>
  402098:	0064      	lsls	r4, r4, #1
  40209a:	421c      	tst	r4, r3
  40209c:	f100 0004 	add.w	r0, r0, #4
  4020a0:	d0fa      	beq.n	402098 <_malloc_r+0x484>
  4020a2:	e62e      	b.n	401d02 <_malloc_r+0xee>
  4020a4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4020a8:	d818      	bhi.n	4020dc <_malloc_r+0x4c8>
  4020aa:	0be8      	lsrs	r0, r5, #15
  4020ac:	f100 0e78 	add.w	lr, r0, #120	; 0x78
  4020b0:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4020b4:	3077      	adds	r0, #119	; 0x77
  4020b6:	e5cf      	b.n	401c58 <_malloc_r+0x44>
  4020b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4020bc:	e6eb      	b.n	401e96 <_malloc_r+0x282>
  4020be:	2101      	movs	r1, #1
  4020c0:	f8d8 3004 	ldr.w	r3, [r8, #4]
  4020c4:	1092      	asrs	r2, r2, #2
  4020c6:	fa01 f202 	lsl.w	r2, r1, r2
  4020ca:	431a      	orrs	r2, r3
  4020cc:	f8c8 2004 	str.w	r2, [r8, #4]
  4020d0:	4661      	mov	r1, ip
  4020d2:	e777      	b.n	401fc4 <_malloc_r+0x3b0>
  4020d4:	2301      	movs	r3, #1
  4020d6:	f8cb 3004 	str.w	r3, [fp, #4]
  4020da:	e725      	b.n	401f28 <_malloc_r+0x314>
  4020dc:	f240 5254 	movw	r2, #1364	; 0x554
  4020e0:	4293      	cmp	r3, r2
  4020e2:	d820      	bhi.n	402126 <_malloc_r+0x512>
  4020e4:	0ca8      	lsrs	r0, r5, #18
  4020e6:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
  4020ea:	ea4f 034e 	mov.w	r3, lr, lsl #1
  4020ee:	307c      	adds	r0, #124	; 0x7c
  4020f0:	e5b2      	b.n	401c58 <_malloc_r+0x44>
  4020f2:	3210      	adds	r2, #16
  4020f4:	e6a4      	b.n	401e40 <_malloc_r+0x22c>
  4020f6:	2a54      	cmp	r2, #84	; 0x54
  4020f8:	d826      	bhi.n	402148 <_malloc_r+0x534>
  4020fa:	0b1a      	lsrs	r2, r3, #12
  4020fc:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  402100:	0049      	lsls	r1, r1, #1
  402102:	326e      	adds	r2, #110	; 0x6e
  402104:	e748      	b.n	401f98 <_malloc_r+0x384>
  402106:	68bc      	ldr	r4, [r7, #8]
  402108:	6862      	ldr	r2, [r4, #4]
  40210a:	f022 0203 	bic.w	r2, r2, #3
  40210e:	e705      	b.n	401f1c <_malloc_r+0x308>
  402110:	f3ca 000b 	ubfx	r0, sl, #0, #12
  402114:	2800      	cmp	r0, #0
  402116:	f47f aea8 	bne.w	401e6a <_malloc_r+0x256>
  40211a:	4442      	add	r2, r8
  40211c:	68bb      	ldr	r3, [r7, #8]
  40211e:	f042 0201 	orr.w	r2, r2, #1
  402122:	605a      	str	r2, [r3, #4]
  402124:	e6ec      	b.n	401f00 <_malloc_r+0x2ec>
  402126:	23fe      	movs	r3, #254	; 0xfe
  402128:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
  40212c:	207e      	movs	r0, #126	; 0x7e
  40212e:	e593      	b.n	401c58 <_malloc_r+0x44>
  402130:	2201      	movs	r2, #1
  402132:	f04f 0900 	mov.w	r9, #0
  402136:	e6c1      	b.n	401ebc <_malloc_r+0x2a8>
  402138:	f104 0108 	add.w	r1, r4, #8
  40213c:	4630      	mov	r0, r6
  40213e:	f7ff fa33 	bl	4015a8 <_free_r>
  402142:	f8d9 1000 	ldr.w	r1, [r9]
  402146:	e6db      	b.n	401f00 <_malloc_r+0x2ec>
  402148:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40214c:	d805      	bhi.n	40215a <_malloc_r+0x546>
  40214e:	0bda      	lsrs	r2, r3, #15
  402150:	f102 0178 	add.w	r1, r2, #120	; 0x78
  402154:	0049      	lsls	r1, r1, #1
  402156:	3277      	adds	r2, #119	; 0x77
  402158:	e71e      	b.n	401f98 <_malloc_r+0x384>
  40215a:	f240 5154 	movw	r1, #1364	; 0x554
  40215e:	428a      	cmp	r2, r1
  402160:	d805      	bhi.n	40216e <_malloc_r+0x55a>
  402162:	0c9a      	lsrs	r2, r3, #18
  402164:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  402168:	0049      	lsls	r1, r1, #1
  40216a:	327c      	adds	r2, #124	; 0x7c
  40216c:	e714      	b.n	401f98 <_malloc_r+0x384>
  40216e:	21fe      	movs	r1, #254	; 0xfe
  402170:	227e      	movs	r2, #126	; 0x7e
  402172:	e711      	b.n	401f98 <_malloc_r+0x384>
  402174:	687b      	ldr	r3, [r7, #4]
  402176:	e784      	b.n	402082 <_malloc_r+0x46e>
  402178:	08e8      	lsrs	r0, r5, #3
  40217a:	1c43      	adds	r3, r0, #1
  40217c:	005b      	lsls	r3, r3, #1
  40217e:	e5f8      	b.n	401d72 <_malloc_r+0x15e>
  402180:	20000444 	.word	0x20000444
	...

00402190 <memchr>:
  402190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  402194:	2a10      	cmp	r2, #16
  402196:	db2b      	blt.n	4021f0 <memchr+0x60>
  402198:	f010 0f07 	tst.w	r0, #7
  40219c:	d008      	beq.n	4021b0 <memchr+0x20>
  40219e:	f810 3b01 	ldrb.w	r3, [r0], #1
  4021a2:	3a01      	subs	r2, #1
  4021a4:	428b      	cmp	r3, r1
  4021a6:	d02d      	beq.n	402204 <memchr+0x74>
  4021a8:	f010 0f07 	tst.w	r0, #7
  4021ac:	b342      	cbz	r2, 402200 <memchr+0x70>
  4021ae:	d1f6      	bne.n	40219e <memchr+0xe>
  4021b0:	b4f0      	push	{r4, r5, r6, r7}
  4021b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  4021b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  4021ba:	f022 0407 	bic.w	r4, r2, #7
  4021be:	f07f 0700 	mvns.w	r7, #0
  4021c2:	2300      	movs	r3, #0
  4021c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4021c8:	3c08      	subs	r4, #8
  4021ca:	ea85 0501 	eor.w	r5, r5, r1
  4021ce:	ea86 0601 	eor.w	r6, r6, r1
  4021d2:	fa85 f547 	uadd8	r5, r5, r7
  4021d6:	faa3 f587 	sel	r5, r3, r7
  4021da:	fa86 f647 	uadd8	r6, r6, r7
  4021de:	faa5 f687 	sel	r6, r5, r7
  4021e2:	b98e      	cbnz	r6, 402208 <memchr+0x78>
  4021e4:	d1ee      	bne.n	4021c4 <memchr+0x34>
  4021e6:	bcf0      	pop	{r4, r5, r6, r7}
  4021e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4021ec:	f002 0207 	and.w	r2, r2, #7
  4021f0:	b132      	cbz	r2, 402200 <memchr+0x70>
  4021f2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4021f6:	3a01      	subs	r2, #1
  4021f8:	ea83 0301 	eor.w	r3, r3, r1
  4021fc:	b113      	cbz	r3, 402204 <memchr+0x74>
  4021fe:	d1f8      	bne.n	4021f2 <memchr+0x62>
  402200:	2000      	movs	r0, #0
  402202:	4770      	bx	lr
  402204:	3801      	subs	r0, #1
  402206:	4770      	bx	lr
  402208:	2d00      	cmp	r5, #0
  40220a:	bf06      	itte	eq
  40220c:	4635      	moveq	r5, r6
  40220e:	3803      	subeq	r0, #3
  402210:	3807      	subne	r0, #7
  402212:	f015 0f01 	tst.w	r5, #1
  402216:	d107      	bne.n	402228 <memchr+0x98>
  402218:	3001      	adds	r0, #1
  40221a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40221e:	bf02      	ittt	eq
  402220:	3001      	addeq	r0, #1
  402222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  402226:	3001      	addeq	r0, #1
  402228:	bcf0      	pop	{r4, r5, r6, r7}
  40222a:	3801      	subs	r0, #1
  40222c:	4770      	bx	lr
  40222e:	bf00      	nop

00402230 <memcpy>:
  402230:	4684      	mov	ip, r0
  402232:	ea41 0300 	orr.w	r3, r1, r0
  402236:	f013 0303 	ands.w	r3, r3, #3
  40223a:	d16d      	bne.n	402318 <memcpy+0xe8>
  40223c:	3a40      	subs	r2, #64	; 0x40
  40223e:	d341      	bcc.n	4022c4 <memcpy+0x94>
  402240:	f851 3b04 	ldr.w	r3, [r1], #4
  402244:	f840 3b04 	str.w	r3, [r0], #4
  402248:	f851 3b04 	ldr.w	r3, [r1], #4
  40224c:	f840 3b04 	str.w	r3, [r0], #4
  402250:	f851 3b04 	ldr.w	r3, [r1], #4
  402254:	f840 3b04 	str.w	r3, [r0], #4
  402258:	f851 3b04 	ldr.w	r3, [r1], #4
  40225c:	f840 3b04 	str.w	r3, [r0], #4
  402260:	f851 3b04 	ldr.w	r3, [r1], #4
  402264:	f840 3b04 	str.w	r3, [r0], #4
  402268:	f851 3b04 	ldr.w	r3, [r1], #4
  40226c:	f840 3b04 	str.w	r3, [r0], #4
  402270:	f851 3b04 	ldr.w	r3, [r1], #4
  402274:	f840 3b04 	str.w	r3, [r0], #4
  402278:	f851 3b04 	ldr.w	r3, [r1], #4
  40227c:	f840 3b04 	str.w	r3, [r0], #4
  402280:	f851 3b04 	ldr.w	r3, [r1], #4
  402284:	f840 3b04 	str.w	r3, [r0], #4
  402288:	f851 3b04 	ldr.w	r3, [r1], #4
  40228c:	f840 3b04 	str.w	r3, [r0], #4
  402290:	f851 3b04 	ldr.w	r3, [r1], #4
  402294:	f840 3b04 	str.w	r3, [r0], #4
  402298:	f851 3b04 	ldr.w	r3, [r1], #4
  40229c:	f840 3b04 	str.w	r3, [r0], #4
  4022a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4022a4:	f840 3b04 	str.w	r3, [r0], #4
  4022a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4022ac:	f840 3b04 	str.w	r3, [r0], #4
  4022b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4022b4:	f840 3b04 	str.w	r3, [r0], #4
  4022b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4022bc:	f840 3b04 	str.w	r3, [r0], #4
  4022c0:	3a40      	subs	r2, #64	; 0x40
  4022c2:	d2bd      	bcs.n	402240 <memcpy+0x10>
  4022c4:	3230      	adds	r2, #48	; 0x30
  4022c6:	d311      	bcc.n	4022ec <memcpy+0xbc>
  4022c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4022cc:	f840 3b04 	str.w	r3, [r0], #4
  4022d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4022d4:	f840 3b04 	str.w	r3, [r0], #4
  4022d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4022dc:	f840 3b04 	str.w	r3, [r0], #4
  4022e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4022e4:	f840 3b04 	str.w	r3, [r0], #4
  4022e8:	3a10      	subs	r2, #16
  4022ea:	d2ed      	bcs.n	4022c8 <memcpy+0x98>
  4022ec:	320c      	adds	r2, #12
  4022ee:	d305      	bcc.n	4022fc <memcpy+0xcc>
  4022f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4022f4:	f840 3b04 	str.w	r3, [r0], #4
  4022f8:	3a04      	subs	r2, #4
  4022fa:	d2f9      	bcs.n	4022f0 <memcpy+0xc0>
  4022fc:	3204      	adds	r2, #4
  4022fe:	d008      	beq.n	402312 <memcpy+0xe2>
  402300:	07d2      	lsls	r2, r2, #31
  402302:	bf1c      	itt	ne
  402304:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402308:	f800 3b01 	strbne.w	r3, [r0], #1
  40230c:	d301      	bcc.n	402312 <memcpy+0xe2>
  40230e:	880b      	ldrh	r3, [r1, #0]
  402310:	8003      	strh	r3, [r0, #0]
  402312:	4660      	mov	r0, ip
  402314:	4770      	bx	lr
  402316:	bf00      	nop
  402318:	2a08      	cmp	r2, #8
  40231a:	d313      	bcc.n	402344 <memcpy+0x114>
  40231c:	078b      	lsls	r3, r1, #30
  40231e:	d08d      	beq.n	40223c <memcpy+0xc>
  402320:	f010 0303 	ands.w	r3, r0, #3
  402324:	d08a      	beq.n	40223c <memcpy+0xc>
  402326:	f1c3 0304 	rsb	r3, r3, #4
  40232a:	1ad2      	subs	r2, r2, r3
  40232c:	07db      	lsls	r3, r3, #31
  40232e:	bf1c      	itt	ne
  402330:	f811 3b01 	ldrbne.w	r3, [r1], #1
  402334:	f800 3b01 	strbne.w	r3, [r0], #1
  402338:	d380      	bcc.n	40223c <memcpy+0xc>
  40233a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40233e:	f820 3b02 	strh.w	r3, [r0], #2
  402342:	e77b      	b.n	40223c <memcpy+0xc>
  402344:	3a04      	subs	r2, #4
  402346:	d3d9      	bcc.n	4022fc <memcpy+0xcc>
  402348:	3a01      	subs	r2, #1
  40234a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40234e:	f800 3b01 	strb.w	r3, [r0], #1
  402352:	d2f9      	bcs.n	402348 <memcpy+0x118>
  402354:	780b      	ldrb	r3, [r1, #0]
  402356:	7003      	strb	r3, [r0, #0]
  402358:	784b      	ldrb	r3, [r1, #1]
  40235a:	7043      	strb	r3, [r0, #1]
  40235c:	788b      	ldrb	r3, [r1, #2]
  40235e:	7083      	strb	r3, [r0, #2]
  402360:	4660      	mov	r0, ip
  402362:	4770      	bx	lr

00402364 <memmove>:
  402364:	4288      	cmp	r0, r1
  402366:	b5f0      	push	{r4, r5, r6, r7, lr}
  402368:	d90d      	bls.n	402386 <memmove+0x22>
  40236a:	188b      	adds	r3, r1, r2
  40236c:	4298      	cmp	r0, r3
  40236e:	d20a      	bcs.n	402386 <memmove+0x22>
  402370:	1881      	adds	r1, r0, r2
  402372:	2a00      	cmp	r2, #0
  402374:	d051      	beq.n	40241a <memmove+0xb6>
  402376:	1a9a      	subs	r2, r3, r2
  402378:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40237c:	f801 4d01 	strb.w	r4, [r1, #-1]!
  402380:	4293      	cmp	r3, r2
  402382:	d1f9      	bne.n	402378 <memmove+0x14>
  402384:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402386:	2a0f      	cmp	r2, #15
  402388:	d948      	bls.n	40241c <memmove+0xb8>
  40238a:	ea41 0300 	orr.w	r3, r1, r0
  40238e:	079b      	lsls	r3, r3, #30
  402390:	d146      	bne.n	402420 <memmove+0xbc>
  402392:	f100 0410 	add.w	r4, r0, #16
  402396:	f101 0310 	add.w	r3, r1, #16
  40239a:	4615      	mov	r5, r2
  40239c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4023a0:	f844 6c10 	str.w	r6, [r4, #-16]
  4023a4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4023a8:	f844 6c0c 	str.w	r6, [r4, #-12]
  4023ac:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4023b0:	f844 6c08 	str.w	r6, [r4, #-8]
  4023b4:	3d10      	subs	r5, #16
  4023b6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4023ba:	f844 6c04 	str.w	r6, [r4, #-4]
  4023be:	2d0f      	cmp	r5, #15
  4023c0:	f103 0310 	add.w	r3, r3, #16
  4023c4:	f104 0410 	add.w	r4, r4, #16
  4023c8:	d8e8      	bhi.n	40239c <memmove+0x38>
  4023ca:	f1a2 0310 	sub.w	r3, r2, #16
  4023ce:	f023 030f 	bic.w	r3, r3, #15
  4023d2:	f002 0e0f 	and.w	lr, r2, #15
  4023d6:	3310      	adds	r3, #16
  4023d8:	f1be 0f03 	cmp.w	lr, #3
  4023dc:	4419      	add	r1, r3
  4023de:	4403      	add	r3, r0
  4023e0:	d921      	bls.n	402426 <memmove+0xc2>
  4023e2:	1f1e      	subs	r6, r3, #4
  4023e4:	460d      	mov	r5, r1
  4023e6:	4674      	mov	r4, lr
  4023e8:	3c04      	subs	r4, #4
  4023ea:	f855 7b04 	ldr.w	r7, [r5], #4
  4023ee:	f846 7f04 	str.w	r7, [r6, #4]!
  4023f2:	2c03      	cmp	r4, #3
  4023f4:	d8f8      	bhi.n	4023e8 <memmove+0x84>
  4023f6:	f1ae 0404 	sub.w	r4, lr, #4
  4023fa:	f024 0403 	bic.w	r4, r4, #3
  4023fe:	3404      	adds	r4, #4
  402400:	4423      	add	r3, r4
  402402:	4421      	add	r1, r4
  402404:	f002 0203 	and.w	r2, r2, #3
  402408:	b162      	cbz	r2, 402424 <memmove+0xc0>
  40240a:	3b01      	subs	r3, #1
  40240c:	440a      	add	r2, r1
  40240e:	f811 4b01 	ldrb.w	r4, [r1], #1
  402412:	f803 4f01 	strb.w	r4, [r3, #1]!
  402416:	428a      	cmp	r2, r1
  402418:	d1f9      	bne.n	40240e <memmove+0xaa>
  40241a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40241c:	4603      	mov	r3, r0
  40241e:	e7f3      	b.n	402408 <memmove+0xa4>
  402420:	4603      	mov	r3, r0
  402422:	e7f2      	b.n	40240a <memmove+0xa6>
  402424:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402426:	4672      	mov	r2, lr
  402428:	e7ee      	b.n	402408 <memmove+0xa4>
  40242a:	bf00      	nop

0040242c <__malloc_lock>:
  40242c:	4770      	bx	lr
  40242e:	bf00      	nop

00402430 <__malloc_unlock>:
  402430:	4770      	bx	lr
  402432:	bf00      	nop

00402434 <_realloc_r>:
  402434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402438:	4617      	mov	r7, r2
  40243a:	b083      	sub	sp, #12
  40243c:	2900      	cmp	r1, #0
  40243e:	f000 80c1 	beq.w	4025c4 <_realloc_r+0x190>
  402442:	460e      	mov	r6, r1
  402444:	4681      	mov	r9, r0
  402446:	f107 050b 	add.w	r5, r7, #11
  40244a:	f7ff ffef 	bl	40242c <__malloc_lock>
  40244e:	f856 ec04 	ldr.w	lr, [r6, #-4]
  402452:	2d16      	cmp	r5, #22
  402454:	f02e 0403 	bic.w	r4, lr, #3
  402458:	f1a6 0808 	sub.w	r8, r6, #8
  40245c:	d840      	bhi.n	4024e0 <_realloc_r+0xac>
  40245e:	2210      	movs	r2, #16
  402460:	4615      	mov	r5, r2
  402462:	42af      	cmp	r7, r5
  402464:	d841      	bhi.n	4024ea <_realloc_r+0xb6>
  402466:	4294      	cmp	r4, r2
  402468:	da75      	bge.n	402556 <_realloc_r+0x122>
  40246a:	4bc9      	ldr	r3, [pc, #804]	; (402790 <_realloc_r+0x35c>)
  40246c:	6899      	ldr	r1, [r3, #8]
  40246e:	eb08 0004 	add.w	r0, r8, r4
  402472:	4288      	cmp	r0, r1
  402474:	6841      	ldr	r1, [r0, #4]
  402476:	f000 80d9 	beq.w	40262c <_realloc_r+0x1f8>
  40247a:	f021 0301 	bic.w	r3, r1, #1
  40247e:	4403      	add	r3, r0
  402480:	685b      	ldr	r3, [r3, #4]
  402482:	07db      	lsls	r3, r3, #31
  402484:	d57d      	bpl.n	402582 <_realloc_r+0x14e>
  402486:	f01e 0f01 	tst.w	lr, #1
  40248a:	d035      	beq.n	4024f8 <_realloc_r+0xc4>
  40248c:	4639      	mov	r1, r7
  40248e:	4648      	mov	r0, r9
  402490:	f7ff fbc0 	bl	401c14 <_malloc_r>
  402494:	4607      	mov	r7, r0
  402496:	b1e0      	cbz	r0, 4024d2 <_realloc_r+0x9e>
  402498:	f856 3c04 	ldr.w	r3, [r6, #-4]
  40249c:	f023 0301 	bic.w	r3, r3, #1
  4024a0:	4443      	add	r3, r8
  4024a2:	f1a0 0208 	sub.w	r2, r0, #8
  4024a6:	429a      	cmp	r2, r3
  4024a8:	f000 8144 	beq.w	402734 <_realloc_r+0x300>
  4024ac:	1f22      	subs	r2, r4, #4
  4024ae:	2a24      	cmp	r2, #36	; 0x24
  4024b0:	f200 8131 	bhi.w	402716 <_realloc_r+0x2e2>
  4024b4:	2a13      	cmp	r2, #19
  4024b6:	f200 8104 	bhi.w	4026c2 <_realloc_r+0x28e>
  4024ba:	4603      	mov	r3, r0
  4024bc:	4632      	mov	r2, r6
  4024be:	6811      	ldr	r1, [r2, #0]
  4024c0:	6019      	str	r1, [r3, #0]
  4024c2:	6851      	ldr	r1, [r2, #4]
  4024c4:	6059      	str	r1, [r3, #4]
  4024c6:	6892      	ldr	r2, [r2, #8]
  4024c8:	609a      	str	r2, [r3, #8]
  4024ca:	4631      	mov	r1, r6
  4024cc:	4648      	mov	r0, r9
  4024ce:	f7ff f86b 	bl	4015a8 <_free_r>
  4024d2:	4648      	mov	r0, r9
  4024d4:	f7ff ffac 	bl	402430 <__malloc_unlock>
  4024d8:	4638      	mov	r0, r7
  4024da:	b003      	add	sp, #12
  4024dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4024e0:	f025 0507 	bic.w	r5, r5, #7
  4024e4:	2d00      	cmp	r5, #0
  4024e6:	462a      	mov	r2, r5
  4024e8:	dabb      	bge.n	402462 <_realloc_r+0x2e>
  4024ea:	230c      	movs	r3, #12
  4024ec:	2000      	movs	r0, #0
  4024ee:	f8c9 3000 	str.w	r3, [r9]
  4024f2:	b003      	add	sp, #12
  4024f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4024f8:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4024fc:	ebc3 0a08 	rsb	sl, r3, r8
  402500:	f8da 3004 	ldr.w	r3, [sl, #4]
  402504:	f023 0c03 	bic.w	ip, r3, #3
  402508:	eb04 030c 	add.w	r3, r4, ip
  40250c:	4293      	cmp	r3, r2
  40250e:	dbbd      	blt.n	40248c <_realloc_r+0x58>
  402510:	4657      	mov	r7, sl
  402512:	f8da 100c 	ldr.w	r1, [sl, #12]
  402516:	f857 0f08 	ldr.w	r0, [r7, #8]!
  40251a:	1f22      	subs	r2, r4, #4
  40251c:	2a24      	cmp	r2, #36	; 0x24
  40251e:	60c1      	str	r1, [r0, #12]
  402520:	6088      	str	r0, [r1, #8]
  402522:	f200 8117 	bhi.w	402754 <_realloc_r+0x320>
  402526:	2a13      	cmp	r2, #19
  402528:	f240 8112 	bls.w	402750 <_realloc_r+0x31c>
  40252c:	6831      	ldr	r1, [r6, #0]
  40252e:	f8ca 1008 	str.w	r1, [sl, #8]
  402532:	6871      	ldr	r1, [r6, #4]
  402534:	f8ca 100c 	str.w	r1, [sl, #12]
  402538:	2a1b      	cmp	r2, #27
  40253a:	f200 812b 	bhi.w	402794 <_realloc_r+0x360>
  40253e:	3608      	adds	r6, #8
  402540:	f10a 0210 	add.w	r2, sl, #16
  402544:	6831      	ldr	r1, [r6, #0]
  402546:	6011      	str	r1, [r2, #0]
  402548:	6871      	ldr	r1, [r6, #4]
  40254a:	6051      	str	r1, [r2, #4]
  40254c:	68b1      	ldr	r1, [r6, #8]
  40254e:	6091      	str	r1, [r2, #8]
  402550:	463e      	mov	r6, r7
  402552:	461c      	mov	r4, r3
  402554:	46d0      	mov	r8, sl
  402556:	1b63      	subs	r3, r4, r5
  402558:	2b0f      	cmp	r3, #15
  40255a:	d81d      	bhi.n	402598 <_realloc_r+0x164>
  40255c:	f8d8 3004 	ldr.w	r3, [r8, #4]
  402560:	f003 0301 	and.w	r3, r3, #1
  402564:	4323      	orrs	r3, r4
  402566:	4444      	add	r4, r8
  402568:	f8c8 3004 	str.w	r3, [r8, #4]
  40256c:	6863      	ldr	r3, [r4, #4]
  40256e:	f043 0301 	orr.w	r3, r3, #1
  402572:	6063      	str	r3, [r4, #4]
  402574:	4648      	mov	r0, r9
  402576:	f7ff ff5b 	bl	402430 <__malloc_unlock>
  40257a:	4630      	mov	r0, r6
  40257c:	b003      	add	sp, #12
  40257e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402582:	f021 0103 	bic.w	r1, r1, #3
  402586:	4421      	add	r1, r4
  402588:	4291      	cmp	r1, r2
  40258a:	db21      	blt.n	4025d0 <_realloc_r+0x19c>
  40258c:	68c3      	ldr	r3, [r0, #12]
  40258e:	6882      	ldr	r2, [r0, #8]
  402590:	460c      	mov	r4, r1
  402592:	60d3      	str	r3, [r2, #12]
  402594:	609a      	str	r2, [r3, #8]
  402596:	e7de      	b.n	402556 <_realloc_r+0x122>
  402598:	f8d8 2004 	ldr.w	r2, [r8, #4]
  40259c:	eb08 0105 	add.w	r1, r8, r5
  4025a0:	f002 0201 	and.w	r2, r2, #1
  4025a4:	4315      	orrs	r5, r2
  4025a6:	f043 0201 	orr.w	r2, r3, #1
  4025aa:	440b      	add	r3, r1
  4025ac:	f8c8 5004 	str.w	r5, [r8, #4]
  4025b0:	604a      	str	r2, [r1, #4]
  4025b2:	685a      	ldr	r2, [r3, #4]
  4025b4:	f042 0201 	orr.w	r2, r2, #1
  4025b8:	3108      	adds	r1, #8
  4025ba:	605a      	str	r2, [r3, #4]
  4025bc:	4648      	mov	r0, r9
  4025be:	f7fe fff3 	bl	4015a8 <_free_r>
  4025c2:	e7d7      	b.n	402574 <_realloc_r+0x140>
  4025c4:	4611      	mov	r1, r2
  4025c6:	b003      	add	sp, #12
  4025c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4025cc:	f7ff bb22 	b.w	401c14 <_malloc_r>
  4025d0:	f01e 0f01 	tst.w	lr, #1
  4025d4:	f47f af5a 	bne.w	40248c <_realloc_r+0x58>
  4025d8:	f856 3c08 	ldr.w	r3, [r6, #-8]
  4025dc:	ebc3 0a08 	rsb	sl, r3, r8
  4025e0:	f8da 3004 	ldr.w	r3, [sl, #4]
  4025e4:	f023 0c03 	bic.w	ip, r3, #3
  4025e8:	eb01 0e0c 	add.w	lr, r1, ip
  4025ec:	4596      	cmp	lr, r2
  4025ee:	db8b      	blt.n	402508 <_realloc_r+0xd4>
  4025f0:	68c3      	ldr	r3, [r0, #12]
  4025f2:	6882      	ldr	r2, [r0, #8]
  4025f4:	4657      	mov	r7, sl
  4025f6:	60d3      	str	r3, [r2, #12]
  4025f8:	609a      	str	r2, [r3, #8]
  4025fa:	f857 1f08 	ldr.w	r1, [r7, #8]!
  4025fe:	f8da 300c 	ldr.w	r3, [sl, #12]
  402602:	60cb      	str	r3, [r1, #12]
  402604:	1f22      	subs	r2, r4, #4
  402606:	2a24      	cmp	r2, #36	; 0x24
  402608:	6099      	str	r1, [r3, #8]
  40260a:	f200 8099 	bhi.w	402740 <_realloc_r+0x30c>
  40260e:	2a13      	cmp	r2, #19
  402610:	d962      	bls.n	4026d8 <_realloc_r+0x2a4>
  402612:	6833      	ldr	r3, [r6, #0]
  402614:	f8ca 3008 	str.w	r3, [sl, #8]
  402618:	6873      	ldr	r3, [r6, #4]
  40261a:	f8ca 300c 	str.w	r3, [sl, #12]
  40261e:	2a1b      	cmp	r2, #27
  402620:	f200 80a0 	bhi.w	402764 <_realloc_r+0x330>
  402624:	3608      	adds	r6, #8
  402626:	f10a 0310 	add.w	r3, sl, #16
  40262a:	e056      	b.n	4026da <_realloc_r+0x2a6>
  40262c:	f021 0b03 	bic.w	fp, r1, #3
  402630:	44a3      	add	fp, r4
  402632:	f105 0010 	add.w	r0, r5, #16
  402636:	4583      	cmp	fp, r0
  402638:	da59      	bge.n	4026ee <_realloc_r+0x2ba>
  40263a:	f01e 0f01 	tst.w	lr, #1
  40263e:	f47f af25 	bne.w	40248c <_realloc_r+0x58>
  402642:	f856 1c08 	ldr.w	r1, [r6, #-8]
  402646:	ebc1 0a08 	rsb	sl, r1, r8
  40264a:	f8da 1004 	ldr.w	r1, [sl, #4]
  40264e:	f021 0c03 	bic.w	ip, r1, #3
  402652:	44e3      	add	fp, ip
  402654:	4558      	cmp	r0, fp
  402656:	f73f af57 	bgt.w	402508 <_realloc_r+0xd4>
  40265a:	4657      	mov	r7, sl
  40265c:	f8da 100c 	ldr.w	r1, [sl, #12]
  402660:	f857 0f08 	ldr.w	r0, [r7, #8]!
  402664:	1f22      	subs	r2, r4, #4
  402666:	2a24      	cmp	r2, #36	; 0x24
  402668:	60c1      	str	r1, [r0, #12]
  40266a:	6088      	str	r0, [r1, #8]
  40266c:	f200 80b4 	bhi.w	4027d8 <_realloc_r+0x3a4>
  402670:	2a13      	cmp	r2, #19
  402672:	f240 80a5 	bls.w	4027c0 <_realloc_r+0x38c>
  402676:	6831      	ldr	r1, [r6, #0]
  402678:	f8ca 1008 	str.w	r1, [sl, #8]
  40267c:	6871      	ldr	r1, [r6, #4]
  40267e:	f8ca 100c 	str.w	r1, [sl, #12]
  402682:	2a1b      	cmp	r2, #27
  402684:	f200 80af 	bhi.w	4027e6 <_realloc_r+0x3b2>
  402688:	3608      	adds	r6, #8
  40268a:	f10a 0210 	add.w	r2, sl, #16
  40268e:	6831      	ldr	r1, [r6, #0]
  402690:	6011      	str	r1, [r2, #0]
  402692:	6871      	ldr	r1, [r6, #4]
  402694:	6051      	str	r1, [r2, #4]
  402696:	68b1      	ldr	r1, [r6, #8]
  402698:	6091      	str	r1, [r2, #8]
  40269a:	eb0a 0105 	add.w	r1, sl, r5
  40269e:	ebc5 020b 	rsb	r2, r5, fp
  4026a2:	f042 0201 	orr.w	r2, r2, #1
  4026a6:	6099      	str	r1, [r3, #8]
  4026a8:	604a      	str	r2, [r1, #4]
  4026aa:	f8da 3004 	ldr.w	r3, [sl, #4]
  4026ae:	f003 0301 	and.w	r3, r3, #1
  4026b2:	431d      	orrs	r5, r3
  4026b4:	4648      	mov	r0, r9
  4026b6:	f8ca 5004 	str.w	r5, [sl, #4]
  4026ba:	f7ff feb9 	bl	402430 <__malloc_unlock>
  4026be:	4638      	mov	r0, r7
  4026c0:	e75c      	b.n	40257c <_realloc_r+0x148>
  4026c2:	6833      	ldr	r3, [r6, #0]
  4026c4:	6003      	str	r3, [r0, #0]
  4026c6:	6873      	ldr	r3, [r6, #4]
  4026c8:	6043      	str	r3, [r0, #4]
  4026ca:	2a1b      	cmp	r2, #27
  4026cc:	d827      	bhi.n	40271e <_realloc_r+0x2ea>
  4026ce:	f100 0308 	add.w	r3, r0, #8
  4026d2:	f106 0208 	add.w	r2, r6, #8
  4026d6:	e6f2      	b.n	4024be <_realloc_r+0x8a>
  4026d8:	463b      	mov	r3, r7
  4026da:	6832      	ldr	r2, [r6, #0]
  4026dc:	601a      	str	r2, [r3, #0]
  4026de:	6872      	ldr	r2, [r6, #4]
  4026e0:	605a      	str	r2, [r3, #4]
  4026e2:	68b2      	ldr	r2, [r6, #8]
  4026e4:	609a      	str	r2, [r3, #8]
  4026e6:	463e      	mov	r6, r7
  4026e8:	4674      	mov	r4, lr
  4026ea:	46d0      	mov	r8, sl
  4026ec:	e733      	b.n	402556 <_realloc_r+0x122>
  4026ee:	eb08 0105 	add.w	r1, r8, r5
  4026f2:	ebc5 0b0b 	rsb	fp, r5, fp
  4026f6:	f04b 0201 	orr.w	r2, fp, #1
  4026fa:	6099      	str	r1, [r3, #8]
  4026fc:	604a      	str	r2, [r1, #4]
  4026fe:	f856 3c04 	ldr.w	r3, [r6, #-4]
  402702:	f003 0301 	and.w	r3, r3, #1
  402706:	431d      	orrs	r5, r3
  402708:	4648      	mov	r0, r9
  40270a:	f846 5c04 	str.w	r5, [r6, #-4]
  40270e:	f7ff fe8f 	bl	402430 <__malloc_unlock>
  402712:	4630      	mov	r0, r6
  402714:	e732      	b.n	40257c <_realloc_r+0x148>
  402716:	4631      	mov	r1, r6
  402718:	f7ff fe24 	bl	402364 <memmove>
  40271c:	e6d5      	b.n	4024ca <_realloc_r+0x96>
  40271e:	68b3      	ldr	r3, [r6, #8]
  402720:	6083      	str	r3, [r0, #8]
  402722:	68f3      	ldr	r3, [r6, #12]
  402724:	60c3      	str	r3, [r0, #12]
  402726:	2a24      	cmp	r2, #36	; 0x24
  402728:	d028      	beq.n	40277c <_realloc_r+0x348>
  40272a:	f100 0310 	add.w	r3, r0, #16
  40272e:	f106 0210 	add.w	r2, r6, #16
  402732:	e6c4      	b.n	4024be <_realloc_r+0x8a>
  402734:	f850 3c04 	ldr.w	r3, [r0, #-4]
  402738:	f023 0303 	bic.w	r3, r3, #3
  40273c:	441c      	add	r4, r3
  40273e:	e70a      	b.n	402556 <_realloc_r+0x122>
  402740:	4631      	mov	r1, r6
  402742:	4638      	mov	r0, r7
  402744:	4674      	mov	r4, lr
  402746:	46d0      	mov	r8, sl
  402748:	f7ff fe0c 	bl	402364 <memmove>
  40274c:	463e      	mov	r6, r7
  40274e:	e702      	b.n	402556 <_realloc_r+0x122>
  402750:	463a      	mov	r2, r7
  402752:	e6f7      	b.n	402544 <_realloc_r+0x110>
  402754:	4631      	mov	r1, r6
  402756:	4638      	mov	r0, r7
  402758:	461c      	mov	r4, r3
  40275a:	46d0      	mov	r8, sl
  40275c:	f7ff fe02 	bl	402364 <memmove>
  402760:	463e      	mov	r6, r7
  402762:	e6f8      	b.n	402556 <_realloc_r+0x122>
  402764:	68b3      	ldr	r3, [r6, #8]
  402766:	f8ca 3010 	str.w	r3, [sl, #16]
  40276a:	68f3      	ldr	r3, [r6, #12]
  40276c:	f8ca 3014 	str.w	r3, [sl, #20]
  402770:	2a24      	cmp	r2, #36	; 0x24
  402772:	d01b      	beq.n	4027ac <_realloc_r+0x378>
  402774:	3610      	adds	r6, #16
  402776:	f10a 0318 	add.w	r3, sl, #24
  40277a:	e7ae      	b.n	4026da <_realloc_r+0x2a6>
  40277c:	6933      	ldr	r3, [r6, #16]
  40277e:	6103      	str	r3, [r0, #16]
  402780:	6973      	ldr	r3, [r6, #20]
  402782:	6143      	str	r3, [r0, #20]
  402784:	f106 0218 	add.w	r2, r6, #24
  402788:	f100 0318 	add.w	r3, r0, #24
  40278c:	e697      	b.n	4024be <_realloc_r+0x8a>
  40278e:	bf00      	nop
  402790:	20000444 	.word	0x20000444
  402794:	68b1      	ldr	r1, [r6, #8]
  402796:	f8ca 1010 	str.w	r1, [sl, #16]
  40279a:	68f1      	ldr	r1, [r6, #12]
  40279c:	f8ca 1014 	str.w	r1, [sl, #20]
  4027a0:	2a24      	cmp	r2, #36	; 0x24
  4027a2:	d00f      	beq.n	4027c4 <_realloc_r+0x390>
  4027a4:	3610      	adds	r6, #16
  4027a6:	f10a 0218 	add.w	r2, sl, #24
  4027aa:	e6cb      	b.n	402544 <_realloc_r+0x110>
  4027ac:	6933      	ldr	r3, [r6, #16]
  4027ae:	f8ca 3018 	str.w	r3, [sl, #24]
  4027b2:	6973      	ldr	r3, [r6, #20]
  4027b4:	f8ca 301c 	str.w	r3, [sl, #28]
  4027b8:	3618      	adds	r6, #24
  4027ba:	f10a 0320 	add.w	r3, sl, #32
  4027be:	e78c      	b.n	4026da <_realloc_r+0x2a6>
  4027c0:	463a      	mov	r2, r7
  4027c2:	e764      	b.n	40268e <_realloc_r+0x25a>
  4027c4:	6932      	ldr	r2, [r6, #16]
  4027c6:	f8ca 2018 	str.w	r2, [sl, #24]
  4027ca:	6972      	ldr	r2, [r6, #20]
  4027cc:	f8ca 201c 	str.w	r2, [sl, #28]
  4027d0:	3618      	adds	r6, #24
  4027d2:	f10a 0220 	add.w	r2, sl, #32
  4027d6:	e6b5      	b.n	402544 <_realloc_r+0x110>
  4027d8:	4631      	mov	r1, r6
  4027da:	4638      	mov	r0, r7
  4027dc:	9301      	str	r3, [sp, #4]
  4027de:	f7ff fdc1 	bl	402364 <memmove>
  4027e2:	9b01      	ldr	r3, [sp, #4]
  4027e4:	e759      	b.n	40269a <_realloc_r+0x266>
  4027e6:	68b1      	ldr	r1, [r6, #8]
  4027e8:	f8ca 1010 	str.w	r1, [sl, #16]
  4027ec:	68f1      	ldr	r1, [r6, #12]
  4027ee:	f8ca 1014 	str.w	r1, [sl, #20]
  4027f2:	2a24      	cmp	r2, #36	; 0x24
  4027f4:	d003      	beq.n	4027fe <_realloc_r+0x3ca>
  4027f6:	3610      	adds	r6, #16
  4027f8:	f10a 0218 	add.w	r2, sl, #24
  4027fc:	e747      	b.n	40268e <_realloc_r+0x25a>
  4027fe:	6932      	ldr	r2, [r6, #16]
  402800:	f8ca 2018 	str.w	r2, [sl, #24]
  402804:	6972      	ldr	r2, [r6, #20]
  402806:	f8ca 201c 	str.w	r2, [sl, #28]
  40280a:	3618      	adds	r6, #24
  40280c:	f10a 0220 	add.w	r2, sl, #32
  402810:	e73d      	b.n	40268e <_realloc_r+0x25a>
  402812:	bf00      	nop

00402814 <lflush>:
  402814:	8983      	ldrh	r3, [r0, #12]
  402816:	f003 0309 	and.w	r3, r3, #9
  40281a:	2b09      	cmp	r3, #9
  40281c:	d001      	beq.n	402822 <lflush+0xe>
  40281e:	2000      	movs	r0, #0
  402820:	4770      	bx	lr
  402822:	f7fe bdc5 	b.w	4013b0 <fflush>
  402826:	bf00      	nop

00402828 <__srefill_r>:
  402828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40282a:	460c      	mov	r4, r1
  40282c:	4605      	mov	r5, r0
  40282e:	b110      	cbz	r0, 402836 <__srefill_r+0xe>
  402830:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402832:	2b00      	cmp	r3, #0
  402834:	d045      	beq.n	4028c2 <__srefill_r+0x9a>
  402836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40283a:	b29a      	uxth	r2, r3
  40283c:	0497      	lsls	r7, r2, #18
  40283e:	d407      	bmi.n	402850 <__srefill_r+0x28>
  402840:	6e62      	ldr	r2, [r4, #100]	; 0x64
  402842:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  402846:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  40284a:	6662      	str	r2, [r4, #100]	; 0x64
  40284c:	81a3      	strh	r3, [r4, #12]
  40284e:	b29a      	uxth	r2, r3
  402850:	2100      	movs	r1, #0
  402852:	0696      	lsls	r6, r2, #26
  402854:	6061      	str	r1, [r4, #4]
  402856:	d431      	bmi.n	4028bc <__srefill_r+0x94>
  402858:	0750      	lsls	r0, r2, #29
  40285a:	d522      	bpl.n	4028a2 <__srefill_r+0x7a>
  40285c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40285e:	b161      	cbz	r1, 40287a <__srefill_r+0x52>
  402860:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402864:	4299      	cmp	r1, r3
  402866:	d002      	beq.n	40286e <__srefill_r+0x46>
  402868:	4628      	mov	r0, r5
  40286a:	f7fe fe9d 	bl	4015a8 <_free_r>
  40286e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402870:	6063      	str	r3, [r4, #4]
  402872:	2000      	movs	r0, #0
  402874:	6320      	str	r0, [r4, #48]	; 0x30
  402876:	2b00      	cmp	r3, #0
  402878:	d13f      	bne.n	4028fa <__srefill_r+0xd2>
  40287a:	6923      	ldr	r3, [r4, #16]
  40287c:	2b00      	cmp	r3, #0
  40287e:	d04c      	beq.n	40291a <__srefill_r+0xf2>
  402880:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
  402884:	b2be      	uxth	r6, r7
  402886:	07b3      	lsls	r3, r6, #30
  402888:	d11e      	bne.n	4028c8 <__srefill_r+0xa0>
  40288a:	6922      	ldr	r2, [r4, #16]
  40288c:	6022      	str	r2, [r4, #0]
  40288e:	4628      	mov	r0, r5
  402890:	6963      	ldr	r3, [r4, #20]
  402892:	6a25      	ldr	r5, [r4, #32]
  402894:	69e1      	ldr	r1, [r4, #28]
  402896:	47a8      	blx	r5
  402898:	2800      	cmp	r0, #0
  40289a:	6060      	str	r0, [r4, #4]
  40289c:	dd09      	ble.n	4028b2 <__srefill_r+0x8a>
  40289e:	2000      	movs	r0, #0
  4028a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4028a2:	06d1      	lsls	r1, r2, #27
  4028a4:	d53e      	bpl.n	402924 <__srefill_r+0xfc>
  4028a6:	0712      	lsls	r2, r2, #28
  4028a8:	d42a      	bmi.n	402900 <__srefill_r+0xd8>
  4028aa:	f043 0304 	orr.w	r3, r3, #4
  4028ae:	81a3      	strh	r3, [r4, #12]
  4028b0:	e7e3      	b.n	40287a <__srefill_r+0x52>
  4028b2:	89a3      	ldrh	r3, [r4, #12]
  4028b4:	d119      	bne.n	4028ea <__srefill_r+0xc2>
  4028b6:	f043 0320 	orr.w	r3, r3, #32
  4028ba:	81a3      	strh	r3, [r4, #12]
  4028bc:	f04f 30ff 	mov.w	r0, #4294967295
  4028c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4028c2:	f7fe fe05 	bl	4014d0 <__sinit>
  4028c6:	e7b6      	b.n	402836 <__srefill_r+0xe>
  4028c8:	4b1a      	ldr	r3, [pc, #104]	; (402934 <__srefill_r+0x10c>)
  4028ca:	491b      	ldr	r1, [pc, #108]	; (402938 <__srefill_r+0x110>)
  4028cc:	6818      	ldr	r0, [r3, #0]
  4028ce:	2301      	movs	r3, #1
  4028d0:	81a3      	strh	r3, [r4, #12]
  4028d2:	f006 0609 	and.w	r6, r6, #9
  4028d6:	f7ff f8d1 	bl	401a7c <_fwalk>
  4028da:	2e09      	cmp	r6, #9
  4028dc:	81a7      	strh	r7, [r4, #12]
  4028de:	d1d4      	bne.n	40288a <__srefill_r+0x62>
  4028e0:	4621      	mov	r1, r4
  4028e2:	4628      	mov	r0, r5
  4028e4:	f7fe fcaa 	bl	40123c <__sflush_r>
  4028e8:	e7cf      	b.n	40288a <__srefill_r+0x62>
  4028ea:	2200      	movs	r2, #0
  4028ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4028f0:	81a3      	strh	r3, [r4, #12]
  4028f2:	6062      	str	r2, [r4, #4]
  4028f4:	f04f 30ff 	mov.w	r0, #4294967295
  4028f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4028fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4028fc:	6023      	str	r3, [r4, #0]
  4028fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402900:	4621      	mov	r1, r4
  402902:	4628      	mov	r0, r5
  402904:	f7fe fd3e 	bl	401384 <_fflush_r>
  402908:	2800      	cmp	r0, #0
  40290a:	d1d7      	bne.n	4028bc <__srefill_r+0x94>
  40290c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402910:	60a0      	str	r0, [r4, #8]
  402912:	61a0      	str	r0, [r4, #24]
  402914:	f023 0308 	bic.w	r3, r3, #8
  402918:	e7c7      	b.n	4028aa <__srefill_r+0x82>
  40291a:	4621      	mov	r1, r4
  40291c:	4628      	mov	r0, r5
  40291e:	f7ff f92d 	bl	401b7c <__smakebuf_r>
  402922:	e7ad      	b.n	402880 <__srefill_r+0x58>
  402924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402928:	2209      	movs	r2, #9
  40292a:	602a      	str	r2, [r5, #0]
  40292c:	f04f 30ff 	mov.w	r0, #4294967295
  402930:	81a3      	strh	r3, [r4, #12]
  402932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  402934:	00402cdc 	.word	0x00402cdc
  402938:	00402815 	.word	0x00402815

0040293c <_sbrk_r>:
  40293c:	b538      	push	{r3, r4, r5, lr}
  40293e:	4c07      	ldr	r4, [pc, #28]	; (40295c <_sbrk_r+0x20>)
  402940:	2300      	movs	r3, #0
  402942:	4605      	mov	r5, r0
  402944:	4608      	mov	r0, r1
  402946:	6023      	str	r3, [r4, #0]
  402948:	f7fe f8f4 	bl	400b34 <_sbrk>
  40294c:	1c43      	adds	r3, r0, #1
  40294e:	d000      	beq.n	402952 <_sbrk_r+0x16>
  402950:	bd38      	pop	{r3, r4, r5, pc}
  402952:	6823      	ldr	r3, [r4, #0]
  402954:	2b00      	cmp	r3, #0
  402956:	d0fb      	beq.n	402950 <_sbrk_r+0x14>
  402958:	602b      	str	r3, [r5, #0]
  40295a:	bd38      	pop	{r3, r4, r5, pc}
  40295c:	2000092c 	.word	0x2000092c

00402960 <__sread>:
  402960:	b510      	push	{r4, lr}
  402962:	460c      	mov	r4, r1
  402964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  402968:	f000 f99a 	bl	402ca0 <_read_r>
  40296c:	2800      	cmp	r0, #0
  40296e:	db03      	blt.n	402978 <__sread+0x18>
  402970:	6d23      	ldr	r3, [r4, #80]	; 0x50
  402972:	4403      	add	r3, r0
  402974:	6523      	str	r3, [r4, #80]	; 0x50
  402976:	bd10      	pop	{r4, pc}
  402978:	89a3      	ldrh	r3, [r4, #12]
  40297a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  40297e:	81a3      	strh	r3, [r4, #12]
  402980:	bd10      	pop	{r4, pc}
  402982:	bf00      	nop

00402984 <__swrite>:
  402984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402988:	4616      	mov	r6, r2
  40298a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  40298e:	461f      	mov	r7, r3
  402990:	05d3      	lsls	r3, r2, #23
  402992:	460c      	mov	r4, r1
  402994:	4605      	mov	r5, r0
  402996:	d507      	bpl.n	4029a8 <__swrite+0x24>
  402998:	2200      	movs	r2, #0
  40299a:	2302      	movs	r3, #2
  40299c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4029a0:	f000 f968 	bl	402c74 <_lseek_r>
  4029a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4029a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4029ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  4029b0:	81a2      	strh	r2, [r4, #12]
  4029b2:	463b      	mov	r3, r7
  4029b4:	4632      	mov	r2, r6
  4029b6:	4628      	mov	r0, r5
  4029b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4029bc:	f000 b814 	b.w	4029e8 <_write_r>

004029c0 <__sseek>:
  4029c0:	b510      	push	{r4, lr}
  4029c2:	460c      	mov	r4, r1
  4029c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4029c8:	f000 f954 	bl	402c74 <_lseek_r>
  4029cc:	89a3      	ldrh	r3, [r4, #12]
  4029ce:	1c42      	adds	r2, r0, #1
  4029d0:	bf0e      	itee	eq
  4029d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  4029d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  4029da:	6520      	strne	r0, [r4, #80]	; 0x50
  4029dc:	81a3      	strh	r3, [r4, #12]
  4029de:	bd10      	pop	{r4, pc}

004029e0 <__sclose>:
  4029e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4029e4:	f000 b8cc 	b.w	402b80 <_close_r>

004029e8 <_write_r>:
  4029e8:	b570      	push	{r4, r5, r6, lr}
  4029ea:	460d      	mov	r5, r1
  4029ec:	4c08      	ldr	r4, [pc, #32]	; (402a10 <_write_r+0x28>)
  4029ee:	4611      	mov	r1, r2
  4029f0:	4606      	mov	r6, r0
  4029f2:	461a      	mov	r2, r3
  4029f4:	4628      	mov	r0, r5
  4029f6:	2300      	movs	r3, #0
  4029f8:	6023      	str	r3, [r4, #0]
  4029fa:	f7fd fbc9 	bl	400190 <_write>
  4029fe:	1c43      	adds	r3, r0, #1
  402a00:	d000      	beq.n	402a04 <_write_r+0x1c>
  402a02:	bd70      	pop	{r4, r5, r6, pc}
  402a04:	6823      	ldr	r3, [r4, #0]
  402a06:	2b00      	cmp	r3, #0
  402a08:	d0fb      	beq.n	402a02 <_write_r+0x1a>
  402a0a:	6033      	str	r3, [r6, #0]
  402a0c:	bd70      	pop	{r4, r5, r6, pc}
  402a0e:	bf00      	nop
  402a10:	2000092c 	.word	0x2000092c

00402a14 <__swsetup_r>:
  402a14:	b538      	push	{r3, r4, r5, lr}
  402a16:	4b30      	ldr	r3, [pc, #192]	; (402ad8 <__swsetup_r+0xc4>)
  402a18:	681b      	ldr	r3, [r3, #0]
  402a1a:	4605      	mov	r5, r0
  402a1c:	460c      	mov	r4, r1
  402a1e:	b113      	cbz	r3, 402a26 <__swsetup_r+0x12>
  402a20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  402a22:	2a00      	cmp	r2, #0
  402a24:	d038      	beq.n	402a98 <__swsetup_r+0x84>
  402a26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402a2a:	b293      	uxth	r3, r2
  402a2c:	0718      	lsls	r0, r3, #28
  402a2e:	d50c      	bpl.n	402a4a <__swsetup_r+0x36>
  402a30:	6920      	ldr	r0, [r4, #16]
  402a32:	b1a8      	cbz	r0, 402a60 <__swsetup_r+0x4c>
  402a34:	f013 0201 	ands.w	r2, r3, #1
  402a38:	d01e      	beq.n	402a78 <__swsetup_r+0x64>
  402a3a:	6963      	ldr	r3, [r4, #20]
  402a3c:	2200      	movs	r2, #0
  402a3e:	425b      	negs	r3, r3
  402a40:	61a3      	str	r3, [r4, #24]
  402a42:	60a2      	str	r2, [r4, #8]
  402a44:	b1f0      	cbz	r0, 402a84 <__swsetup_r+0x70>
  402a46:	2000      	movs	r0, #0
  402a48:	bd38      	pop	{r3, r4, r5, pc}
  402a4a:	06d9      	lsls	r1, r3, #27
  402a4c:	d53c      	bpl.n	402ac8 <__swsetup_r+0xb4>
  402a4e:	0758      	lsls	r0, r3, #29
  402a50:	d426      	bmi.n	402aa0 <__swsetup_r+0x8c>
  402a52:	6920      	ldr	r0, [r4, #16]
  402a54:	f042 0308 	orr.w	r3, r2, #8
  402a58:	81a3      	strh	r3, [r4, #12]
  402a5a:	b29b      	uxth	r3, r3
  402a5c:	2800      	cmp	r0, #0
  402a5e:	d1e9      	bne.n	402a34 <__swsetup_r+0x20>
  402a60:	f403 7220 	and.w	r2, r3, #640	; 0x280
  402a64:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  402a68:	d0e4      	beq.n	402a34 <__swsetup_r+0x20>
  402a6a:	4628      	mov	r0, r5
  402a6c:	4621      	mov	r1, r4
  402a6e:	f7ff f885 	bl	401b7c <__smakebuf_r>
  402a72:	89a3      	ldrh	r3, [r4, #12]
  402a74:	6920      	ldr	r0, [r4, #16]
  402a76:	e7dd      	b.n	402a34 <__swsetup_r+0x20>
  402a78:	0799      	lsls	r1, r3, #30
  402a7a:	bf58      	it	pl
  402a7c:	6962      	ldrpl	r2, [r4, #20]
  402a7e:	60a2      	str	r2, [r4, #8]
  402a80:	2800      	cmp	r0, #0
  402a82:	d1e0      	bne.n	402a46 <__swsetup_r+0x32>
  402a84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402a88:	061a      	lsls	r2, r3, #24
  402a8a:	d5dd      	bpl.n	402a48 <__swsetup_r+0x34>
  402a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  402a90:	81a3      	strh	r3, [r4, #12]
  402a92:	f04f 30ff 	mov.w	r0, #4294967295
  402a96:	bd38      	pop	{r3, r4, r5, pc}
  402a98:	4618      	mov	r0, r3
  402a9a:	f7fe fd19 	bl	4014d0 <__sinit>
  402a9e:	e7c2      	b.n	402a26 <__swsetup_r+0x12>
  402aa0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402aa2:	b151      	cbz	r1, 402aba <__swsetup_r+0xa6>
  402aa4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402aa8:	4299      	cmp	r1, r3
  402aaa:	d004      	beq.n	402ab6 <__swsetup_r+0xa2>
  402aac:	4628      	mov	r0, r5
  402aae:	f7fe fd7b 	bl	4015a8 <_free_r>
  402ab2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402ab6:	2300      	movs	r3, #0
  402ab8:	6323      	str	r3, [r4, #48]	; 0x30
  402aba:	2300      	movs	r3, #0
  402abc:	6920      	ldr	r0, [r4, #16]
  402abe:	6063      	str	r3, [r4, #4]
  402ac0:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  402ac4:	6020      	str	r0, [r4, #0]
  402ac6:	e7c5      	b.n	402a54 <__swsetup_r+0x40>
  402ac8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  402acc:	2309      	movs	r3, #9
  402ace:	602b      	str	r3, [r5, #0]
  402ad0:	f04f 30ff 	mov.w	r0, #4294967295
  402ad4:	81a2      	strh	r2, [r4, #12]
  402ad6:	bd38      	pop	{r3, r4, r5, pc}
  402ad8:	20000440 	.word	0x20000440

00402adc <__register_exitproc>:
  402adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402ae0:	4c25      	ldr	r4, [pc, #148]	; (402b78 <__register_exitproc+0x9c>)
  402ae2:	6825      	ldr	r5, [r4, #0]
  402ae4:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  402ae8:	4606      	mov	r6, r0
  402aea:	4688      	mov	r8, r1
  402aec:	4692      	mov	sl, r2
  402aee:	4699      	mov	r9, r3
  402af0:	b3c4      	cbz	r4, 402b64 <__register_exitproc+0x88>
  402af2:	6860      	ldr	r0, [r4, #4]
  402af4:	281f      	cmp	r0, #31
  402af6:	dc17      	bgt.n	402b28 <__register_exitproc+0x4c>
  402af8:	1c43      	adds	r3, r0, #1
  402afa:	b176      	cbz	r6, 402b1a <__register_exitproc+0x3e>
  402afc:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  402b00:	2201      	movs	r2, #1
  402b02:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  402b06:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  402b0a:	4082      	lsls	r2, r0
  402b0c:	4311      	orrs	r1, r2
  402b0e:	2e02      	cmp	r6, #2
  402b10:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  402b14:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  402b18:	d01e      	beq.n	402b58 <__register_exitproc+0x7c>
  402b1a:	3002      	adds	r0, #2
  402b1c:	6063      	str	r3, [r4, #4]
  402b1e:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  402b22:	2000      	movs	r0, #0
  402b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402b28:	4b14      	ldr	r3, [pc, #80]	; (402b7c <__register_exitproc+0xa0>)
  402b2a:	b303      	cbz	r3, 402b6e <__register_exitproc+0x92>
  402b2c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402b30:	f7ff f868 	bl	401c04 <malloc>
  402b34:	4604      	mov	r4, r0
  402b36:	b1d0      	cbz	r0, 402b6e <__register_exitproc+0x92>
  402b38:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  402b3c:	2700      	movs	r7, #0
  402b3e:	e880 0088 	stmia.w	r0, {r3, r7}
  402b42:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402b46:	4638      	mov	r0, r7
  402b48:	2301      	movs	r3, #1
  402b4a:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  402b4e:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  402b52:	2e00      	cmp	r6, #0
  402b54:	d0e1      	beq.n	402b1a <__register_exitproc+0x3e>
  402b56:	e7d1      	b.n	402afc <__register_exitproc+0x20>
  402b58:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  402b5c:	430a      	orrs	r2, r1
  402b5e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  402b62:	e7da      	b.n	402b1a <__register_exitproc+0x3e>
  402b64:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  402b68:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402b6c:	e7c1      	b.n	402af2 <__register_exitproc+0x16>
  402b6e:	f04f 30ff 	mov.w	r0, #4294967295
  402b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402b76:	bf00      	nop
  402b78:	00402cdc 	.word	0x00402cdc
  402b7c:	00401c05 	.word	0x00401c05

00402b80 <_close_r>:
  402b80:	b538      	push	{r3, r4, r5, lr}
  402b82:	4c07      	ldr	r4, [pc, #28]	; (402ba0 <_close_r+0x20>)
  402b84:	2300      	movs	r3, #0
  402b86:	4605      	mov	r5, r0
  402b88:	4608      	mov	r0, r1
  402b8a:	6023      	str	r3, [r4, #0]
  402b8c:	f7fd ffec 	bl	400b68 <_close>
  402b90:	1c43      	adds	r3, r0, #1
  402b92:	d000      	beq.n	402b96 <_close_r+0x16>
  402b94:	bd38      	pop	{r3, r4, r5, pc}
  402b96:	6823      	ldr	r3, [r4, #0]
  402b98:	2b00      	cmp	r3, #0
  402b9a:	d0fb      	beq.n	402b94 <_close_r+0x14>
  402b9c:	602b      	str	r3, [r5, #0]
  402b9e:	bd38      	pop	{r3, r4, r5, pc}
  402ba0:	2000092c 	.word	0x2000092c

00402ba4 <_fclose_r>:
  402ba4:	2900      	cmp	r1, #0
  402ba6:	d03d      	beq.n	402c24 <_fclose_r+0x80>
  402ba8:	b570      	push	{r4, r5, r6, lr}
  402baa:	4605      	mov	r5, r0
  402bac:	460c      	mov	r4, r1
  402bae:	b108      	cbz	r0, 402bb4 <_fclose_r+0x10>
  402bb0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402bb2:	b37b      	cbz	r3, 402c14 <_fclose_r+0x70>
  402bb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  402bb8:	b90b      	cbnz	r3, 402bbe <_fclose_r+0x1a>
  402bba:	2000      	movs	r0, #0
  402bbc:	bd70      	pop	{r4, r5, r6, pc}
  402bbe:	4621      	mov	r1, r4
  402bc0:	4628      	mov	r0, r5
  402bc2:	f7fe fb3b 	bl	40123c <__sflush_r>
  402bc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402bc8:	4606      	mov	r6, r0
  402bca:	b133      	cbz	r3, 402bda <_fclose_r+0x36>
  402bcc:	69e1      	ldr	r1, [r4, #28]
  402bce:	4628      	mov	r0, r5
  402bd0:	4798      	blx	r3
  402bd2:	2800      	cmp	r0, #0
  402bd4:	bfb8      	it	lt
  402bd6:	f04f 36ff 	movlt.w	r6, #4294967295
  402bda:	89a3      	ldrh	r3, [r4, #12]
  402bdc:	061b      	lsls	r3, r3, #24
  402bde:	d41c      	bmi.n	402c1a <_fclose_r+0x76>
  402be0:	6b21      	ldr	r1, [r4, #48]	; 0x30
  402be2:	b141      	cbz	r1, 402bf6 <_fclose_r+0x52>
  402be4:	f104 0340 	add.w	r3, r4, #64	; 0x40
  402be8:	4299      	cmp	r1, r3
  402bea:	d002      	beq.n	402bf2 <_fclose_r+0x4e>
  402bec:	4628      	mov	r0, r5
  402bee:	f7fe fcdb 	bl	4015a8 <_free_r>
  402bf2:	2300      	movs	r3, #0
  402bf4:	6323      	str	r3, [r4, #48]	; 0x30
  402bf6:	6c61      	ldr	r1, [r4, #68]	; 0x44
  402bf8:	b121      	cbz	r1, 402c04 <_fclose_r+0x60>
  402bfa:	4628      	mov	r0, r5
  402bfc:	f7fe fcd4 	bl	4015a8 <_free_r>
  402c00:	2300      	movs	r3, #0
  402c02:	6463      	str	r3, [r4, #68]	; 0x44
  402c04:	f7fe fc6a 	bl	4014dc <__sfp_lock_acquire>
  402c08:	2300      	movs	r3, #0
  402c0a:	81a3      	strh	r3, [r4, #12]
  402c0c:	f7fe fc68 	bl	4014e0 <__sfp_lock_release>
  402c10:	4630      	mov	r0, r6
  402c12:	bd70      	pop	{r4, r5, r6, pc}
  402c14:	f7fe fc5c 	bl	4014d0 <__sinit>
  402c18:	e7cc      	b.n	402bb4 <_fclose_r+0x10>
  402c1a:	6921      	ldr	r1, [r4, #16]
  402c1c:	4628      	mov	r0, r5
  402c1e:	f7fe fcc3 	bl	4015a8 <_free_r>
  402c22:	e7dd      	b.n	402be0 <_fclose_r+0x3c>
  402c24:	2000      	movs	r0, #0
  402c26:	4770      	bx	lr

00402c28 <_fstat_r>:
  402c28:	b538      	push	{r3, r4, r5, lr}
  402c2a:	460b      	mov	r3, r1
  402c2c:	4c07      	ldr	r4, [pc, #28]	; (402c4c <_fstat_r+0x24>)
  402c2e:	4605      	mov	r5, r0
  402c30:	4611      	mov	r1, r2
  402c32:	4618      	mov	r0, r3
  402c34:	2300      	movs	r3, #0
  402c36:	6023      	str	r3, [r4, #0]
  402c38:	f7fd ff9a 	bl	400b70 <_fstat>
  402c3c:	1c43      	adds	r3, r0, #1
  402c3e:	d000      	beq.n	402c42 <_fstat_r+0x1a>
  402c40:	bd38      	pop	{r3, r4, r5, pc}
  402c42:	6823      	ldr	r3, [r4, #0]
  402c44:	2b00      	cmp	r3, #0
  402c46:	d0fb      	beq.n	402c40 <_fstat_r+0x18>
  402c48:	602b      	str	r3, [r5, #0]
  402c4a:	bd38      	pop	{r3, r4, r5, pc}
  402c4c:	2000092c 	.word	0x2000092c

00402c50 <_isatty_r>:
  402c50:	b538      	push	{r3, r4, r5, lr}
  402c52:	4c07      	ldr	r4, [pc, #28]	; (402c70 <_isatty_r+0x20>)
  402c54:	2300      	movs	r3, #0
  402c56:	4605      	mov	r5, r0
  402c58:	4608      	mov	r0, r1
  402c5a:	6023      	str	r3, [r4, #0]
  402c5c:	f7fd ff8e 	bl	400b7c <_isatty>
  402c60:	1c43      	adds	r3, r0, #1
  402c62:	d000      	beq.n	402c66 <_isatty_r+0x16>
  402c64:	bd38      	pop	{r3, r4, r5, pc}
  402c66:	6823      	ldr	r3, [r4, #0]
  402c68:	2b00      	cmp	r3, #0
  402c6a:	d0fb      	beq.n	402c64 <_isatty_r+0x14>
  402c6c:	602b      	str	r3, [r5, #0]
  402c6e:	bd38      	pop	{r3, r4, r5, pc}
  402c70:	2000092c 	.word	0x2000092c

00402c74 <_lseek_r>:
  402c74:	b570      	push	{r4, r5, r6, lr}
  402c76:	460d      	mov	r5, r1
  402c78:	4c08      	ldr	r4, [pc, #32]	; (402c9c <_lseek_r+0x28>)
  402c7a:	4611      	mov	r1, r2
  402c7c:	4606      	mov	r6, r0
  402c7e:	461a      	mov	r2, r3
  402c80:	4628      	mov	r0, r5
  402c82:	2300      	movs	r3, #0
  402c84:	6023      	str	r3, [r4, #0]
  402c86:	f7fd ff7b 	bl	400b80 <_lseek>
  402c8a:	1c43      	adds	r3, r0, #1
  402c8c:	d000      	beq.n	402c90 <_lseek_r+0x1c>
  402c8e:	bd70      	pop	{r4, r5, r6, pc}
  402c90:	6823      	ldr	r3, [r4, #0]
  402c92:	2b00      	cmp	r3, #0
  402c94:	d0fb      	beq.n	402c8e <_lseek_r+0x1a>
  402c96:	6033      	str	r3, [r6, #0]
  402c98:	bd70      	pop	{r4, r5, r6, pc}
  402c9a:	bf00      	nop
  402c9c:	2000092c 	.word	0x2000092c

00402ca0 <_read_r>:
  402ca0:	b570      	push	{r4, r5, r6, lr}
  402ca2:	460d      	mov	r5, r1
  402ca4:	4c08      	ldr	r4, [pc, #32]	; (402cc8 <_read_r+0x28>)
  402ca6:	4611      	mov	r1, r2
  402ca8:	4606      	mov	r6, r0
  402caa:	461a      	mov	r2, r3
  402cac:	4628      	mov	r0, r5
  402cae:	2300      	movs	r3, #0
  402cb0:	6023      	str	r3, [r4, #0]
  402cb2:	f7fd fa39 	bl	400128 <_read>
  402cb6:	1c43      	adds	r3, r0, #1
  402cb8:	d000      	beq.n	402cbc <_read_r+0x1c>
  402cba:	bd70      	pop	{r4, r5, r6, pc}
  402cbc:	6823      	ldr	r3, [r4, #0]
  402cbe:	2b00      	cmp	r3, #0
  402cc0:	d0fb      	beq.n	402cba <_read_r+0x1a>
  402cc2:	6033      	str	r3, [r6, #0]
  402cc4:	bd70      	pop	{r4, r5, r6, pc}
  402cc6:	bf00      	nop
  402cc8:	2000092c 	.word	0x2000092c
  402ccc:	52525542 	.word	0x52525542
  402cd0:	2121214f 	.word	0x2121214f
  402cd4:	0000000d 	.word	0x0000000d
  402cd8:	00000043 	.word	0x00000043

00402cdc <_global_impure_ptr>:
  402cdc:	20000018 0000000a                       ... ....

00402ce4 <_init>:
  402ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402ce6:	bf00      	nop
  402ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402cea:	bc08      	pop	{r3}
  402cec:	469e      	mov	lr, r3
  402cee:	4770      	bx	lr

00402cf0 <__init_array_start>:
  402cf0:	0040121d 	.word	0x0040121d

00402cf4 <__frame_dummy_init_array_entry>:
  402cf4:	004000f1                                ..@.

00402cf8 <_fini>:
  402cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402cfa:	bf00      	nop
  402cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402cfe:	bc08      	pop	{r3}
  402d00:	469e      	mov	lr, r3
  402d02:	4770      	bx	lr

00402d04 <__fini_array_start>:
  402d04:	004000cd 	.word	0x004000cd
