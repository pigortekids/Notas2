
PWN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010d8  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  004010d8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e0  20000434  0040150c  00020434  2**2
                  ALLOC
  3 .stack        00003004  20000514  004015ec  00020434  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002045e  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001039b  00000000  00000000  000204b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000020f9  00000000  00000000  00030852  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004014  00000000  00000000  0003294b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008e8  00000000  00000000  0003695f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000858  00000000  00000000  00037247  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000132da  00000000  00000000  00037a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000974e  00000000  00000000  0004ad79  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005377c  00000000  00000000  000544c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001440  00000000  00000000  000a7c44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	18 35 00 20 a5 0a 40 00 a1 0a 40 00 a1 0a 40 00     .5. ..@...@...@.
  400010:	a1 0a 40 00 a1 0a 40 00 a1 0a 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	a1 0a 40 00 a1 0a 40 00 00 00 00 00 a1 0a 40 00     ..@...@.......@.
  40003c:	a1 0a 40 00 a1 0a 40 00 a1 0a 40 00 a1 0a 40 00     ..@...@...@...@.
  40004c:	a1 0a 40 00 a1 0a 40 00 a1 0a 40 00 a1 0a 40 00     ..@...@...@...@.
  40005c:	a1 0a 40 00 a1 0a 40 00 a1 0a 40 00 00 00 00 00     ..@...@...@.....
  40006c:	29 09 40 00 3d 09 40 00 51 09 40 00 a1 0a 40 00     ).@.=.@.Q.@...@.
  40007c:	a1 0a 40 00 00 00 00 00 00 00 00 00 a1 0a 40 00     ..@...........@.
  40008c:	a1 0a 40 00 a1 0a 40 00 a1 0a 40 00 a1 0a 40 00     ..@...@...@...@.
  40009c:	05 0e 40 00 a1 0a 40 00 a1 0a 40 00 a1 0a 40 00     ..@...@...@...@.
  4000ac:	a1 0a 40 00 a1 0a 40 00 29 0e 40 00 a1 0a 40 00     ..@...@.).@...@.
  4000bc:	a1 0a 40 00 a1 0a 40 00 a1 0a 40 00 a1 0a 40 00     ..@...@...@...@.

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000434 	.word	0x20000434
  4000e8:	00000000 	.word	0x00000000
  4000ec:	004010d8 	.word	0x004010d8

004000f0 <frame_dummy>:
  4000f0:	4b0c      	ldr	r3, [pc, #48]	; (400124 <frame_dummy+0x34>)
  4000f2:	b143      	cbz	r3, 400106 <frame_dummy+0x16>
  4000f4:	480c      	ldr	r0, [pc, #48]	; (400128 <frame_dummy+0x38>)
  4000f6:	490d      	ldr	r1, [pc, #52]	; (40012c <frame_dummy+0x3c>)
  4000f8:	b510      	push	{r4, lr}
  4000fa:	f3af 8000 	nop.w
  4000fe:	480c      	ldr	r0, [pc, #48]	; (400130 <frame_dummy+0x40>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b923      	cbnz	r3, 40010e <frame_dummy+0x1e>
  400104:	bd10      	pop	{r4, pc}
  400106:	480a      	ldr	r0, [pc, #40]	; (400130 <frame_dummy+0x40>)
  400108:	6803      	ldr	r3, [r0, #0]
  40010a:	b933      	cbnz	r3, 40011a <frame_dummy+0x2a>
  40010c:	4770      	bx	lr
  40010e:	4b09      	ldr	r3, [pc, #36]	; (400134 <frame_dummy+0x44>)
  400110:	2b00      	cmp	r3, #0
  400112:	d0f7      	beq.n	400104 <frame_dummy+0x14>
  400114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400118:	4718      	bx	r3
  40011a:	4b06      	ldr	r3, [pc, #24]	; (400134 <frame_dummy+0x44>)
  40011c:	2b00      	cmp	r3, #0
  40011e:	d0f5      	beq.n	40010c <frame_dummy+0x1c>
  400120:	4718      	bx	r3
  400122:	bf00      	nop
  400124:	00000000 	.word	0x00000000
  400128:	004010d8 	.word	0x004010d8
  40012c:	20000438 	.word	0x20000438
  400130:	004010d8 	.word	0x004010d8
  400134:	00000000 	.word	0x00000000

00400138 <adc_init>:
 *
 * \return 0 on success.
 */
uint32_t adc_init(Adc *p_adc, const uint32_t ul_mck,
		const uint32_t ul_adc_clock, const enum adc_startup_time startup)
{
  400138:	b430      	push	{r4, r5}
	uint32_t ul_prescal;

	/*  Reset the controller. */
	p_adc->ADC_CR = ADC_CR_SWRST;
  40013a:	2401      	movs	r4, #1
  40013c:	6004      	str	r4, [r0, #0]

	/* Reset Mode Register. */
	p_adc->ADC_MR = 0;
  40013e:	2400      	movs	r4, #0
  400140:	6044      	str	r4, [r0, #4]

	/* Reset PDC transfer. */
	p_adc->ADC_PTCR = (ADC_PTCR_RXTDIS | ADC_PTCR_TXTDIS);
  400142:	f240 2502 	movw	r5, #514	; 0x202
  400146:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
	p_adc->ADC_RCR = 0;
  40014a:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
	p_adc->ADC_RNCR = 0;
  40014e:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114

	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  400152:	6845      	ldr	r5, [r0, #4]
	ul_prescal = ul_mck / (2 * ul_adc_clock) - 1;
  400154:	0052      	lsls	r2, r2, #1
  400156:	fbb1 f2f2 	udiv	r2, r1, r2
  40015a:	3a01      	subs	r2, #1
	p_adc->ADC_MR |= ADC_MR_PRESCAL(ul_prescal) | startup;
  40015c:	0212      	lsls	r2, r2, #8
  40015e:	b292      	uxth	r2, r2
  400160:	432b      	orrs	r3, r5
  400162:	431a      	orrs	r2, r3
  400164:	6042      	str	r2, [r0, #4]
	return 0;
}
  400166:	4620      	mov	r0, r4
  400168:	bc30      	pop	{r4, r5}
  40016a:	4770      	bx	lr

0040016c <adc_configure_trigger>:
 *
 */
void adc_configure_trigger(Adc *p_adc, const enum adc_trigger_t trigger,
		uint8_t uc_freerun)
{
	p_adc->ADC_MR |= trigger | ((uc_freerun << 7) & ADC_MR_FREERUN);
  40016c:	6843      	ldr	r3, [r0, #4]
  40016e:	01d2      	lsls	r2, r2, #7
  400170:	b2d2      	uxtb	r2, r2
  400172:	4319      	orrs	r1, r3
  400174:	430a      	orrs	r2, r1
  400176:	6042      	str	r2, [r0, #4]
  400178:	4770      	bx	lr

0040017a <adc_configure_timing>:
 * \param uc_settling Analog settling time = (uc_settling + 1) / ADC clock.
 * \param uc_transfer Data transfer time = (uc_transfer * 2 + 3) / ADC clock.
 */
void adc_configure_timing(Adc *p_adc, const uint8_t uc_tracking,
		const enum adc_settling_time_t settling,const uint8_t uc_transfer)
{
  40017a:	b410      	push	{r4}
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
  40017c:	6844      	ldr	r4, [r0, #4]
			| settling | ADC_MR_TRACKTIM(uc_tracking);
  40017e:	0609      	lsls	r1, r1, #24
  400180:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
	p_adc->ADC_MR |= ADC_MR_TRANSFER(uc_transfer)
  400184:	4321      	orrs	r1, r4
  400186:	430a      	orrs	r2, r1
  400188:	0719      	lsls	r1, r3, #28
  40018a:	f001 5140 	and.w	r1, r1, #805306368	; 0x30000000
  40018e:	4311      	orrs	r1, r2
  400190:	6041      	str	r1, [r0, #4]
}
  400192:	bc10      	pop	{r4}
  400194:	4770      	bx	lr

00400196 <adc_start>:
 * \param p_adc Pointer to an ADC instance.
 */

void adc_start(Adc *p_adc)
{
	p_adc->ADC_CR = ADC_CR_START;
  400196:	2302      	movs	r3, #2
  400198:	6003      	str	r3, [r0, #0]
  40019a:	4770      	bx	lr

0040019c <adc_enable_channel>:
 * \param p_adc Pointer to an ADC instance.
 * \param adc_ch ADC channel number.
 */
void adc_enable_channel(Adc *p_adc, const enum adc_channel_num_t adc_ch)
{
	p_adc->ADC_CHER = 1 << adc_ch;
  40019c:	2301      	movs	r3, #1
  40019e:	fa03 f101 	lsl.w	r1, r3, r1
  4001a2:	6101      	str	r1, [r0, #16]
  4001a4:	4770      	bx	lr

004001a6 <adc_get_latest_value>:
 *
 * \return ADC latest value.
 */
uint32_t adc_get_latest_value(const Adc *p_adc)
{
	return p_adc->ADC_LCDR;
  4001a6:	6a00      	ldr	r0, [r0, #32]
}
  4001a8:	4770      	bx	lr

004001aa <adc_enable_interrupt>:
 * \param p_adc Pointer to an ADC instance.
 * \param ul_source Interrupts to be enabled.
 */
void adc_enable_interrupt(Adc *p_adc, const uint32_t ul_source)
{
	p_adc->ADC_IER = ul_source;
  4001aa:	6241      	str	r1, [r0, #36]	; 0x24
  4001ac:	4770      	bx	lr

004001ae <adc_get_status>:
 *
 * \return ADC status structure.
 */
uint32_t adc_get_status(const Adc *p_adc)
{
	return p_adc->ADC_ISR;
  4001ae:	6b00      	ldr	r0, [r0, #48]	; 0x30
}
  4001b0:	4770      	bx	lr

004001b2 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4001b2:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4001b4:	0189      	lsls	r1, r1, #6
  4001b6:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4001b8:	2402      	movs	r4, #2
  4001ba:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4001bc:	f04f 31ff 	mov.w	r1, #4294967295
  4001c0:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  4001c2:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  4001c4:	605a      	str	r2, [r3, #4]
}
  4001c6:	bc10      	pop	{r4}
  4001c8:	4770      	bx	lr

004001ca <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  4001ca:	0189      	lsls	r1, r1, #6
  4001cc:	2305      	movs	r3, #5
  4001ce:	5043      	str	r3, [r0, r1]
  4001d0:	4770      	bx	lr

004001d2 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  4001d2:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4001d6:	61ca      	str	r2, [r1, #28]
  4001d8:	4770      	bx	lr

004001da <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4001da:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  4001de:	624a      	str	r2, [r1, #36]	; 0x24
  4001e0:	4770      	bx	lr

004001e2 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4001e2:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  4001e6:	6a08      	ldr	r0, [r1, #32]
}
  4001e8:	4770      	bx	lr

004001ea <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4001ea:	b4f0      	push	{r4, r5, r6, r7}
  4001ec:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4001ee:	2402      	movs	r4, #2
  4001f0:	9401      	str	r4, [sp, #4]
  4001f2:	2408      	movs	r4, #8
  4001f4:	9402      	str	r4, [sp, #8]
  4001f6:	2420      	movs	r4, #32
  4001f8:	9403      	str	r4, [sp, #12]
  4001fa:	2480      	movs	r4, #128	; 0x80
  4001fc:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  4001fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400200:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400202:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  400204:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  400208:	d814      	bhi.n	400234 <tc_find_mck_divisor+0x4a>
  40020a:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  40020c:	42a0      	cmp	r0, r4
  40020e:	d217      	bcs.n	400240 <tc_find_mck_divisor+0x56>
  400210:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400212:	af01      	add	r7, sp, #4
  400214:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  400218:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  40021c:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  40021e:	4284      	cmp	r4, r0
  400220:	d30a      	bcc.n	400238 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400222:	4286      	cmp	r6, r0
  400224:	d90d      	bls.n	400242 <tc_find_mck_divisor+0x58>
			ul_index++) {
  400226:	3501      	adds	r5, #1
	for (ul_index = 0;
  400228:	2d05      	cmp	r5, #5
  40022a:	d1f3      	bne.n	400214 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  40022c:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  40022e:	b006      	add	sp, #24
  400230:	bcf0      	pop	{r4, r5, r6, r7}
  400232:	4770      	bx	lr
			return 0;
  400234:	2000      	movs	r0, #0
  400236:	e7fa      	b.n	40022e <tc_find_mck_divisor+0x44>
  400238:	2000      	movs	r0, #0
  40023a:	e7f8      	b.n	40022e <tc_find_mck_divisor+0x44>
	return 1;
  40023c:	2001      	movs	r0, #1
  40023e:	e7f6      	b.n	40022e <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  400240:	2500      	movs	r5, #0
	if (p_uldiv) {
  400242:	b12a      	cbz	r2, 400250 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  400244:	a906      	add	r1, sp, #24
  400246:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  40024a:	f851 1c14 	ldr.w	r1, [r1, #-20]
  40024e:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  400250:	2b00      	cmp	r3, #0
  400252:	d0f3      	beq.n	40023c <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  400254:	601d      	str	r5, [r3, #0]
	return 1;
  400256:	2001      	movs	r0, #1
  400258:	e7e9      	b.n	40022e <tc_find_mck_divisor+0x44>

0040025a <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  40025a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40025e:	6043      	str	r3, [r0, #4]
  400260:	4770      	bx	lr
	...

00400264 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
  400264:	b4f0      	push	{r4, r5, r6, r7}
  400266:	b08c      	sub	sp, #48	; 0x30
  400268:	4607      	mov	r7, r0
  40026a:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
  40026c:	ac01      	add	r4, sp, #4
  40026e:	4d11      	ldr	r5, [pc, #68]	; (4002b4 <pwm_clocks_generate+0x50>)
  400270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  400276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  400278:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  40027c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  400280:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
  400282:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
  400284:	f852 0b04 	ldr.w	r0, [r2], #4
  400288:	fbb6 f0f0 	udiv	r0, r6, r0
  40028c:	fbb0 f0f7 	udiv	r0, r0, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
  400290:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
  400294:	d907      	bls.n	4002a6 <pwm_clocks_generate+0x42>
			break;
		}
		ul_pre++;
  400296:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
  400298:	2b0b      	cmp	r3, #11
  40029a:	d1f3      	bne.n	400284 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
  40029c:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
  4002a0:	b00c      	add	sp, #48	; 0x30
  4002a2:	bcf0      	pop	{r4, r5, r6, r7}
  4002a4:	4770      	bx	lr
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
  4002a6:	2b0a      	cmp	r3, #10
		return ul_div | (ul_pre << 8);
  4002a8:	bf94      	ite	ls
  4002aa:	ea40 2003 	orrls.w	r0, r0, r3, lsl #8
		return PWM_INVALID_ARGUMENT;
  4002ae:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
  4002b2:	e7f5      	b.n	4002a0 <pwm_clocks_generate+0x3c>
  4002b4:	00401084 	.word	0x00401084

004002b8 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
  4002b8:	b570      	push	{r4, r5, r6, lr}
  4002ba:	4606      	mov	r6, r0
  4002bc:	460d      	mov	r5, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
  4002be:	680c      	ldr	r4, [r1, #0]
  4002c0:	b144      	cbz	r4, 4002d4 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
  4002c2:	6889      	ldr	r1, [r1, #8]
  4002c4:	4620      	mov	r0, r4
  4002c6:	4b0c      	ldr	r3, [pc, #48]	; (4002f8 <pwm_init+0x40>)
  4002c8:	4798      	blx	r3
  4002ca:	4604      	mov	r4, r0
		if (result == PWM_INVALID_ARGUMENT) {
  4002cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4002d0:	4298      	cmp	r0, r3
  4002d2:	d00c      	beq.n	4002ee <pwm_init+0x36>

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
  4002d4:	6868      	ldr	r0, [r5, #4]
  4002d6:	b140      	cbz	r0, 4002ea <pwm_init+0x32>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
  4002d8:	68a9      	ldr	r1, [r5, #8]
  4002da:	4b07      	ldr	r3, [pc, #28]	; (4002f8 <pwm_init+0x40>)
  4002dc:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
  4002de:	f64f 73ff 	movw	r3, #65535	; 0xffff
  4002e2:	4298      	cmp	r0, r3
  4002e4:	d005      	beq.n	4002f2 <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
  4002e6:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
  4002ea:	6034      	str	r4, [r6, #0]
#endif
	return 0;
  4002ec:	2400      	movs	r4, #0
}
  4002ee:	4620      	mov	r0, r4
  4002f0:	bd70      	pop	{r4, r5, r6, pc}
			return result;
  4002f2:	4604      	mov	r4, r0
  4002f4:	e7fb      	b.n	4002ee <pwm_init+0x36>
  4002f6:	bf00      	nop
  4002f8:	00400265 	.word	0x00400265

004002fc <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
  4002fc:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
  4002fe:	680a      	ldr	r2, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  400300:	684b      	ldr	r3, [r1, #4]
  400302:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
  400306:	8a8c      	ldrh	r4, [r1, #20]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  400308:	4323      	orrs	r3, r4
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
  40030a:	890c      	ldrh	r4, [r1, #8]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  40030c:	4323      	orrs	r3, r4
			(p_channel->polarity << 9) |
  40030e:	7a8c      	ldrb	r4, [r1, #10]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  400310:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
			(p_channel->b_deadtime_generator << 16) |
  400314:	7d8c      	ldrb	r4, [r1, #22]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  400316:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
  40031a:	7dcc      	ldrb	r4, [r1, #23]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  40031c:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
  400320:	7e0c      	ldrb	r4, [r1, #24]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
  400322:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
  400326:	eb00 1442 	add.w	r4, r0, r2, lsl #5
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
  40032a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
  40032e:	68cb      	ldr	r3, [r1, #12]
  400330:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
  400334:	690b      	ldr	r3, [r1, #16]
  400336:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
  40033a:	7d8b      	ldrb	r3, [r1, #22]
  40033c:	b13b      	cbz	r3, 40034e <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
  40033e:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
  400340:	8b4b      	ldrh	r3, [r1, #26]
  400342:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
  400346:	eb00 1442 	add.w	r4, r0, r2, lsl #5
  40034a:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
  40034e:	6c85      	ldr	r5, [r0, #72]	; 0x48
  400350:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  400354:	4093      	lsls	r3, r2
  400356:	43db      	mvns	r3, r3
  400358:	401d      	ands	r5, r3
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
  40035a:	7fcc      	ldrb	r4, [r1, #31]
  40035c:	fa04 f602 	lsl.w	r6, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
  400360:	7f8c      	ldrb	r4, [r1, #30]
  400362:	4094      	lsls	r4, r2
  400364:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
  400368:	432c      	orrs	r4, r5
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
  40036a:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
  40036c:	6c44      	ldr	r4, [r0, #68]	; 0x44
  40036e:	4023      	ands	r3, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
  400370:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
  400374:	fa04 f502 	lsl.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
  400378:	f891 4020 	ldrb.w	r4, [r1, #32]
  40037c:	4094      	lsls	r4, r2
  40037e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  400382:	4323      	orrs	r3, r4
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
  400384:	6443      	str	r3, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
  400386:	2301      	movs	r3, #1
  400388:	4093      	lsls	r3, r2
	if (p_channel->b_sync_ch) {
  40038a:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
  40038e:	b31c      	cbz	r4, 4003d8 <pwm_channel_init+0xdc>
		p_pwm->PWM_SCM |= channel;
  400390:	6a04      	ldr	r4, [r0, #32]
  400392:	431c      	orrs	r4, r3
  400394:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
  400396:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
  40039a:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
  40039c:	6e84      	ldr	r4, [r0, #104]	; 0x68
  40039e:	bf0c      	ite	eq
  4003a0:	431c      	orreq	r4, r3
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
  4003a2:	439c      	bicne	r4, r3
  4003a4:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
  4003a6:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
  4003aa:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
  4003ac:	6e84      	ldr	r4, [r0, #104]	; 0x68
  4003ae:	bf0c      	ite	eq
  4003b0:	ea44 4303 	orreq.w	r3, r4, r3, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
  4003b4:	ea24 4303 	bicne.w	r3, r4, r3, lsl #16
  4003b8:	6683      	str	r3, [r0, #104]	; 0x68
		p_pwm->PWM_FPE2 = fault_enable_reg;
	}
#endif

#if (SAM3U || SAM3S || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	ch_num *= 8;
  4003ba:	00d2      	lsls	r2, r2, #3
	fault_enable_reg = p_pwm->PWM_FPE;
  4003bc:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
	fault_enable_reg &= ~(0xFF << ch_num);
  4003be:	23ff      	movs	r3, #255	; 0xff
  4003c0:	4093      	lsls	r3, r2
  4003c2:	ea24 0403 	bic.w	r4, r4, r3
	fault_enable_reg |= ((p_channel->fault_id) << ch_num);
  4003c6:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
  4003ca:	fa03 f202 	lsl.w	r2, r3, r2
  4003ce:	4322      	orrs	r2, r4
	p_pwm->PWM_FPE = fault_enable_reg;
  4003d0:	66c2      	str	r2, [r0, #108]	; 0x6c
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
  4003d2:	2000      	movs	r0, #0
  4003d4:	bc70      	pop	{r4, r5, r6}
  4003d6:	4770      	bx	lr
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
  4003d8:	6a04      	ldr	r4, [r0, #32]
  4003da:	ea24 0403 	bic.w	r4, r4, r3
  4003de:	6204      	str	r4, [r0, #32]
  4003e0:	e7d9      	b.n	400396 <pwm_channel_init+0x9a>

004003e2 <pwm_channel_update_duty>:
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
  4003e2:	690b      	ldr	r3, [r1, #16]
  4003e4:	4293      	cmp	r3, r2
  4003e6:	d202      	bcs.n	4003ee <pwm_channel_update_duty+0xc>
		return PWM_INVALID_ARGUMENT;
  4003e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
  4003ec:	4770      	bx	lr
	uint32_t ch_num = p_channel->channel;
  4003ee:	680b      	ldr	r3, [r1, #0]
		p_channel->ul_duty = ul_duty;
  4003f0:	60ca      	str	r2, [r1, #12]
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
  4003f2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  4003f6:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
	return 0;
  4003fa:	2000      	movs	r0, #0
  4003fc:	4770      	bx	lr

004003fe <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
  4003fe:	2301      	movs	r3, #1
  400400:	fa03 f101 	lsl.w	r1, r3, r1
  400404:	6041      	str	r1, [r0, #4]
  400406:	4770      	bx	lr

00400408 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
  400408:	2301      	movs	r3, #1
  40040a:	fa03 f101 	lsl.w	r1, r3, r1
  40040e:	6081      	str	r1, [r0, #8]
  400410:	4770      	bx	lr
	...

00400414 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400414:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400416:	480e      	ldr	r0, [pc, #56]	; (400450 <sysclk_init+0x3c>)
  400418:	4b0e      	ldr	r3, [pc, #56]	; (400454 <sysclk_init+0x40>)
  40041a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40041c:	213e      	movs	r1, #62	; 0x3e
  40041e:	2000      	movs	r0, #0
  400420:	4b0d      	ldr	r3, [pc, #52]	; (400458 <sysclk_init+0x44>)
  400422:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400424:	4c0d      	ldr	r4, [pc, #52]	; (40045c <sysclk_init+0x48>)
  400426:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400428:	2800      	cmp	r0, #0
  40042a:	d0fc      	beq.n	400426 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40042c:	4b0c      	ldr	r3, [pc, #48]	; (400460 <sysclk_init+0x4c>)
  40042e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400430:	4a0c      	ldr	r2, [pc, #48]	; (400464 <sysclk_init+0x50>)
  400432:	4b0d      	ldr	r3, [pc, #52]	; (400468 <sysclk_init+0x54>)
  400434:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  400436:	4c0d      	ldr	r4, [pc, #52]	; (40046c <sysclk_init+0x58>)
  400438:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40043a:	2800      	cmp	r0, #0
  40043c:	d0fc      	beq.n	400438 <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40043e:	2010      	movs	r0, #16
  400440:	4b0b      	ldr	r3, [pc, #44]	; (400470 <sysclk_init+0x5c>)
  400442:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400444:	4b0b      	ldr	r3, [pc, #44]	; (400474 <sysclk_init+0x60>)
  400446:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400448:	4801      	ldr	r0, [pc, #4]	; (400450 <sysclk_init+0x3c>)
  40044a:	4b02      	ldr	r3, [pc, #8]	; (400454 <sysclk_init+0x40>)
  40044c:	4798      	blx	r3
  40044e:	bd10      	pop	{r4, pc}
  400450:	07270e00 	.word	0x07270e00
  400454:	00400c61 	.word	0x00400c61
  400458:	004009c9 	.word	0x004009c9
  40045c:	00400a1d 	.word	0x00400a1d
  400460:	00400a2d 	.word	0x00400a2d
  400464:	20133f01 	.word	0x20133f01
  400468:	400e0400 	.word	0x400e0400
  40046c:	00400a3d 	.word	0x00400a3d
  400470:	00400965 	.word	0x00400965
  400474:	00400b51 	.word	0x00400b51

00400478 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
  400478:	b538      	push	{r3, r4, r5, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40047a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40047e:	4b46      	ldr	r3, [pc, #280]	; (400598 <board_init+0x120>)
  400480:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400482:	200b      	movs	r0, #11
  400484:	4c45      	ldr	r4, [pc, #276]	; (40059c <board_init+0x124>)
  400486:	47a0      	blx	r4
  400488:	200c      	movs	r0, #12
  40048a:	47a0      	blx	r4
  40048c:	200d      	movs	r0, #13
  40048e:	47a0      	blx	r4
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  400490:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400494:	2013      	movs	r0, #19
  400496:	4c42      	ldr	r4, [pc, #264]	; (4005a0 <board_init+0x128>)
  400498:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  40049a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  40049e:	2014      	movs	r0, #20
  4004a0:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  4004a2:	4940      	ldr	r1, [pc, #256]	; (4005a4 <board_init+0x12c>)
  4004a4:	2023      	movs	r0, #35	; 0x23
  4004a6:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
  4004a8:	493f      	ldr	r1, [pc, #252]	; (4005a8 <board_init+0x130>)
  4004aa:	204c      	movs	r0, #76	; 0x4c
  4004ac:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  4004ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4004b2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  4004b6:	483d      	ldr	r0, [pc, #244]	; (4005ac <board_init+0x134>)
  4004b8:	4b3d      	ldr	r3, [pc, #244]	; (4005b0 <board_init+0x138>)
  4004ba:	4798      	blx	r3
#endif

	/* Configure ADC example pins */
#ifdef CONF_BOARD_ADC
	/* TC TIOA configuration */
	gpio_configure_pin(PIN_TC0_TIOA0,PIN_TC0_TIOA0_FLAGS);
  4004bc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4004c0:	2000      	movs	r0, #0
  4004c2:	47a0      	blx	r4

	/* ADC Trigger configuration */
	gpio_configure_pin(PINS_ADC_TRIG, PINS_ADC_TRIG_FLAG);
  4004c4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4004c8:	2008      	movs	r0, #8
  4004ca:	47a0      	blx	r4

	/* PWMH0 configuration */
	gpio_configure_pin(PIN_PWMC_PWMH0_TRIG, PIN_PWMC_PWMH0_TRIG_FLAG);
  4004cc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4004d0:	2052      	movs	r0, #82	; 0x52
  4004d2:	47a0      	blx	r4
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

	/* Configure SPI pins */
#ifdef CONF_BOARD_SPI
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  4004d4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4004d8:	200c      	movs	r0, #12
  4004da:	47a0      	blx	r4
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  4004dc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4004e0:	200d      	movs	r0, #13
  4004e2:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  4004e4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4004e8:	200e      	movs	r0, #14
  4004ea:	47a0      	blx	r4
	 * Hence a different PIN should be selected using the CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */

#  ifdef CONF_BOARD_SPI_NPCS0
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
  4004ec:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4004f0:	200b      	movs	r0, #11
  4004f2:	47a0      	blx	r4
#  endif
#endif /* CONF_BOARD_SPI */

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART1_RXD_IDX, PIN_USART1_RXD_FLAGS);
  4004f4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4004f8:	2015      	movs	r0, #21
  4004fa:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART1_TXD_IDX, PIN_USART1_TXD_FLAGS);
  4004fc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400500:	2016      	movs	r0, #22
  400502:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART1_SCK_IDX, PIN_USART1_SCK_FLAGS);
#endif

#ifdef CONF_BOARD_ADM3312_EN
	/* Configure ADM33312 enable pin */
	gpio_configure_pin(PIN_USART1_EN_IDX, PIN_USART1_EN_FLAGS);
  400504:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400508:	2017      	movs	r0, #23
  40050a:	47a0      	blx	r4
	gpio_set_pin_low(PIN_USART1_EN_IDX);
  40050c:	2017      	movs	r0, #23
  40050e:	4b29      	ldr	r3, [pc, #164]	; (4005b4 <board_init+0x13c>)
  400510:	4798      	blx	r3
	gpio_set_pin_low(PIN_RE_IDX);
#endif

#if defined(CONF_BOARD_ILI9325) || defined(CONF_BOARD_ILI93XX)
	/* Configure LCD EBI pins */
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAGS);
  400512:	4d29      	ldr	r5, [pc, #164]	; (4005b8 <board_init+0x140>)
  400514:	4629      	mov	r1, r5
  400516:	2040      	movs	r0, #64	; 0x40
  400518:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAGS);
  40051a:	4629      	mov	r1, r5
  40051c:	2041      	movs	r0, #65	; 0x41
  40051e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAGS);
  400520:	4629      	mov	r1, r5
  400522:	2042      	movs	r0, #66	; 0x42
  400524:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAGS);
  400526:	4629      	mov	r1, r5
  400528:	2043      	movs	r0, #67	; 0x43
  40052a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAGS);
  40052c:	4629      	mov	r1, r5
  40052e:	2044      	movs	r0, #68	; 0x44
  400530:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAGS);
  400532:	4629      	mov	r1, r5
  400534:	2045      	movs	r0, #69	; 0x45
  400536:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAGS);
  400538:	4629      	mov	r1, r5
  40053a:	2046      	movs	r0, #70	; 0x46
  40053c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAGS);
  40053e:	4629      	mov	r1, r5
  400540:	2047      	movs	r0, #71	; 0x47
  400542:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
  400544:	4629      	mov	r1, r5
  400546:	204b      	movs	r0, #75	; 0x4b
  400548:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
  40054a:	4629      	mov	r1, r5
  40054c:	2048      	movs	r0, #72	; 0x48
  40054e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS1, PIN_EBI_NCS1_FLAGS);
  400550:	4629      	mov	r1, r5
  400552:	204f      	movs	r0, #79	; 0x4f
  400554:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_LCD_RS, PIN_EBI_LCD_RS_FLAGS);
  400556:	4629      	mov	r1, r5
  400558:	2053      	movs	r0, #83	; 0x53
  40055a:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_AAT3155
	/* Configure Backlight control pin */
	gpio_configure_pin(BOARD_AAT31XX_SET_GPIO, BOARD_AAT31XX_SET_FLAGS);
  40055c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400560:	204d      	movs	r0, #77	; 0x4d
  400562:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_ADS7843
	/* Configure Touchscreen SPI pins */
	gpio_configure_pin(BOARD_ADS7843_IRQ_GPIO,BOARD_ADS7843_IRQ_FLAGS);
  400564:	f105 5500 	add.w	r5, r5, #536870912	; 0x20000000
  400568:	4629      	mov	r1, r5
  40056a:	2010      	movs	r0, #16
  40056c:	47a0      	blx	r4
	gpio_configure_pin(BOARD_ADS7843_BUSY_GPIO, BOARD_ADS7843_BUSY_FLAGS);
  40056e:	4629      	mov	r1, r5
  400570:	2011      	movs	r0, #17
  400572:	47a0      	blx	r4
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  400574:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400578:	200c      	movs	r0, #12
  40057a:	47a0      	blx	r4
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  40057c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400580:	200d      	movs	r0, #13
  400582:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  400584:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400588:	200e      	movs	r0, #14
  40058a:	47a0      	blx	r4
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
  40058c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400590:	200b      	movs	r0, #11
  400592:	47a0      	blx	r4
  400594:	bd38      	pop	{r3, r4, r5, pc}
  400596:	bf00      	nop
  400598:	400e1450 	.word	0x400e1450
  40059c:	00400a4d 	.word	0x00400a4d
  4005a0:	004006c9 	.word	0x004006c9
  4005a4:	28000079 	.word	0x28000079
  4005a8:	28000059 	.word	0x28000059
  4005ac:	400e0e00 	.word	0x400e0e00
  4005b0:	004007e9 	.word	0x004007e9
  4005b4:	004006ad 	.word	0x004006ad
  4005b8:	08000001 	.word	0x08000001

004005bc <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4005bc:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4005be:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4005c2:	d039      	beq.n	400638 <pio_set_peripheral+0x7c>
  4005c4:	d813      	bhi.n	4005ee <pio_set_peripheral+0x32>
  4005c6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4005ca:	d025      	beq.n	400618 <pio_set_peripheral+0x5c>
  4005cc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4005d0:	d10a      	bne.n	4005e8 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4005d2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4005d4:	4313      	orrs	r3, r2
  4005d6:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4005d8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4005da:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4005dc:	400b      	ands	r3, r1
  4005de:	ea23 0302 	bic.w	r3, r3, r2
  4005e2:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4005e4:	6042      	str	r2, [r0, #4]
  4005e6:	4770      	bx	lr
	switch (ul_type) {
  4005e8:	2900      	cmp	r1, #0
  4005ea:	d1fb      	bne.n	4005e4 <pio_set_peripheral+0x28>
  4005ec:	4770      	bx	lr
  4005ee:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4005f2:	d020      	beq.n	400636 <pio_set_peripheral+0x7a>
  4005f4:	d809      	bhi.n	40060a <pio_set_peripheral+0x4e>
  4005f6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4005fa:	d1f3      	bne.n	4005e4 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4005fc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4005fe:	4313      	orrs	r3, r2
  400600:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400602:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400604:	4313      	orrs	r3, r2
  400606:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400608:	e7ec      	b.n	4005e4 <pio_set_peripheral+0x28>
	switch (ul_type) {
  40060a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40060e:	d012      	beq.n	400636 <pio_set_peripheral+0x7a>
  400610:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400614:	d00f      	beq.n	400636 <pio_set_peripheral+0x7a>
  400616:	e7e5      	b.n	4005e4 <pio_set_peripheral+0x28>
{
  400618:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  40061a:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40061c:	6f04      	ldr	r4, [r0, #112]	; 0x70
  40061e:	43d3      	mvns	r3, r2
  400620:	4021      	ands	r1, r4
  400622:	461c      	mov	r4, r3
  400624:	4019      	ands	r1, r3
  400626:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400628:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40062a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40062c:	400b      	ands	r3, r1
  40062e:	4023      	ands	r3, r4
  400630:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400632:	6042      	str	r2, [r0, #4]
}
  400634:	bc10      	pop	{r4}
  400636:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400638:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40063a:	6f01      	ldr	r1, [r0, #112]	; 0x70
  40063c:	400b      	ands	r3, r1
  40063e:	ea23 0302 	bic.w	r3, r3, r2
  400642:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400644:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400646:	4313      	orrs	r3, r2
  400648:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40064a:	e7cb      	b.n	4005e4 <pio_set_peripheral+0x28>

0040064c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40064c:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40064e:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400652:	bf14      	ite	ne
  400654:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400656:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400658:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  40065c:	bf14      	ite	ne
  40065e:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
  400660:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
  400662:	f012 0f02 	tst.w	r2, #2
  400666:	d107      	bne.n	400678 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400668:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  40066c:	bf18      	it	ne
  40066e:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
  400672:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400674:	6001      	str	r1, [r0, #0]
  400676:	4770      	bx	lr
		p_pio->PIO_IFSCDR = ul_mask;
  400678:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  40067c:	e7f9      	b.n	400672 <pio_set_input+0x26>

0040067e <pio_set_output>:
{
  40067e:	b410      	push	{r4}
  400680:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400682:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400684:	b944      	cbnz	r4, 400698 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
  400686:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400688:	b143      	cbz	r3, 40069c <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
  40068a:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40068c:	b942      	cbnz	r2, 4006a0 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
  40068e:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400690:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400692:	6001      	str	r1, [r0, #0]
}
  400694:	bc10      	pop	{r4}
  400696:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400698:	6641      	str	r1, [r0, #100]	; 0x64
  40069a:	e7f5      	b.n	400688 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  40069c:	6541      	str	r1, [r0, #84]	; 0x54
  40069e:	e7f5      	b.n	40068c <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  4006a0:	6301      	str	r1, [r0, #48]	; 0x30
  4006a2:	e7f5      	b.n	400690 <pio_set_output+0x12>

004006a4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4006a4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4006a6:	4770      	bx	lr

004006a8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4006a8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4006aa:	4770      	bx	lr

004006ac <pio_set_pin_low>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4006ac:	0943      	lsrs	r3, r0, #5
  4006ae:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4006b2:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4006b6:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  4006b8:	f000 001f 	and.w	r0, r0, #31
  4006bc:	2201      	movs	r2, #1
  4006be:	fa02 f000 	lsl.w	r0, r2, r0
  4006c2:	6358      	str	r0, [r3, #52]	; 0x34
  4006c4:	4770      	bx	lr
	...

004006c8 <pio_configure_pin>:
{
  4006c8:	b570      	push	{r4, r5, r6, lr}
  4006ca:	b082      	sub	sp, #8
  4006cc:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4006ce:	0943      	lsrs	r3, r0, #5
  4006d0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4006d4:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4006d8:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  4006da:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4006de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4006e2:	d053      	beq.n	40078c <pio_configure_pin+0xc4>
  4006e4:	d80a      	bhi.n	4006fc <pio_configure_pin+0x34>
  4006e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4006ea:	d02d      	beq.n	400748 <pio_configure_pin+0x80>
  4006ec:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4006f0:	d03b      	beq.n	40076a <pio_configure_pin+0xa2>
  4006f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4006f6:	d015      	beq.n	400724 <pio_configure_pin+0x5c>
		return 0;
  4006f8:	2000      	movs	r0, #0
  4006fa:	e023      	b.n	400744 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
  4006fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400700:	d055      	beq.n	4007ae <pio_configure_pin+0xe6>
  400702:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400706:	d052      	beq.n	4007ae <pio_configure_pin+0xe6>
  400708:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40070c:	d1f4      	bne.n	4006f8 <pio_configure_pin+0x30>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  40070e:	f000 011f 	and.w	r1, r0, #31
  400712:	2601      	movs	r6, #1
  400714:	462a      	mov	r2, r5
  400716:	fa06 f101 	lsl.w	r1, r6, r1
  40071a:	4620      	mov	r0, r4
  40071c:	4b2f      	ldr	r3, [pc, #188]	; (4007dc <pio_configure_pin+0x114>)
  40071e:	4798      	blx	r3
	return 1;
  400720:	4630      	mov	r0, r6
		break;
  400722:	e00f      	b.n	400744 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  400724:	f000 001f 	and.w	r0, r0, #31
  400728:	2601      	movs	r6, #1
  40072a:	4086      	lsls	r6, r0
  40072c:	4632      	mov	r2, r6
  40072e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400732:	4620      	mov	r0, r4
  400734:	4b2a      	ldr	r3, [pc, #168]	; (4007e0 <pio_configure_pin+0x118>)
  400736:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400738:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  40073c:	bf14      	ite	ne
  40073e:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400740:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  400742:	2001      	movs	r0, #1
}
  400744:	b002      	add	sp, #8
  400746:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  400748:	f000 001f 	and.w	r0, r0, #31
  40074c:	2601      	movs	r6, #1
  40074e:	4086      	lsls	r6, r0
  400750:	4632      	mov	r2, r6
  400752:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400756:	4620      	mov	r0, r4
  400758:	4b21      	ldr	r3, [pc, #132]	; (4007e0 <pio_configure_pin+0x118>)
  40075a:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40075c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400760:	bf14      	ite	ne
  400762:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400764:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  400766:	2001      	movs	r0, #1
  400768:	e7ec      	b.n	400744 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  40076a:	f000 001f 	and.w	r0, r0, #31
  40076e:	2601      	movs	r6, #1
  400770:	4086      	lsls	r6, r0
  400772:	4632      	mov	r2, r6
  400774:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400778:	4620      	mov	r0, r4
  40077a:	4b19      	ldr	r3, [pc, #100]	; (4007e0 <pio_configure_pin+0x118>)
  40077c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40077e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400782:	bf14      	ite	ne
  400784:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400786:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  400788:	2001      	movs	r0, #1
  40078a:	e7db      	b.n	400744 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  40078c:	f000 001f 	and.w	r0, r0, #31
  400790:	2601      	movs	r6, #1
  400792:	4086      	lsls	r6, r0
  400794:	4632      	mov	r2, r6
  400796:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40079a:	4620      	mov	r0, r4
  40079c:	4b10      	ldr	r3, [pc, #64]	; (4007e0 <pio_configure_pin+0x118>)
  40079e:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4007a0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4007a4:	bf14      	ite	ne
  4007a6:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  4007a8:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
  4007aa:	2001      	movs	r0, #1
  4007ac:	e7ca      	b.n	400744 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4007ae:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4007b2:	f000 011f 	and.w	r1, r0, #31
  4007b6:	2601      	movs	r6, #1
  4007b8:	ea05 0306 	and.w	r3, r5, r6
  4007bc:	9300      	str	r3, [sp, #0]
  4007be:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4007c2:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4007c6:	bf14      	ite	ne
  4007c8:	2200      	movne	r2, #0
  4007ca:	2201      	moveq	r2, #1
  4007cc:	fa06 f101 	lsl.w	r1, r6, r1
  4007d0:	4620      	mov	r0, r4
  4007d2:	4c04      	ldr	r4, [pc, #16]	; (4007e4 <pio_configure_pin+0x11c>)
  4007d4:	47a0      	blx	r4
	return 1;
  4007d6:	4630      	mov	r0, r6
		break;
  4007d8:	e7b4      	b.n	400744 <pio_configure_pin+0x7c>
  4007da:	bf00      	nop
  4007dc:	0040064d 	.word	0x0040064d
  4007e0:	004005bd 	.word	0x004005bd
  4007e4:	0040067f 	.word	0x0040067f

004007e8 <pio_configure_pin_group>:
{
  4007e8:	b570      	push	{r4, r5, r6, lr}
  4007ea:	b082      	sub	sp, #8
  4007ec:	4605      	mov	r5, r0
  4007ee:	460e      	mov	r6, r1
  4007f0:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
  4007f2:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  4007f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4007fa:	d03d      	beq.n	400878 <pio_configure_pin_group+0x90>
  4007fc:	d80a      	bhi.n	400814 <pio_configure_pin_group+0x2c>
  4007fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400802:	d021      	beq.n	400848 <pio_configure_pin_group+0x60>
  400804:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400808:	d02a      	beq.n	400860 <pio_configure_pin_group+0x78>
  40080a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40080e:	d00e      	beq.n	40082e <pio_configure_pin_group+0x46>
		return 0;
  400810:	2000      	movs	r0, #0
  400812:	e017      	b.n	400844 <pio_configure_pin_group+0x5c>
	switch (ul_flags & PIO_TYPE_Msk) {
  400814:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  400818:	d03a      	beq.n	400890 <pio_configure_pin_group+0xa8>
  40081a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40081e:	d037      	beq.n	400890 <pio_configure_pin_group+0xa8>
  400820:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400824:	d1f4      	bne.n	400810 <pio_configure_pin_group+0x28>
		pio_set_input(p_pio, ul_mask, ul_flags);
  400826:	4b23      	ldr	r3, [pc, #140]	; (4008b4 <pio_configure_pin_group+0xcc>)
  400828:	4798      	blx	r3
	return 1;
  40082a:	2001      	movs	r0, #1
		break;
  40082c:	e00a      	b.n	400844 <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  40082e:	460a      	mov	r2, r1
  400830:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400834:	4b20      	ldr	r3, [pc, #128]	; (4008b8 <pio_configure_pin_group+0xd0>)
  400836:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400838:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40083c:	bf14      	ite	ne
  40083e:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400840:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  400842:	2001      	movs	r0, #1
}
  400844:	b002      	add	sp, #8
  400846:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  400848:	460a      	mov	r2, r1
  40084a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40084e:	4b1a      	ldr	r3, [pc, #104]	; (4008b8 <pio_configure_pin_group+0xd0>)
  400850:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400852:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400856:	bf14      	ite	ne
  400858:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40085a:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  40085c:	2001      	movs	r0, #1
  40085e:	e7f1      	b.n	400844 <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  400860:	460a      	mov	r2, r1
  400862:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  400866:	4b14      	ldr	r3, [pc, #80]	; (4008b8 <pio_configure_pin_group+0xd0>)
  400868:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40086a:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  40086e:	bf14      	ite	ne
  400870:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  400872:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  400874:	2001      	movs	r0, #1
  400876:	e7e5      	b.n	400844 <pio_configure_pin_group+0x5c>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  400878:	460a      	mov	r2, r1
  40087a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40087e:	4b0e      	ldr	r3, [pc, #56]	; (4008b8 <pio_configure_pin_group+0xd0>)
  400880:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400882:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  400886:	bf14      	ite	ne
  400888:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
  40088a:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
  40088c:	2001      	movs	r0, #1
  40088e:	e7d9      	b.n	400844 <pio_configure_pin_group+0x5c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  400890:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
  400894:	f004 0301 	and.w	r3, r4, #1
  400898:	9300      	str	r3, [sp, #0]
  40089a:	f3c4 0380 	ubfx	r3, r4, #2, #1
  40089e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4008a2:	bf14      	ite	ne
  4008a4:	2200      	movne	r2, #0
  4008a6:	2201      	moveq	r2, #1
  4008a8:	4631      	mov	r1, r6
  4008aa:	4628      	mov	r0, r5
  4008ac:	4c03      	ldr	r4, [pc, #12]	; (4008bc <pio_configure_pin_group+0xd4>)
  4008ae:	47a0      	blx	r4
	return 1;
  4008b0:	2001      	movs	r0, #1
		break;
  4008b2:	e7c7      	b.n	400844 <pio_configure_pin_group+0x5c>
  4008b4:	0040064d 	.word	0x0040064d
  4008b8:	004005bd 	.word	0x004005bd
  4008bc:	0040067f 	.word	0x0040067f

004008c0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4008c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4008c4:	4681      	mov	r9, r0
  4008c6:	460f      	mov	r7, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4008c8:	4b12      	ldr	r3, [pc, #72]	; (400914 <pio_handler_process+0x54>)
  4008ca:	4798      	blx	r3
  4008cc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4008ce:	4648      	mov	r0, r9
  4008d0:	4b11      	ldr	r3, [pc, #68]	; (400918 <pio_handler_process+0x58>)
  4008d2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4008d4:	4005      	ands	r5, r0
  4008d6:	d013      	beq.n	400900 <pio_handler_process+0x40>
  4008d8:	4c10      	ldr	r4, [pc, #64]	; (40091c <pio_handler_process+0x5c>)
  4008da:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4008de:	e003      	b.n	4008e8 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4008e0:	42b4      	cmp	r4, r6
  4008e2:	d00d      	beq.n	400900 <pio_handler_process+0x40>
  4008e4:	3410      	adds	r4, #16
		while (status != 0) {
  4008e6:	b15d      	cbz	r5, 400900 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4008e8:	6820      	ldr	r0, [r4, #0]
  4008ea:	42b8      	cmp	r0, r7
  4008ec:	d1f8      	bne.n	4008e0 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4008ee:	6861      	ldr	r1, [r4, #4]
  4008f0:	4229      	tst	r1, r5
  4008f2:	d0f5      	beq.n	4008e0 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4008f4:	68e3      	ldr	r3, [r4, #12]
  4008f6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4008f8:	6863      	ldr	r3, [r4, #4]
  4008fa:	ea25 0503 	bic.w	r5, r5, r3
  4008fe:	e7ef      	b.n	4008e0 <pio_handler_process+0x20>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400900:	4b07      	ldr	r3, [pc, #28]	; (400920 <pio_handler_process+0x60>)
  400902:	681b      	ldr	r3, [r3, #0]
  400904:	b123      	cbz	r3, 400910 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  400906:	4b07      	ldr	r3, [pc, #28]	; (400924 <pio_handler_process+0x64>)
  400908:	681b      	ldr	r3, [r3, #0]
  40090a:	b10b      	cbz	r3, 400910 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  40090c:	4648      	mov	r0, r9
  40090e:	4798      	blx	r3
  400910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400914:	004006a5 	.word	0x004006a5
  400918:	004006a9 	.word	0x004006a9
  40091c:	20000450 	.word	0x20000450
  400920:	200004c4 	.word	0x200004c4
  400924:	200004c0 	.word	0x200004c0

00400928 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  400928:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40092a:	210b      	movs	r1, #11
  40092c:	4801      	ldr	r0, [pc, #4]	; (400934 <PIOA_Handler+0xc>)
  40092e:	4b02      	ldr	r3, [pc, #8]	; (400938 <PIOA_Handler+0x10>)
  400930:	4798      	blx	r3
  400932:	bd08      	pop	{r3, pc}
  400934:	400e0e00 	.word	0x400e0e00
  400938:	004008c1 	.word	0x004008c1

0040093c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40093c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40093e:	210c      	movs	r1, #12
  400940:	4801      	ldr	r0, [pc, #4]	; (400948 <PIOB_Handler+0xc>)
  400942:	4b02      	ldr	r3, [pc, #8]	; (40094c <PIOB_Handler+0x10>)
  400944:	4798      	blx	r3
  400946:	bd08      	pop	{r3, pc}
  400948:	400e1000 	.word	0x400e1000
  40094c:	004008c1 	.word	0x004008c1

00400950 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400950:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400952:	210d      	movs	r1, #13
  400954:	4801      	ldr	r0, [pc, #4]	; (40095c <PIOC_Handler+0xc>)
  400956:	4b02      	ldr	r3, [pc, #8]	; (400960 <PIOC_Handler+0x10>)
  400958:	4798      	blx	r3
  40095a:	bd08      	pop	{r3, pc}
  40095c:	400e1200 	.word	0x400e1200
  400960:	004008c1 	.word	0x004008c1

00400964 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400964:	4a17      	ldr	r2, [pc, #92]	; (4009c4 <pmc_switch_mck_to_pllack+0x60>)
  400966:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  40096c:	4318      	orrs	r0, r3
  40096e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400970:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400972:	f013 0f08 	tst.w	r3, #8
  400976:	d10a      	bne.n	40098e <pmc_switch_mck_to_pllack+0x2a>
  400978:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40097c:	4911      	ldr	r1, [pc, #68]	; (4009c4 <pmc_switch_mck_to_pllack+0x60>)
  40097e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400980:	f012 0f08 	tst.w	r2, #8
  400984:	d103      	bne.n	40098e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400986:	3b01      	subs	r3, #1
  400988:	d1f9      	bne.n	40097e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40098a:	2001      	movs	r0, #1
  40098c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40098e:	4a0d      	ldr	r2, [pc, #52]	; (4009c4 <pmc_switch_mck_to_pllack+0x60>)
  400990:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400992:	f023 0303 	bic.w	r3, r3, #3
  400996:	f043 0302 	orr.w	r3, r3, #2
  40099a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40099c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40099e:	f013 0f08 	tst.w	r3, #8
  4009a2:	d10a      	bne.n	4009ba <pmc_switch_mck_to_pllack+0x56>
  4009a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
  4009a8:	4906      	ldr	r1, [pc, #24]	; (4009c4 <pmc_switch_mck_to_pllack+0x60>)
  4009aa:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4009ac:	f012 0f08 	tst.w	r2, #8
  4009b0:	d105      	bne.n	4009be <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4009b2:	3b01      	subs	r3, #1
  4009b4:	d1f9      	bne.n	4009aa <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4009b6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4009b8:	4770      	bx	lr
	return 0;
  4009ba:	2000      	movs	r0, #0
  4009bc:	4770      	bx	lr
  4009be:	2000      	movs	r0, #0
  4009c0:	4770      	bx	lr
  4009c2:	bf00      	nop
  4009c4:	400e0400 	.word	0x400e0400

004009c8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4009c8:	b9c8      	cbnz	r0, 4009fe <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4009ca:	4a11      	ldr	r2, [pc, #68]	; (400a10 <pmc_switch_mainck_to_xtal+0x48>)
  4009cc:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4009ce:	0209      	lsls	r1, r1, #8
  4009d0:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4009d2:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4009d6:	f023 0303 	bic.w	r3, r3, #3
  4009da:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4009de:	f043 0301 	orr.w	r3, r3, #1
  4009e2:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4009e4:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4009e6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4009e8:	f013 0f01 	tst.w	r3, #1
  4009ec:	d0fb      	beq.n	4009e6 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4009ee:	4a08      	ldr	r2, [pc, #32]	; (400a10 <pmc_switch_mainck_to_xtal+0x48>)
  4009f0:	6a13      	ldr	r3, [r2, #32]
  4009f2:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4009f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4009fa:	6213      	str	r3, [r2, #32]
  4009fc:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4009fe:	4904      	ldr	r1, [pc, #16]	; (400a10 <pmc_switch_mainck_to_xtal+0x48>)
  400a00:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400a02:	4a04      	ldr	r2, [pc, #16]	; (400a14 <pmc_switch_mainck_to_xtal+0x4c>)
  400a04:	401a      	ands	r2, r3
  400a06:	4b04      	ldr	r3, [pc, #16]	; (400a18 <pmc_switch_mainck_to_xtal+0x50>)
  400a08:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400a0a:	620b      	str	r3, [r1, #32]
  400a0c:	4770      	bx	lr
  400a0e:	bf00      	nop
  400a10:	400e0400 	.word	0x400e0400
  400a14:	fec8fffc 	.word	0xfec8fffc
  400a18:	01370002 	.word	0x01370002

00400a1c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400a1c:	4b02      	ldr	r3, [pc, #8]	; (400a28 <pmc_osc_is_ready_mainck+0xc>)
  400a1e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400a20:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400a24:	4770      	bx	lr
  400a26:	bf00      	nop
  400a28:	400e0400 	.word	0x400e0400

00400a2c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400a2c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400a30:	4b01      	ldr	r3, [pc, #4]	; (400a38 <pmc_disable_pllack+0xc>)
  400a32:	629a      	str	r2, [r3, #40]	; 0x28
  400a34:	4770      	bx	lr
  400a36:	bf00      	nop
  400a38:	400e0400 	.word	0x400e0400

00400a3c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400a3c:	4b02      	ldr	r3, [pc, #8]	; (400a48 <pmc_is_locked_pllack+0xc>)
  400a3e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400a40:	f000 0002 	and.w	r0, r0, #2
  400a44:	4770      	bx	lr
  400a46:	bf00      	nop
  400a48:	400e0400 	.word	0x400e0400

00400a4c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400a4c:	2822      	cmp	r0, #34	; 0x22
  400a4e:	d81e      	bhi.n	400a8e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400a50:	281f      	cmp	r0, #31
  400a52:	d80c      	bhi.n	400a6e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400a54:	4b11      	ldr	r3, [pc, #68]	; (400a9c <pmc_enable_periph_clk+0x50>)
  400a56:	699a      	ldr	r2, [r3, #24]
  400a58:	2301      	movs	r3, #1
  400a5a:	4083      	lsls	r3, r0
  400a5c:	4393      	bics	r3, r2
  400a5e:	d018      	beq.n	400a92 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400a60:	2301      	movs	r3, #1
  400a62:	fa03 f000 	lsl.w	r0, r3, r0
  400a66:	4b0d      	ldr	r3, [pc, #52]	; (400a9c <pmc_enable_periph_clk+0x50>)
  400a68:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400a6a:	2000      	movs	r0, #0
  400a6c:	4770      	bx	lr
		ul_id -= 32;
  400a6e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400a70:	4b0a      	ldr	r3, [pc, #40]	; (400a9c <pmc_enable_periph_clk+0x50>)
  400a72:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400a76:	2301      	movs	r3, #1
  400a78:	4083      	lsls	r3, r0
  400a7a:	4393      	bics	r3, r2
  400a7c:	d00b      	beq.n	400a96 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400a7e:	2301      	movs	r3, #1
  400a80:	fa03 f000 	lsl.w	r0, r3, r0
  400a84:	4b05      	ldr	r3, [pc, #20]	; (400a9c <pmc_enable_periph_clk+0x50>)
  400a86:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400a8a:	2000      	movs	r0, #0
  400a8c:	4770      	bx	lr
		return 1;
  400a8e:	2001      	movs	r0, #1
  400a90:	4770      	bx	lr
	return 0;
  400a92:	2000      	movs	r0, #0
  400a94:	4770      	bx	lr
  400a96:	2000      	movs	r0, #0
}
  400a98:	4770      	bx	lr
  400a9a:	bf00      	nop
  400a9c:	400e0400 	.word	0x400e0400

00400aa0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400aa0:	e7fe      	b.n	400aa0 <Dummy_Handler>
	...

00400aa4 <Reset_Handler>:
{
  400aa4:	b508      	push	{r3, lr}
	if (pSrc > pDest) {
  400aa6:	4b21      	ldr	r3, [pc, #132]	; (400b2c <Reset_Handler+0x88>)
  400aa8:	4a21      	ldr	r2, [pc, #132]	; (400b30 <Reset_Handler+0x8c>)
  400aaa:	429a      	cmp	r2, r3
  400aac:	d928      	bls.n	400b00 <Reset_Handler+0x5c>
		for (; pDest < &_erelocate;) {
  400aae:	4b21      	ldr	r3, [pc, #132]	; (400b34 <Reset_Handler+0x90>)
  400ab0:	4a1e      	ldr	r2, [pc, #120]	; (400b2c <Reset_Handler+0x88>)
  400ab2:	429a      	cmp	r2, r3
  400ab4:	d20c      	bcs.n	400ad0 <Reset_Handler+0x2c>
  400ab6:	3b01      	subs	r3, #1
  400ab8:	1a9b      	subs	r3, r3, r2
  400aba:	f023 0303 	bic.w	r3, r3, #3
  400abe:	3304      	adds	r3, #4
  400ac0:	4413      	add	r3, r2
  400ac2:	491b      	ldr	r1, [pc, #108]	; (400b30 <Reset_Handler+0x8c>)
			*pDest++ = *pSrc++;
  400ac4:	f851 0b04 	ldr.w	r0, [r1], #4
  400ac8:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
  400acc:	429a      	cmp	r2, r3
  400ace:	d1f9      	bne.n	400ac4 <Reset_Handler+0x20>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400ad0:	bf00      	nop
	for (pDest = &_szero; pDest < &_ezero;) {
  400ad2:	4b19      	ldr	r3, [pc, #100]	; (400b38 <Reset_Handler+0x94>)
  400ad4:	4a19      	ldr	r2, [pc, #100]	; (400b3c <Reset_Handler+0x98>)
  400ad6:	429a      	cmp	r2, r3
  400ad8:	d20a      	bcs.n	400af0 <Reset_Handler+0x4c>
  400ada:	3b01      	subs	r3, #1
  400adc:	1a9b      	subs	r3, r3, r2
  400ade:	f023 0303 	bic.w	r3, r3, #3
  400ae2:	3304      	adds	r3, #4
  400ae4:	4413      	add	r3, r2
		*pDest++ = 0;
  400ae6:	2100      	movs	r1, #0
  400ae8:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
  400aec:	429a      	cmp	r2, r3
  400aee:	d1fb      	bne.n	400ae8 <Reset_Handler+0x44>
	SCB->VTOR = ((uint32_t) pSrc);
  400af0:	4b13      	ldr	r3, [pc, #76]	; (400b40 <Reset_Handler+0x9c>)
  400af2:	4a14      	ldr	r2, [pc, #80]	; (400b44 <Reset_Handler+0xa0>)
  400af4:	609a      	str	r2, [r3, #8]
	__libc_init_array();
  400af6:	4b14      	ldr	r3, [pc, #80]	; (400b48 <Reset_Handler+0xa4>)
  400af8:	4798      	blx	r3
	main();
  400afa:	4b14      	ldr	r3, [pc, #80]	; (400b4c <Reset_Handler+0xa8>)
  400afc:	4798      	blx	r3
  400afe:	e7fe      	b.n	400afe <Reset_Handler+0x5a>
	} else if (pSrc < pDest) {
  400b00:	4b0a      	ldr	r3, [pc, #40]	; (400b2c <Reset_Handler+0x88>)
  400b02:	4a0b      	ldr	r2, [pc, #44]	; (400b30 <Reset_Handler+0x8c>)
  400b04:	429a      	cmp	r2, r3
  400b06:	d2e3      	bcs.n	400ad0 <Reset_Handler+0x2c>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  400b08:	4b0a      	ldr	r3, [pc, #40]	; (400b34 <Reset_Handler+0x90>)
  400b0a:	4808      	ldr	r0, [pc, #32]	; (400b2c <Reset_Handler+0x88>)
  400b0c:	1a18      	subs	r0, r3, r0
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  400b0e:	4611      	mov	r1, r2
  400b10:	3a04      	subs	r2, #4
  400b12:	4402      	add	r2, r0
		for (;nb_bytes;nb_bytes -= 4) {
  400b14:	2800      	cmp	r0, #0
  400b16:	d0db      	beq.n	400ad0 <Reset_Handler+0x2c>
  400b18:	f1c1 0104 	rsb	r1, r1, #4
			*pDest-- = *pSrc--;
  400b1c:	f852 0904 	ldr.w	r0, [r2], #-4
  400b20:	f843 0d04 	str.w	r0, [r3, #-4]!
		for (;nb_bytes;nb_bytes -= 4) {
  400b24:	42ca      	cmn	r2, r1
  400b26:	d1f9      	bne.n	400b1c <Reset_Handler+0x78>
  400b28:	e7d2      	b.n	400ad0 <Reset_Handler+0x2c>
  400b2a:	bf00      	nop
  400b2c:	20000000 	.word	0x20000000
  400b30:	004010d8 	.word	0x004010d8
  400b34:	20000434 	.word	0x20000434
  400b38:	20000514 	.word	0x20000514
  400b3c:	20000434 	.word	0x20000434
  400b40:	e000ed00 	.word	0xe000ed00
  400b44:	00400000 	.word	0x00400000
  400b48:	00400f15 	.word	0x00400f15
  400b4c:	00400e65 	.word	0x00400e65

00400b50 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  400b50:	4b3c      	ldr	r3, [pc, #240]	; (400c44 <SystemCoreClockUpdate+0xf4>)
  400b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400b54:	f003 0303 	and.w	r3, r3, #3
  400b58:	2b03      	cmp	r3, #3
  400b5a:	d80e      	bhi.n	400b7a <SystemCoreClockUpdate+0x2a>
  400b5c:	e8df f003 	tbb	[pc, r3]
  400b60:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400b64:	4b38      	ldr	r3, [pc, #224]	; (400c48 <SystemCoreClockUpdate+0xf8>)
  400b66:	695b      	ldr	r3, [r3, #20]
  400b68:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400b6c:	bf14      	ite	ne
  400b6e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400b72:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400b76:	4b35      	ldr	r3, [pc, #212]	; (400c4c <SystemCoreClockUpdate+0xfc>)
  400b78:	601a      	str	r2, [r3, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  400b7a:	4b32      	ldr	r3, [pc, #200]	; (400c44 <SystemCoreClockUpdate+0xf4>)
  400b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400b7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400b82:	2b70      	cmp	r3, #112	; 0x70
  400b84:	d055      	beq.n	400c32 <SystemCoreClockUpdate+0xe2>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400b86:	4b2f      	ldr	r3, [pc, #188]	; (400c44 <SystemCoreClockUpdate+0xf4>)
  400b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		SystemCoreClock >>=
  400b8a:	4930      	ldr	r1, [pc, #192]	; (400c4c <SystemCoreClockUpdate+0xfc>)
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400b8c:	f3c2 1202 	ubfx	r2, r2, #4, #3
		SystemCoreClock >>=
  400b90:	680b      	ldr	r3, [r1, #0]
  400b92:	40d3      	lsrs	r3, r2
  400b94:	600b      	str	r3, [r1, #0]
  400b96:	4770      	bx	lr
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400b98:	4b2a      	ldr	r3, [pc, #168]	; (400c44 <SystemCoreClockUpdate+0xf4>)
  400b9a:	6a1b      	ldr	r3, [r3, #32]
  400b9c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400ba0:	d003      	beq.n	400baa <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400ba2:	4a2b      	ldr	r2, [pc, #172]	; (400c50 <SystemCoreClockUpdate+0x100>)
  400ba4:	4b29      	ldr	r3, [pc, #164]	; (400c4c <SystemCoreClockUpdate+0xfc>)
  400ba6:	601a      	str	r2, [r3, #0]
  400ba8:	e7e7      	b.n	400b7a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400baa:	4a2a      	ldr	r2, [pc, #168]	; (400c54 <SystemCoreClockUpdate+0x104>)
  400bac:	4b27      	ldr	r3, [pc, #156]	; (400c4c <SystemCoreClockUpdate+0xfc>)
  400bae:	601a      	str	r2, [r3, #0]
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400bb0:	4b24      	ldr	r3, [pc, #144]	; (400c44 <SystemCoreClockUpdate+0xf4>)
  400bb2:	6a1b      	ldr	r3, [r3, #32]
  400bb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400bb8:	2b10      	cmp	r3, #16
  400bba:	d005      	beq.n	400bc8 <SystemCoreClockUpdate+0x78>
  400bbc:	2b20      	cmp	r3, #32
  400bbe:	d1dc      	bne.n	400b7a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400bc0:	4a23      	ldr	r2, [pc, #140]	; (400c50 <SystemCoreClockUpdate+0x100>)
  400bc2:	4b22      	ldr	r3, [pc, #136]	; (400c4c <SystemCoreClockUpdate+0xfc>)
  400bc4:	601a      	str	r2, [r3, #0]
			break;
  400bc6:	e7d8      	b.n	400b7a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400bc8:	4a23      	ldr	r2, [pc, #140]	; (400c58 <SystemCoreClockUpdate+0x108>)
  400bca:	4b20      	ldr	r3, [pc, #128]	; (400c4c <SystemCoreClockUpdate+0xfc>)
  400bcc:	601a      	str	r2, [r3, #0]
			break;
  400bce:	e7d4      	b.n	400b7a <SystemCoreClockUpdate+0x2a>
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400bd0:	4b1c      	ldr	r3, [pc, #112]	; (400c44 <SystemCoreClockUpdate+0xf4>)
  400bd2:	6a1b      	ldr	r3, [r3, #32]
  400bd4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400bd8:	d018      	beq.n	400c0c <SystemCoreClockUpdate+0xbc>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400bda:	4a1d      	ldr	r2, [pc, #116]	; (400c50 <SystemCoreClockUpdate+0x100>)
  400bdc:	4b1b      	ldr	r3, [pc, #108]	; (400c4c <SystemCoreClockUpdate+0xfc>)
  400bde:	601a      	str	r2, [r3, #0]
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  400be0:	4b18      	ldr	r3, [pc, #96]	; (400c44 <SystemCoreClockUpdate+0xf4>)
  400be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400be4:	f003 0303 	and.w	r3, r3, #3
  400be8:	2b02      	cmp	r3, #2
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400bea:	4a16      	ldr	r2, [pc, #88]	; (400c44 <SystemCoreClockUpdate+0xf4>)
  400bec:	bf07      	ittee	eq
  400bee:	6a91      	ldreq	r1, [r2, #40]	; 0x28
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400bf0:	6a92      	ldreq	r2, [r2, #40]	; 0x28
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400bf2:	6ad1      	ldrne	r1, [r2, #44]	; 0x2c
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400bf4:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  400bf6:	4815      	ldr	r0, [pc, #84]	; (400c4c <SystemCoreClockUpdate+0xfc>)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  400bf8:	f3c1 410a 	ubfx	r1, r1, #16, #11
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400bfc:	6803      	ldr	r3, [r0, #0]
  400bfe:	fb01 3303 	mla	r3, r1, r3, r3
						>> CKGR_PLLBR_DIVB_Pos));
  400c02:	b2d2      	uxtb	r2, r2
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400c04:	fbb3 f3f2 	udiv	r3, r3, r2
  400c08:	6003      	str	r3, [r0, #0]
  400c0a:	e7b6      	b.n	400b7a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400c0c:	4a11      	ldr	r2, [pc, #68]	; (400c54 <SystemCoreClockUpdate+0x104>)
  400c0e:	4b0f      	ldr	r3, [pc, #60]	; (400c4c <SystemCoreClockUpdate+0xfc>)
  400c10:	601a      	str	r2, [r3, #0]
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400c12:	4b0c      	ldr	r3, [pc, #48]	; (400c44 <SystemCoreClockUpdate+0xf4>)
  400c14:	6a1b      	ldr	r3, [r3, #32]
  400c16:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400c1a:	2b10      	cmp	r3, #16
  400c1c:	d005      	beq.n	400c2a <SystemCoreClockUpdate+0xda>
  400c1e:	2b20      	cmp	r3, #32
  400c20:	d1de      	bne.n	400be0 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400c22:	4a0b      	ldr	r2, [pc, #44]	; (400c50 <SystemCoreClockUpdate+0x100>)
  400c24:	4b09      	ldr	r3, [pc, #36]	; (400c4c <SystemCoreClockUpdate+0xfc>)
  400c26:	601a      	str	r2, [r3, #0]
					break;
  400c28:	e7da      	b.n	400be0 <SystemCoreClockUpdate+0x90>
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400c2a:	4a0b      	ldr	r2, [pc, #44]	; (400c58 <SystemCoreClockUpdate+0x108>)
  400c2c:	4b07      	ldr	r3, [pc, #28]	; (400c4c <SystemCoreClockUpdate+0xfc>)
  400c2e:	601a      	str	r2, [r3, #0]
					break;
  400c30:	e7d6      	b.n	400be0 <SystemCoreClockUpdate+0x90>
		SystemCoreClock /= 3U;
  400c32:	4a06      	ldr	r2, [pc, #24]	; (400c4c <SystemCoreClockUpdate+0xfc>)
  400c34:	6813      	ldr	r3, [r2, #0]
  400c36:	4909      	ldr	r1, [pc, #36]	; (400c5c <SystemCoreClockUpdate+0x10c>)
  400c38:	fba1 1303 	umull	r1, r3, r1, r3
  400c3c:	085b      	lsrs	r3, r3, #1
  400c3e:	6013      	str	r3, [r2, #0]
  400c40:	4770      	bx	lr
  400c42:	bf00      	nop
  400c44:	400e0400 	.word	0x400e0400
  400c48:	400e1410 	.word	0x400e1410
  400c4c:	20000000 	.word	0x20000000
  400c50:	00b71b00 	.word	0x00b71b00
  400c54:	003d0900 	.word	0x003d0900
  400c58:	007a1200 	.word	0x007a1200
  400c5c:	aaaaaaab 	.word	0xaaaaaaab

00400c60 <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400c60:	4b1a      	ldr	r3, [pc, #104]	; (400ccc <system_init_flash+0x6c>)
  400c62:	4298      	cmp	r0, r3
  400c64:	d914      	bls.n	400c90 <system_init_flash+0x30>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400c66:	4b1a      	ldr	r3, [pc, #104]	; (400cd0 <system_init_flash+0x70>)
  400c68:	4298      	cmp	r0, r3
  400c6a:	d919      	bls.n	400ca0 <system_init_flash+0x40>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400c6c:	4b19      	ldr	r3, [pc, #100]	; (400cd4 <system_init_flash+0x74>)
  400c6e:	4298      	cmp	r0, r3
  400c70:	d91d      	bls.n	400cae <system_init_flash+0x4e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400c72:	4b19      	ldr	r3, [pc, #100]	; (400cd8 <system_init_flash+0x78>)
  400c74:	4298      	cmp	r0, r3
  400c76:	d921      	bls.n	400cbc <system_init_flash+0x5c>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400c78:	4b18      	ldr	r3, [pc, #96]	; (400cdc <system_init_flash+0x7c>)
  400c7a:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400c7c:	bf94      	ite	ls
  400c7e:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400c82:	4b17      	ldrhi	r3, [pc, #92]	; (400ce0 <system_init_flash+0x80>)
  400c84:	4a17      	ldr	r2, [pc, #92]	; (400ce4 <system_init_flash+0x84>)
  400c86:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400c88:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400c8c:	6013      	str	r3, [r2, #0]
  400c8e:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400c90:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  400c94:	4a13      	ldr	r2, [pc, #76]	; (400ce4 <system_init_flash+0x84>)
  400c96:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400c98:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400c9c:	6013      	str	r3, [r2, #0]
  400c9e:	4770      	bx	lr
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400ca0:	4b11      	ldr	r3, [pc, #68]	; (400ce8 <system_init_flash+0x88>)
  400ca2:	4a10      	ldr	r2, [pc, #64]	; (400ce4 <system_init_flash+0x84>)
  400ca4:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400ca6:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400caa:	6013      	str	r3, [r2, #0]
  400cac:	4770      	bx	lr
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400cae:	4b0f      	ldr	r3, [pc, #60]	; (400cec <system_init_flash+0x8c>)
  400cb0:	4a0c      	ldr	r2, [pc, #48]	; (400ce4 <system_init_flash+0x84>)
  400cb2:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400cb4:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400cb8:	6013      	str	r3, [r2, #0]
  400cba:	4770      	bx	lr
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400cbc:	4b0c      	ldr	r3, [pc, #48]	; (400cf0 <system_init_flash+0x90>)
  400cbe:	4a09      	ldr	r2, [pc, #36]	; (400ce4 <system_init_flash+0x84>)
  400cc0:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400cc2:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400cc6:	6013      	str	r3, [r2, #0]
  400cc8:	4770      	bx	lr
  400cca:	bf00      	nop
  400ccc:	01312cff 	.word	0x01312cff
  400cd0:	026259ff 	.word	0x026259ff
  400cd4:	039386ff 	.word	0x039386ff
  400cd8:	04c4b3ff 	.word	0x04c4b3ff
  400cdc:	05f5e0ff 	.word	0x05f5e0ff
  400ce0:	04000500 	.word	0x04000500
  400ce4:	400e0a00 	.word	0x400e0a00
  400ce8:	04000100 	.word	0x04000100
  400cec:	04000200 	.word	0x04000200
  400cf0:	04000300 	.word	0x04000300

00400cf4 <SetupPeripherals>:
#define TC_IRQn     TC0_IRQn

pwm_channel_t pwmChannel0;

void SetupPeripherals(void)
{
  400cf4:	b530      	push	{r4, r5, lr}
  400cf6:	b085      	sub	sp, #20
	wdt_disable(WDT);
  400cf8:	4817      	ldr	r0, [pc, #92]	; (400d58 <SetupPeripherals+0x64>)
  400cfa:	4b18      	ldr	r3, [pc, #96]	; (400d5c <SetupPeripherals+0x68>)
  400cfc:	4798      	blx	r3

	pio_set_peripheral(PIOA, PIO_PERIPH_B, PIO_PA19B_PWML0);
  400cfe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400d02:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400d06:	4816      	ldr	r0, [pc, #88]	; (400d60 <SetupPeripherals+0x6c>)
  400d08:	4b16      	ldr	r3, [pc, #88]	; (400d64 <SetupPeripherals+0x70>)
  400d0a:	4798      	blx	r3
  400d0c:	201f      	movs	r0, #31
  400d0e:	4b16      	ldr	r3, [pc, #88]	; (400d68 <SetupPeripherals+0x74>)
  400d10:	4798      	blx	r3

	sysclk_enable_peripheral_clock(ID_PWM);
	pwm_channel_disable(PWM, PWM_CHANNEL_0);
  400d12:	4d16      	ldr	r5, [pc, #88]	; (400d6c <SetupPeripherals+0x78>)
  400d14:	2100      	movs	r1, #0
  400d16:	4628      	mov	r0, r5
  400d18:	4b15      	ldr	r3, [pc, #84]	; (400d70 <SetupPeripherals+0x7c>)
  400d1a:	4798      	blx	r3

	pwm_clock_t clockSetting = {
  400d1c:	f44f 237a 	mov.w	r3, #1024000	; 0xfa000
  400d20:	9301      	str	r3, [sp, #4]
  400d22:	2400      	movs	r4, #0
  400d24:	9402      	str	r4, [sp, #8]
  400d26:	4b13      	ldr	r3, [pc, #76]	; (400d74 <SetupPeripherals+0x80>)
  400d28:	9303      	str	r3, [sp, #12]
		.ul_clka = 1000 * 1024,
		.ul_clkb = 0,
		.ul_mck  = sysclk_get_cpu_hz()
	};
	pwm_init(PWM, &clockSetting);
  400d2a:	a901      	add	r1, sp, #4
  400d2c:	4628      	mov	r0, r5
  400d2e:	4b12      	ldr	r3, [pc, #72]	; (400d78 <SetupPeripherals+0x84>)
  400d30:	4798      	blx	r3

	pwmChannel0.channel = PWM_CHANNEL_0;
  400d32:	4912      	ldr	r1, [pc, #72]	; (400d7c <SetupPeripherals+0x88>)
  400d34:	600c      	str	r4, [r1, #0]
	pwmChannel0.ul_prescaler = PWM_CMR_CPRE_CLKA;
  400d36:	230b      	movs	r3, #11
  400d38:	604b      	str	r3, [r1, #4]
	pwmChannel0.ul_period = 1024;
  400d3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  400d3e:	610b      	str	r3, [r1, #16]
	pwmChannel0.ul_duty = 0;
  400d40:	60cc      	str	r4, [r1, #12]
	pwmChannel0.polarity = PWM_LOW;
  400d42:	728c      	strb	r4, [r1, #10]
	pwmChannel0.alignment = PWM_ALIGN_LEFT;
  400d44:	810c      	strh	r4, [r1, #8]

	pwm_channel_init(PWM, &pwmChannel0);
  400d46:	4628      	mov	r0, r5
  400d48:	4b0d      	ldr	r3, [pc, #52]	; (400d80 <SetupPeripherals+0x8c>)
  400d4a:	4798      	blx	r3
	pwm_channel_enable(PWM, PWM_CHANNEL_0);
  400d4c:	4621      	mov	r1, r4
  400d4e:	4628      	mov	r0, r5
  400d50:	4b0c      	ldr	r3, [pc, #48]	; (400d84 <SetupPeripherals+0x90>)
  400d52:	4798      	blx	r3
}
  400d54:	b005      	add	sp, #20
  400d56:	bd30      	pop	{r4, r5, pc}
  400d58:	400e1450 	.word	0x400e1450
  400d5c:	0040025b 	.word	0x0040025b
  400d60:	400e0e00 	.word	0x400e0e00
  400d64:	004005bd 	.word	0x004005bd
  400d68:	00400a4d 	.word	0x00400a4d
  400d6c:	40020000 	.word	0x40020000
  400d70:	00400409 	.word	0x00400409
  400d74:	07270e00 	.word	0x07270e00
  400d78:	004002b9 	.word	0x004002b9
  400d7c:	200004c8 	.word	0x200004c8
  400d80:	004002fd 	.word	0x004002fd
  400d84:	004003ff 	.word	0x004003ff

00400d88 <configure_adc>:

void configure_adc(void)
{
  400d88:	b538      	push	{r3, r4, r5, lr}
	pmc_enable_periph_clk(ID_ADC);
  400d8a:	201d      	movs	r0, #29
  400d8c:	4b13      	ldr	r3, [pc, #76]	; (400ddc <configure_adc+0x54>)
  400d8e:	4798      	blx	r3
	
	adc_init(ADC, sysclk_get_cpu_hz(), 6400000, STARTUP_TIME);
  400d90:	4c13      	ldr	r4, [pc, #76]	; (400de0 <configure_adc+0x58>)
  400d92:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  400d96:	4a13      	ldr	r2, [pc, #76]	; (400de4 <configure_adc+0x5c>)
  400d98:	4913      	ldr	r1, [pc, #76]	; (400de8 <configure_adc+0x60>)
  400d9a:	4620      	mov	r0, r4
  400d9c:	4d13      	ldr	r5, [pc, #76]	; (400dec <configure_adc+0x64>)
  400d9e:	47a8      	blx	r5
	
	adc_configure_timing(ADC, TRACKING_TIME	, ADC_SETTLING_TIME_3, TRANSFER_PERIOD);
  400da0:	2302      	movs	r3, #2
  400da2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
  400da6:	210f      	movs	r1, #15
  400da8:	4620      	mov	r0, r4
  400daa:	4d11      	ldr	r5, [pc, #68]	; (400df0 <configure_adc+0x68>)
  400dac:	47a8      	blx	r5

	adc_configure_trigger(ADC, ADC_TRIG_SW, 0);
  400dae:	2200      	movs	r2, #0
  400db0:	4611      	mov	r1, r2
  400db2:	4620      	mov	r0, r4
  400db4:	4b0f      	ldr	r3, [pc, #60]	; (400df4 <configure_adc+0x6c>)
  400db6:	4798      	blx	r3

	adc_enable_channel(ADC, ADC_CHANNEL);
  400db8:	2105      	movs	r1, #5
  400dba:	4620      	mov	r0, r4
  400dbc:	4b0e      	ldr	r3, [pc, #56]	; (400df8 <configure_adc+0x70>)
  400dbe:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400dc0:	4b0e      	ldr	r3, [pc, #56]	; (400dfc <configure_adc+0x74>)
  400dc2:	2250      	movs	r2, #80	; 0x50
  400dc4:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400dc8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400dcc:	601a      	str	r2, [r3, #0]

	NVIC_SetPriority(ADC_IRQn, 5);
	NVIC_EnableIRQ(ADC_IRQn);

	adc_enable_interrupt(ADC, ADC_IER_DRDY);
  400dce:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
  400dd2:	4620      	mov	r0, r4
  400dd4:	4b0a      	ldr	r3, [pc, #40]	; (400e00 <configure_adc+0x78>)
  400dd6:	4798      	blx	r3
  400dd8:	bd38      	pop	{r3, r4, r5, pc}
  400dda:	bf00      	nop
  400ddc:	00400a4d 	.word	0x00400a4d
  400de0:	40038000 	.word	0x40038000
  400de4:	0061a800 	.word	0x0061a800
  400de8:	07270e00 	.word	0x07270e00
  400dec:	00400139 	.word	0x00400139
  400df0:	0040017b 	.word	0x0040017b
  400df4:	0040016d 	.word	0x0040016d
  400df8:	0040019d 	.word	0x0040019d
  400dfc:	e000e100 	.word	0xe000e100
  400e00:	004001ab 	.word	0x004001ab

00400e04 <TC0_Handler>:
	tc_enable_interrupt(TC,	CHANNEL, TC_IER_CPCS);
	tc_start(TC, CHANNEL);
}

void TC_Handler(void)
{
  400e04:	b508      	push	{r3, lr}
	tc_get_status(TC,CHANNEL);
  400e06:	2100      	movs	r1, #0
  400e08:	4803      	ldr	r0, [pc, #12]	; (400e18 <TC0_Handler+0x14>)
  400e0a:	4b04      	ldr	r3, [pc, #16]	; (400e1c <TC0_Handler+0x18>)
  400e0c:	4798      	blx	r3
	adc_start(ADC);
  400e0e:	4804      	ldr	r0, [pc, #16]	; (400e20 <TC0_Handler+0x1c>)
  400e10:	4b04      	ldr	r3, [pc, #16]	; (400e24 <TC0_Handler+0x20>)
  400e12:	4798      	blx	r3
  400e14:	bd08      	pop	{r3, pc}
  400e16:	bf00      	nop
  400e18:	40010000 	.word	0x40010000
  400e1c:	004001e3 	.word	0x004001e3
  400e20:	40038000 	.word	0x40038000
  400e24:	00400197 	.word	0x00400197

00400e28 <ADC_Handler>:
}

void ADC_Handler(void)
{
  400e28:	b508      	push	{r3, lr}
	uint32_t adcResult = 0;
	if ((adc_get_status(ADC) & ADC_ISR_DRDY) == ADC_ISR_DRDY)
  400e2a:	4808      	ldr	r0, [pc, #32]	; (400e4c <ADC_Handler+0x24>)
  400e2c:	4b08      	ldr	r3, [pc, #32]	; (400e50 <ADC_Handler+0x28>)
  400e2e:	4798      	blx	r3
  400e30:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
  400e34:	d100      	bne.n	400e38 <ADC_Handler+0x10>
  400e36:	bd08      	pop	{r3, pc}
	{
		adcResult  = adc_get_latest_value(ADC);
  400e38:	4804      	ldr	r0, [pc, #16]	; (400e4c <ADC_Handler+0x24>)
  400e3a:	4b06      	ldr	r3, [pc, #24]	; (400e54 <ADC_Handler+0x2c>)
  400e3c:	4798      	blx	r3
		adcResult = (adcResult * 1024) / 4096;
		pwm_channel_update_duty(PWM, &pwmChannel0, adcResult);
  400e3e:	f3c0 0293 	ubfx	r2, r0, #2, #20
  400e42:	4905      	ldr	r1, [pc, #20]	; (400e58 <ADC_Handler+0x30>)
  400e44:	4805      	ldr	r0, [pc, #20]	; (400e5c <ADC_Handler+0x34>)
  400e46:	4b06      	ldr	r3, [pc, #24]	; (400e60 <ADC_Handler+0x38>)
  400e48:	4798      	blx	r3
	}
}
  400e4a:	e7f4      	b.n	400e36 <ADC_Handler+0xe>
  400e4c:	40038000 	.word	0x40038000
  400e50:	004001af 	.word	0x004001af
  400e54:	004001a7 	.word	0x004001a7
  400e58:	200004c8 	.word	0x200004c8
  400e5c:	40020000 	.word	0x40020000
  400e60:	004003e3 	.word	0x004003e3

00400e64 <main>:

int main (void)
{
  400e64:	b500      	push	{lr}
  400e66:	b085      	sub	sp, #20
	sysclk_init();
  400e68:	4b1c      	ldr	r3, [pc, #112]	; (400edc <main+0x78>)
  400e6a:	4798      	blx	r3
	board_init();
  400e6c:	4b1c      	ldr	r3, [pc, #112]	; (400ee0 <main+0x7c>)
  400e6e:	4798      	blx	r3
	configure_adc();
  400e70:	4b1c      	ldr	r3, [pc, #112]	; (400ee4 <main+0x80>)
  400e72:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC);
  400e74:	2017      	movs	r0, #23
  400e76:	4b1c      	ldr	r3, [pc, #112]	; (400ee8 <main+0x84>)
  400e78:	4798      	blx	r3
	tc_find_mck_divisor( freq_desejada, ul_sysclk, &ul_div, &ul_tcclks,	BOARD_MCK);
  400e7a:	4c1c      	ldr	r4, [pc, #112]	; (400eec <main+0x88>)
  400e7c:	9400      	str	r4, [sp, #0]
  400e7e:	ab03      	add	r3, sp, #12
  400e80:	aa02      	add	r2, sp, #8
  400e82:	4621      	mov	r1, r4
  400e84:	2032      	movs	r0, #50	; 0x32
  400e86:	4d1a      	ldr	r5, [pc, #104]	; (400ef0 <main+0x8c>)
  400e88:	47a8      	blx	r5
	tc_init(TC, CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  400e8a:	4d1a      	ldr	r5, [pc, #104]	; (400ef4 <main+0x90>)
  400e8c:	9a03      	ldr	r2, [sp, #12]
  400e8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  400e92:	2100      	movs	r1, #0
  400e94:	4628      	mov	r0, r5
  400e96:	4b18      	ldr	r3, [pc, #96]	; (400ef8 <main+0x94>)
  400e98:	4798      	blx	r3
	counts = (ul_sysclk/ul_div)/freq_desejada;
  400e9a:	9a02      	ldr	r2, [sp, #8]
  400e9c:	fbb4 f2f2 	udiv	r2, r4, r2
  400ea0:	4b16      	ldr	r3, [pc, #88]	; (400efc <main+0x98>)
  400ea2:	fba3 3202 	umull	r3, r2, r3, r2
	tc_write_rc(TC, CHANNEL, counts);
  400ea6:	0912      	lsrs	r2, r2, #4
  400ea8:	2100      	movs	r1, #0
  400eaa:	4628      	mov	r0, r5
  400eac:	4b14      	ldr	r3, [pc, #80]	; (400f00 <main+0x9c>)
  400eae:	4798      	blx	r3
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  400eb0:	4b14      	ldr	r3, [pc, #80]	; (400f04 <main+0xa0>)
  400eb2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
  400eb6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400eba:	2140      	movs	r1, #64	; 0x40
  400ebc:	f883 1317 	strb.w	r1, [r3, #791]	; 0x317
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400ec0:	601a      	str	r2, [r3, #0]
	tc_enable_interrupt(TC,	CHANNEL, TC_IER_CPCS);
  400ec2:	2210      	movs	r2, #16
  400ec4:	2100      	movs	r1, #0
  400ec6:	4628      	mov	r0, r5
  400ec8:	4b0f      	ldr	r3, [pc, #60]	; (400f08 <main+0xa4>)
  400eca:	4798      	blx	r3
	tc_start(TC, CHANNEL);
  400ecc:	2100      	movs	r1, #0
  400ece:	4628      	mov	r0, r5
  400ed0:	4b0e      	ldr	r3, [pc, #56]	; (400f0c <main+0xa8>)
  400ed2:	4798      	blx	r3
	tc_config(50);

	//https://www.inverseproblem.co.nz/Guides/index.php?n=ARM.ExPWM
	SetupPeripherals();
  400ed4:	4b0e      	ldr	r3, [pc, #56]	; (400f10 <main+0xac>)
  400ed6:	4798      	blx	r3
  400ed8:	e7fe      	b.n	400ed8 <main+0x74>
  400eda:	bf00      	nop
  400edc:	00400415 	.word	0x00400415
  400ee0:	00400479 	.word	0x00400479
  400ee4:	00400d89 	.word	0x00400d89
  400ee8:	00400a4d 	.word	0x00400a4d
  400eec:	07270e00 	.word	0x07270e00
  400ef0:	004001eb 	.word	0x004001eb
  400ef4:	40010000 	.word	0x40010000
  400ef8:	004001b3 	.word	0x004001b3
  400efc:	51eb851f 	.word	0x51eb851f
  400f00:	004001d3 	.word	0x004001d3
  400f04:	e000e100 	.word	0xe000e100
  400f08:	004001db 	.word	0x004001db
  400f0c:	004001cb 	.word	0x004001cb
  400f10:	00400cf5 	.word	0x00400cf5

00400f14 <__libc_init_array>:
  400f14:	b570      	push	{r4, r5, r6, lr}
  400f16:	4e0f      	ldr	r6, [pc, #60]	; (400f54 <__libc_init_array+0x40>)
  400f18:	4d0f      	ldr	r5, [pc, #60]	; (400f58 <__libc_init_array+0x44>)
  400f1a:	1b76      	subs	r6, r6, r5
  400f1c:	10b6      	asrs	r6, r6, #2
  400f1e:	bf18      	it	ne
  400f20:	2400      	movne	r4, #0
  400f22:	d005      	beq.n	400f30 <__libc_init_array+0x1c>
  400f24:	3401      	adds	r4, #1
  400f26:	f855 3b04 	ldr.w	r3, [r5], #4
  400f2a:	4798      	blx	r3
  400f2c:	42a6      	cmp	r6, r4
  400f2e:	d1f9      	bne.n	400f24 <__libc_init_array+0x10>
  400f30:	4e0a      	ldr	r6, [pc, #40]	; (400f5c <__libc_init_array+0x48>)
  400f32:	4d0b      	ldr	r5, [pc, #44]	; (400f60 <__libc_init_array+0x4c>)
  400f34:	1b76      	subs	r6, r6, r5
  400f36:	f000 f8bd 	bl	4010b4 <_init>
  400f3a:	10b6      	asrs	r6, r6, #2
  400f3c:	bf18      	it	ne
  400f3e:	2400      	movne	r4, #0
  400f40:	d006      	beq.n	400f50 <__libc_init_array+0x3c>
  400f42:	3401      	adds	r4, #1
  400f44:	f855 3b04 	ldr.w	r3, [r5], #4
  400f48:	4798      	blx	r3
  400f4a:	42a6      	cmp	r6, r4
  400f4c:	d1f9      	bne.n	400f42 <__libc_init_array+0x2e>
  400f4e:	bd70      	pop	{r4, r5, r6, pc}
  400f50:	bd70      	pop	{r4, r5, r6, pc}
  400f52:	bf00      	nop
  400f54:	004010c0 	.word	0x004010c0
  400f58:	004010c0 	.word	0x004010c0
  400f5c:	004010c8 	.word	0x004010c8
  400f60:	004010c0 	.word	0x004010c0

00400f64 <register_fini>:
  400f64:	4b02      	ldr	r3, [pc, #8]	; (400f70 <register_fini+0xc>)
  400f66:	b113      	cbz	r3, 400f6e <register_fini+0xa>
  400f68:	4802      	ldr	r0, [pc, #8]	; (400f74 <register_fini+0x10>)
  400f6a:	f000 b805 	b.w	400f78 <atexit>
  400f6e:	4770      	bx	lr
  400f70:	00000000 	.word	0x00000000
  400f74:	00400f85 	.word	0x00400f85

00400f78 <atexit>:
  400f78:	2300      	movs	r3, #0
  400f7a:	4601      	mov	r1, r0
  400f7c:	461a      	mov	r2, r3
  400f7e:	4618      	mov	r0, r3
  400f80:	f000 b81e 	b.w	400fc0 <__register_exitproc>

00400f84 <__libc_fini_array>:
  400f84:	b538      	push	{r3, r4, r5, lr}
  400f86:	4c0a      	ldr	r4, [pc, #40]	; (400fb0 <__libc_fini_array+0x2c>)
  400f88:	4d0a      	ldr	r5, [pc, #40]	; (400fb4 <__libc_fini_array+0x30>)
  400f8a:	1b64      	subs	r4, r4, r5
  400f8c:	10a4      	asrs	r4, r4, #2
  400f8e:	d00a      	beq.n	400fa6 <__libc_fini_array+0x22>
  400f90:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  400f94:	3b01      	subs	r3, #1
  400f96:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  400f9a:	3c01      	subs	r4, #1
  400f9c:	f855 3904 	ldr.w	r3, [r5], #-4
  400fa0:	4798      	blx	r3
  400fa2:	2c00      	cmp	r4, #0
  400fa4:	d1f9      	bne.n	400f9a <__libc_fini_array+0x16>
  400fa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400faa:	f000 b88d 	b.w	4010c8 <_fini>
  400fae:	bf00      	nop
  400fb0:	004010d8 	.word	0x004010d8
  400fb4:	004010d4 	.word	0x004010d4

00400fb8 <__retarget_lock_acquire_recursive>:
  400fb8:	4770      	bx	lr
  400fba:	bf00      	nop

00400fbc <__retarget_lock_release_recursive>:
  400fbc:	4770      	bx	lr
  400fbe:	bf00      	nop

00400fc0 <__register_exitproc>:
  400fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400fc4:	4d2c      	ldr	r5, [pc, #176]	; (401078 <__register_exitproc+0xb8>)
  400fc6:	4606      	mov	r6, r0
  400fc8:	6828      	ldr	r0, [r5, #0]
  400fca:	4698      	mov	r8, r3
  400fcc:	460f      	mov	r7, r1
  400fce:	4691      	mov	r9, r2
  400fd0:	f7ff fff2 	bl	400fb8 <__retarget_lock_acquire_recursive>
  400fd4:	4b29      	ldr	r3, [pc, #164]	; (40107c <__register_exitproc+0xbc>)
  400fd6:	681c      	ldr	r4, [r3, #0]
  400fd8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  400fdc:	2b00      	cmp	r3, #0
  400fde:	d03e      	beq.n	40105e <__register_exitproc+0x9e>
  400fe0:	685a      	ldr	r2, [r3, #4]
  400fe2:	2a1f      	cmp	r2, #31
  400fe4:	dc1c      	bgt.n	401020 <__register_exitproc+0x60>
  400fe6:	f102 0e01 	add.w	lr, r2, #1
  400fea:	b176      	cbz	r6, 40100a <__register_exitproc+0x4a>
  400fec:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  400ff0:	2401      	movs	r4, #1
  400ff2:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  400ff6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  400ffa:	4094      	lsls	r4, r2
  400ffc:	4320      	orrs	r0, r4
  400ffe:	2e02      	cmp	r6, #2
  401000:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  401004:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  401008:	d023      	beq.n	401052 <__register_exitproc+0x92>
  40100a:	3202      	adds	r2, #2
  40100c:	f8c3 e004 	str.w	lr, [r3, #4]
  401010:	6828      	ldr	r0, [r5, #0]
  401012:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  401016:	f7ff ffd1 	bl	400fbc <__retarget_lock_release_recursive>
  40101a:	2000      	movs	r0, #0
  40101c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401020:	4b17      	ldr	r3, [pc, #92]	; (401080 <__register_exitproc+0xc0>)
  401022:	b30b      	cbz	r3, 401068 <__register_exitproc+0xa8>
  401024:	f44f 70c8 	mov.w	r0, #400	; 0x190
  401028:	f3af 8000 	nop.w
  40102c:	4603      	mov	r3, r0
  40102e:	b1d8      	cbz	r0, 401068 <__register_exitproc+0xa8>
  401030:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  401034:	6002      	str	r2, [r0, #0]
  401036:	2100      	movs	r1, #0
  401038:	6041      	str	r1, [r0, #4]
  40103a:	460a      	mov	r2, r1
  40103c:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  401040:	f04f 0e01 	mov.w	lr, #1
  401044:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  401048:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  40104c:	2e00      	cmp	r6, #0
  40104e:	d0dc      	beq.n	40100a <__register_exitproc+0x4a>
  401050:	e7cc      	b.n	400fec <__register_exitproc+0x2c>
  401052:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  401056:	430c      	orrs	r4, r1
  401058:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  40105c:	e7d5      	b.n	40100a <__register_exitproc+0x4a>
  40105e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  401062:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  401066:	e7bb      	b.n	400fe0 <__register_exitproc+0x20>
  401068:	6828      	ldr	r0, [r5, #0]
  40106a:	f7ff ffa7 	bl	400fbc <__retarget_lock_release_recursive>
  40106e:	f04f 30ff 	mov.w	r0, #4294967295
  401072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401076:	bf00      	nop
  401078:	20000430 	.word	0x20000430
  40107c:	004010b0 	.word	0x004010b0
  401080:	00000000 	.word	0x00000000
  401084:	00000001 	.word	0x00000001
  401088:	00000002 	.word	0x00000002
  40108c:	00000004 	.word	0x00000004
  401090:	00000008 	.word	0x00000008
  401094:	00000010 	.word	0x00000010
  401098:	00000020 	.word	0x00000020
  40109c:	00000040 	.word	0x00000040
  4010a0:	00000080 	.word	0x00000080
  4010a4:	00000100 	.word	0x00000100
  4010a8:	00000200 	.word	0x00000200
  4010ac:	00000400 	.word	0x00000400

004010b0 <_global_impure_ptr>:
  4010b0:	20000008                                ... 

004010b4 <_init>:
  4010b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4010b6:	bf00      	nop
  4010b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4010ba:	bc08      	pop	{r3}
  4010bc:	469e      	mov	lr, r3
  4010be:	4770      	bx	lr

004010c0 <__init_array_start>:
  4010c0:	00400f65 	.word	0x00400f65

004010c4 <__frame_dummy_init_array_entry>:
  4010c4:	004000f1                                ..@.

004010c8 <_fini>:
  4010c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4010ca:	bf00      	nop
  4010cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4010ce:	bc08      	pop	{r3}
  4010d0:	469e      	mov	lr, r3
  4010d2:	4770      	bx	lr

004010d4 <__fini_array_start>:
  4010d4:	004000cd 	.word	0x004000cd
