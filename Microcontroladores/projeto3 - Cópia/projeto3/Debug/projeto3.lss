
projeto3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001044  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000440  20000000  00401044  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000000a0  20000440  00401484  00020440  2**2
                  ALLOC
  3 .stack        00003000  200004e0  00401524  00020440  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020440  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002046a  2**0
                  CONTENTS, READONLY
  6 .debug_info   00007d68  00000000  00000000  000204c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001544  00000000  00000000  0002822b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000558  00000000  00000000  0002976f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000004a8  00000000  00000000  00029cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  00003c7d  00000000  00000000  0002a16f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000835d  00000000  00000000  0002ddec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00051b9c  00000000  00000000  00036149  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000bfc  00000000  00000000  00087ce8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000285e  00000000  00000000  000888e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	200034e0 	.word	0x200034e0
  400004:	00400ba9 	.word	0x00400ba9
  400008:	00400ba5 	.word	0x00400ba5
  40000c:	00400ba5 	.word	0x00400ba5
  400010:	00400ba5 	.word	0x00400ba5
  400014:	00400ba5 	.word	0x00400ba5
  400018:	00400ba5 	.word	0x00400ba5
	...
  40002c:	00400ba5 	.word	0x00400ba5
  400030:	00400ba5 	.word	0x00400ba5
  400034:	00000000 	.word	0x00000000
  400038:	00400ba5 	.word	0x00400ba5
  40003c:	00400ba5 	.word	0x00400ba5
  400040:	00400ba5 	.word	0x00400ba5
  400044:	00400ba5 	.word	0x00400ba5
  400048:	00400ba5 	.word	0x00400ba5
  40004c:	00400ba5 	.word	0x00400ba5
  400050:	00400ba5 	.word	0x00400ba5
  400054:	00400ba5 	.word	0x00400ba5
  400058:	00400ba5 	.word	0x00400ba5
  40005c:	00400ba5 	.word	0x00400ba5
  400060:	00400ba5 	.word	0x00400ba5
  400064:	00400ba5 	.word	0x00400ba5
  400068:	00000000 	.word	0x00000000
  40006c:	0040070d 	.word	0x0040070d
  400070:	00400721 	.word	0x00400721
  400074:	00400735 	.word	0x00400735
  400078:	00400ba5 	.word	0x00400ba5
  40007c:	00400ba5 	.word	0x00400ba5
	...
  400088:	00400ba5 	.word	0x00400ba5
  40008c:	00400ba5 	.word	0x00400ba5
  400090:	00400ba5 	.word	0x00400ba5
  400094:	00400ba5 	.word	0x00400ba5
  400098:	00400ba5 	.word	0x00400ba5
  40009c:	00400ba5 	.word	0x00400ba5
  4000a0:	00400ba5 	.word	0x00400ba5
  4000a4:	00400ba5 	.word	0x00400ba5
  4000a8:	00400ba5 	.word	0x00400ba5
  4000ac:	00400ba5 	.word	0x00400ba5
  4000b0:	00400ba5 	.word	0x00400ba5
  4000b4:	00400ba5 	.word	0x00400ba5
  4000b8:	00400ba5 	.word	0x00400ba5
  4000bc:	00400ba5 	.word	0x00400ba5
  4000c0:	00400ba5 	.word	0x00400ba5
  4000c4:	00400ba5 	.word	0x00400ba5
  4000c8:	00400ba5 	.word	0x00400ba5

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000440 	.word	0x20000440
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00401044 	.word	0x00401044

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	20000444 	.word	0x20000444
  40011c:	00401044 	.word	0x00401044
  400120:	00401044 	.word	0x00401044
  400124:	00000000 	.word	0x00000000

00400128 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400128:	b510      	push	{r4, lr}
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40012a:	480e      	ldr	r0, [pc, #56]	; (400164 <sysclk_init+0x3c>)
  40012c:	4b0e      	ldr	r3, [pc, #56]	; (400168 <sysclk_init+0x40>)
  40012e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400130:	213e      	movs	r1, #62	; 0x3e
  400132:	2000      	movs	r0, #0
  400134:	4b0d      	ldr	r3, [pc, #52]	; (40016c <sysclk_init+0x44>)
  400136:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400138:	4c0d      	ldr	r4, [pc, #52]	; (400170 <sysclk_init+0x48>)
  40013a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  40013c:	2800      	cmp	r0, #0
  40013e:	d0fc      	beq.n	40013a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400140:	4b0c      	ldr	r3, [pc, #48]	; (400174 <sysclk_init+0x4c>)
  400142:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400144:	4a0c      	ldr	r2, [pc, #48]	; (400178 <sysclk_init+0x50>)
  400146:	4b0d      	ldr	r3, [pc, #52]	; (40017c <sysclk_init+0x54>)
  400148:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
  40014a:	4c0d      	ldr	r4, [pc, #52]	; (400180 <sysclk_init+0x58>)
  40014c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40014e:	2800      	cmp	r0, #0
  400150:	d0fc      	beq.n	40014c <sysclk_init+0x24>

		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400152:	2010      	movs	r0, #16
  400154:	4b0b      	ldr	r3, [pc, #44]	; (400184 <sysclk_init+0x5c>)
  400156:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400158:	4b0b      	ldr	r3, [pc, #44]	; (400188 <sysclk_init+0x60>)
  40015a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40015c:	4801      	ldr	r0, [pc, #4]	; (400164 <sysclk_init+0x3c>)
  40015e:	4b02      	ldr	r3, [pc, #8]	; (400168 <sysclk_init+0x40>)
  400160:	4798      	blx	r3
  400162:	bd10      	pop	{r4, pc}
  400164:	07270e00 	.word	0x07270e00
  400168:	00400d6d 	.word	0x00400d6d
  40016c:	004007b1 	.word	0x004007b1
  400170:	00400805 	.word	0x00400805
  400174:	00400815 	.word	0x00400815
  400178:	20133f01 	.word	0x20133f01
  40017c:	400e0400 	.word	0x400e0400
  400180:	00400825 	.word	0x00400825
  400184:	00400749 	.word	0x00400749
  400188:	00400c59 	.word	0x00400c59

0040018c <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
  40018c:	b538      	push	{r3, r4, r5, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  40018e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400192:	4b46      	ldr	r3, [pc, #280]	; (4002ac <board_init+0x120>)
  400194:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400196:	200b      	movs	r0, #11
  400198:	4c45      	ldr	r4, [pc, #276]	; (4002b0 <board_init+0x124>)
  40019a:	47a0      	blx	r4
  40019c:	200c      	movs	r0, #12
  40019e:	47a0      	blx	r4
  4001a0:	200d      	movs	r0, #13
  4001a2:	47a0      	blx	r4
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();

	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
  4001a4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4001a8:	2013      	movs	r0, #19
  4001aa:	4c42      	ldr	r4, [pc, #264]	; (4002b4 <board_init+0x128>)
  4001ac:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
  4001ae:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4001b2:	2014      	movs	r0, #20
  4001b4:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
  4001b6:	4940      	ldr	r1, [pc, #256]	; (4002b8 <board_init+0x12c>)
  4001b8:	2023      	movs	r0, #35	; 0x23
  4001ba:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
  4001bc:	493f      	ldr	r1, [pc, #252]	; (4002bc <board_init+0x130>)
  4001be:	204c      	movs	r0, #76	; 0x4c
  4001c0:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART0_PIO, PINS_UART0, PINS_UART0_FLAGS);
  4001c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  4001c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  4001ca:	483d      	ldr	r0, [pc, #244]	; (4002c0 <board_init+0x134>)
  4001cc:	4b3d      	ldr	r3, [pc, #244]	; (4002c4 <board_init+0x138>)
  4001ce:	4798      	blx	r3
#endif

	/* Configure ADC example pins */
#ifdef CONF_BOARD_ADC
	/* TC TIOA configuration */
	gpio_configure_pin(PIN_TC0_TIOA0,PIN_TC0_TIOA0_FLAGS);
  4001d0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4001d4:	2000      	movs	r0, #0
  4001d6:	47a0      	blx	r4

	/* ADC Trigger configuration */
	gpio_configure_pin(PINS_ADC_TRIG, PINS_ADC_TRIG_FLAG);
  4001d8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4001dc:	2008      	movs	r0, #8
  4001de:	47a0      	blx	r4

	/* PWMH0 configuration */
	gpio_configure_pin(PIN_PWMC_PWMH0_TRIG, PIN_PWMC_PWMH0_TRIG_FLAG);
  4001e0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4001e4:	2052      	movs	r0, #82	; 0x52
  4001e6:	47a0      	blx	r4
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
#endif

	/* Configure SPI pins */
#ifdef CONF_BOARD_SPI
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  4001e8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4001ec:	200c      	movs	r0, #12
  4001ee:	47a0      	blx	r4
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  4001f0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4001f4:	200d      	movs	r0, #13
  4001f6:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  4001f8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4001fc:	200e      	movs	r0, #14
  4001fe:	47a0      	blx	r4
	 * Hence a different PIN should be selected using the CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */

#  ifdef CONF_BOARD_SPI_NPCS0
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
  400200:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400204:	200b      	movs	r0, #11
  400206:	47a0      	blx	r4
#  endif
#endif /* CONF_BOARD_SPI */

#ifdef CONF_BOARD_USART_RXD
	/* Configure USART RXD pin */
	gpio_configure_pin(PIN_USART1_RXD_IDX, PIN_USART1_RXD_FLAGS);
  400208:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40020c:	2015      	movs	r0, #21
  40020e:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_USART_TXD
	/* Configure USART TXD pin */
	gpio_configure_pin(PIN_USART1_TXD_IDX, PIN_USART1_TXD_FLAGS);
  400210:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400214:	2016      	movs	r0, #22
  400216:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART1_SCK_IDX, PIN_USART1_SCK_FLAGS);
#endif

#ifdef CONF_BOARD_ADM3312_EN
	/* Configure ADM33312 enable pin */
	gpio_configure_pin(PIN_USART1_EN_IDX, PIN_USART1_EN_FLAGS);
  400218:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40021c:	2017      	movs	r0, #23
  40021e:	47a0      	blx	r4
	gpio_set_pin_low(PIN_USART1_EN_IDX);
  400220:	2017      	movs	r0, #23
  400222:	4b29      	ldr	r3, [pc, #164]	; (4002c8 <board_init+0x13c>)
  400224:	4798      	blx	r3
	gpio_set_pin_low(PIN_RE_IDX);
#endif

#if defined(CONF_BOARD_ILI9325) || defined(CONF_BOARD_ILI93XX)
	/* Configure LCD EBI pins */
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAGS);
  400226:	4d29      	ldr	r5, [pc, #164]	; (4002cc <board_init+0x140>)
  400228:	4629      	mov	r1, r5
  40022a:	2040      	movs	r0, #64	; 0x40
  40022c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAGS);
  40022e:	4629      	mov	r1, r5
  400230:	2041      	movs	r0, #65	; 0x41
  400232:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAGS);
  400234:	4629      	mov	r1, r5
  400236:	2042      	movs	r0, #66	; 0x42
  400238:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAGS);
  40023a:	4629      	mov	r1, r5
  40023c:	2043      	movs	r0, #67	; 0x43
  40023e:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAGS);
  400240:	4629      	mov	r1, r5
  400242:	2044      	movs	r0, #68	; 0x44
  400244:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAGS);
  400246:	4629      	mov	r1, r5
  400248:	2045      	movs	r0, #69	; 0x45
  40024a:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAGS);
  40024c:	4629      	mov	r1, r5
  40024e:	2046      	movs	r0, #70	; 0x46
  400250:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAGS);
  400252:	4629      	mov	r1, r5
  400254:	2047      	movs	r0, #71	; 0x47
  400256:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
  400258:	4629      	mov	r1, r5
  40025a:	204b      	movs	r0, #75	; 0x4b
  40025c:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
  40025e:	4629      	mov	r1, r5
  400260:	2048      	movs	r0, #72	; 0x48
  400262:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_NCS1, PIN_EBI_NCS1_FLAGS);
  400264:	4629      	mov	r1, r5
  400266:	204f      	movs	r0, #79	; 0x4f
  400268:	47a0      	blx	r4
	gpio_configure_pin(PIN_EBI_LCD_RS, PIN_EBI_LCD_RS_FLAGS);
  40026a:	4629      	mov	r1, r5
  40026c:	2053      	movs	r0, #83	; 0x53
  40026e:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_AAT3155
	/* Configure Backlight control pin */
	gpio_configure_pin(BOARD_AAT31XX_SET_GPIO, BOARD_AAT31XX_SET_FLAGS);
  400270:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400274:	204d      	movs	r0, #77	; 0x4d
  400276:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_ADS7843
	/* Configure Touchscreen SPI pins */
	gpio_configure_pin(BOARD_ADS7843_IRQ_GPIO,BOARD_ADS7843_IRQ_FLAGS);
  400278:	f105 5500 	add.w	r5, r5, #536870912	; 0x20000000
  40027c:	4629      	mov	r1, r5
  40027e:	2010      	movs	r0, #16
  400280:	47a0      	blx	r4
	gpio_configure_pin(BOARD_ADS7843_BUSY_GPIO, BOARD_ADS7843_BUSY_FLAGS);
  400282:	4629      	mov	r1, r5
  400284:	2011      	movs	r0, #17
  400286:	47a0      	blx	r4
	gpio_configure_pin(SPI_MISO_GPIO, SPI_MISO_FLAGS);
  400288:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40028c:	200c      	movs	r0, #12
  40028e:	47a0      	blx	r4
	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
  400290:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400294:	200d      	movs	r0, #13
  400296:	47a0      	blx	r4
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
  400298:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40029c:	200e      	movs	r0, #14
  40029e:	47a0      	blx	r4
	gpio_configure_pin(SPI_NPCS0_GPIO, SPI_NPCS0_FLAGS);
  4002a0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4002a4:	200b      	movs	r0, #11
  4002a6:	47a0      	blx	r4
  4002a8:	bd38      	pop	{r3, r4, r5, pc}
  4002aa:	bf00      	nop
  4002ac:	400e1450 	.word	0x400e1450
  4002b0:	00400841 	.word	0x00400841
  4002b4:	00400439 	.word	0x00400439
  4002b8:	28000079 	.word	0x28000079
  4002bc:	28000059 	.word	0x28000059
  4002c0:	400e0e00 	.word	0x400e0e00
  4002c4:	0040055d 	.word	0x0040055d
  4002c8:	004003f9 	.word	0x004003f9
  4002cc:	08000001 	.word	0x08000001

004002d0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4002d0:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4002d2:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4002d6:	d02f      	beq.n	400338 <pio_set_peripheral+0x68>
  4002d8:	d807      	bhi.n	4002ea <pio_set_peripheral+0x1a>
  4002da:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4002de:	d014      	beq.n	40030a <pio_set_peripheral+0x3a>
  4002e0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4002e4:	d01e      	beq.n	400324 <pio_set_peripheral+0x54>
  4002e6:	b939      	cbnz	r1, 4002f8 <pio_set_peripheral+0x28>
  4002e8:	4770      	bx	lr
  4002ea:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4002ee:	d036      	beq.n	40035e <pio_set_peripheral+0x8e>
  4002f0:	d804      	bhi.n	4002fc <pio_set_peripheral+0x2c>
  4002f2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4002f6:	d029      	beq.n	40034c <pio_set_peripheral+0x7c>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4002f8:	6042      	str	r2, [r0, #4]
  4002fa:	4770      	bx	lr

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4002fc:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400300:	d02d      	beq.n	40035e <pio_set_peripheral+0x8e>
  400302:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400306:	d02a      	beq.n	40035e <pio_set_peripheral+0x8e>
  400308:	e7f6      	b.n	4002f8 <pio_set_peripheral+0x28>
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  40030a:	b410      	push	{r4}
	p_pio->PIO_IDR = ul_mask;

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40030c:	6f04      	ldr	r4, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40030e:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400310:	43d3      	mvns	r3, r2
  400312:	4021      	ands	r1, r4
  400314:	4019      	ands	r1, r3
  400316:	6701      	str	r1, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400318:	6f44      	ldr	r4, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40031a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40031c:	4021      	ands	r1, r4
  40031e:	400b      	ands	r3, r1
  400320:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400322:	e01a      	b.n	40035a <pio_set_peripheral+0x8a>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400324:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400326:	4313      	orrs	r3, r2
  400328:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40032a:	6f41      	ldr	r1, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40032c:	6f43      	ldr	r3, [r0, #116]	; 0x74
  40032e:	400b      	ands	r3, r1
  400330:	ea23 0302 	bic.w	r3, r3, r2
  400334:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400336:	e7df      	b.n	4002f8 <pio_set_peripheral+0x28>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400338:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40033a:	6f03      	ldr	r3, [r0, #112]	; 0x70
  40033c:	400b      	ands	r3, r1
  40033e:	ea23 0302 	bic.w	r3, r3, r2
  400342:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400344:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400346:	4313      	orrs	r3, r2
  400348:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40034a:	e7d5      	b.n	4002f8 <pio_set_peripheral+0x28>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40034c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40034e:	4313      	orrs	r3, r2
  400350:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400352:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400354:	4313      	orrs	r3, r2
  400356:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400358:	e7ce      	b.n	4002f8 <pio_set_peripheral+0x28>
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40035a:	6042      	str	r2, [r0, #4]
}
  40035c:	bc10      	pop	{r4}
  40035e:	4770      	bx	lr

00400360 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400360:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400362:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
  400366:	bf14      	ite	ne
  400368:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40036a:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40036c:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
  400370:	bf14      	ite	ne
  400372:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
  400374:	6241      	streq	r1, [r0, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  400376:	f012 0f02 	tst.w	r2, #2
  40037a:	d002      	beq.n	400382 <pio_set_input+0x22>
		p_pio->PIO_IFSCDR = ul_mask;
  40037c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  400380:	e004      	b.n	40038c <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  400382:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_IFSCER = ul_mask;
  400386:	bf18      	it	ne
  400388:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  40038c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40038e:	6001      	str	r1, [r0, #0]
  400390:	4770      	bx	lr
  400392:	bf00      	nop

00400394 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  400394:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400396:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400398:	9c01      	ldr	r4, [sp, #4]
  40039a:	b10c      	cbz	r4, 4003a0 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
  40039c:	6641      	str	r1, [r0, #100]	; 0x64
  40039e:	e000      	b.n	4003a2 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4003a0:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4003a2:	b10b      	cbz	r3, 4003a8 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
  4003a4:	6501      	str	r1, [r0, #80]	; 0x50
  4003a6:	e000      	b.n	4003aa <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4003a8:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4003aa:	b10a      	cbz	r2, 4003b0 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
  4003ac:	6301      	str	r1, [r0, #48]	; 0x30
  4003ae:	e000      	b.n	4003b2 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4003b0:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4003b2:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4003b4:	6001      	str	r1, [r0, #0]
}
  4003b6:	bc10      	pop	{r4}
  4003b8:	4770      	bx	lr
  4003ba:	bf00      	nop

004003bc <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  4003bc:	f012 0f10 	tst.w	r2, #16
  4003c0:	d010      	beq.n	4003e4 <pio_configure_interrupt+0x28>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  4003c2:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4003c6:	f012 0f20 	tst.w	r2, #32
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  4003ca:	bf14      	ite	ne
  4003cc:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  4003d0:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  4003d4:	f012 0f40 	tst.w	r2, #64	; 0x40
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  4003d8:	bf14      	ite	ne
  4003da:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
  4003de:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
  4003e2:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
  4003e4:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  4003e8:	4770      	bx	lr
  4003ea:	bf00      	nop

004003ec <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IER = ul_mask;
  4003ec:	6401      	str	r1, [r0, #64]	; 0x40
  4003ee:	4770      	bx	lr

004003f0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4003f0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4003f2:	4770      	bx	lr

004003f4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4003f4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4003f6:	4770      	bx	lr

004003f8 <pio_set_pin_low>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4003f8:	0943      	lsrs	r3, r0, #5
  4003fa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4003fe:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400402:	025b      	lsls	r3, r3, #9
void pio_set_pin_low(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  400404:	f000 001f 	and.w	r0, r0, #31
  400408:	2201      	movs	r2, #1
  40040a:	fa02 f000 	lsl.w	r0, r2, r0
  40040e:	6358      	str	r0, [r3, #52]	; 0x34
  400410:	4770      	bx	lr
  400412:	bf00      	nop

00400414 <pio_toggle_pin>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  400414:	0943      	lsrs	r3, r0, #5
  400416:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40041a:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40041e:	025b      	lsls	r3, r3, #9
 */
void pio_toggle_pin(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
  400420:	6b99      	ldr	r1, [r3, #56]	; 0x38
  400422:	f000 001f 	and.w	r0, r0, #31
  400426:	2201      	movs	r2, #1
  400428:	fa02 f000 	lsl.w	r0, r2, r0
  40042c:	4201      	tst	r1, r0
		/* Value to be driven on the I/O line: 0. */
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  40042e:	bf14      	ite	ne
  400430:	6358      	strne	r0, [r3, #52]	; 0x34
	} else {
		/* Value to be driven on the I/O line: 1. */
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  400432:	6318      	streq	r0, [r3, #48]	; 0x30
  400434:	4770      	bx	lr
  400436:	bf00      	nop

00400438 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  400438:	b570      	push	{r4, r5, r6, lr}
  40043a:	b082      	sub	sp, #8
  40043c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40043e:	0943      	lsrs	r3, r0, #5
  400440:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400444:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400448:	025c      	lsls	r4, r3, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  40044a:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  40044e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  400452:	d047      	beq.n	4004e4 <pio_configure_pin+0xac>
  400454:	d809      	bhi.n	40046a <pio_configure_pin+0x32>
  400456:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40045a:	d021      	beq.n	4004a0 <pio_configure_pin+0x68>
  40045c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  400460:	d02f      	beq.n	4004c2 <pio_configure_pin+0x8a>
  400462:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400466:	d16f      	bne.n	400548 <pio_configure_pin+0x110>
  400468:	e009      	b.n	40047e <pio_configure_pin+0x46>
  40046a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40046e:	d055      	beq.n	40051c <pio_configure_pin+0xe4>
  400470:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400474:	d052      	beq.n	40051c <pio_configure_pin+0xe4>
  400476:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40047a:	d044      	beq.n	400506 <pio_configure_pin+0xce>
  40047c:	e064      	b.n	400548 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40047e:	f000 001f 	and.w	r0, r0, #31
  400482:	2601      	movs	r6, #1
  400484:	4086      	lsls	r6, r0
  400486:	4632      	mov	r2, r6
  400488:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40048c:	4620      	mov	r0, r4
  40048e:	4b30      	ldr	r3, [pc, #192]	; (400550 <pio_configure_pin+0x118>)
  400490:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  400492:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  400496:	bf14      	ite	ne
  400498:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40049a:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  40049c:	2001      	movs	r0, #1
  40049e:	e054      	b.n	40054a <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4004a0:	f000 001f 	and.w	r0, r0, #31
  4004a4:	2601      	movs	r6, #1
  4004a6:	4086      	lsls	r6, r0
  4004a8:	4632      	mov	r2, r6
  4004aa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4004ae:	4620      	mov	r0, r4
  4004b0:	4b27      	ldr	r3, [pc, #156]	; (400550 <pio_configure_pin+0x118>)
  4004b2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4004b4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4004b8:	bf14      	ite	ne
  4004ba:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4004bc:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4004be:	2001      	movs	r0, #1
  4004c0:	e043      	b.n	40054a <pio_configure_pin+0x112>
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4004c2:	f000 001f 	and.w	r0, r0, #31
  4004c6:	2601      	movs	r6, #1
  4004c8:	4086      	lsls	r6, r0
  4004ca:	4632      	mov	r2, r6
  4004cc:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4004d0:	4620      	mov	r0, r4
  4004d2:	4b1f      	ldr	r3, [pc, #124]	; (400550 <pio_configure_pin+0x118>)
  4004d4:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4004d6:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4004da:	bf14      	ite	ne
  4004dc:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4004de:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4004e0:	2001      	movs	r0, #1
  4004e2:	e032      	b.n	40054a <pio_configure_pin+0x112>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4004e4:	f000 001f 	and.w	r0, r0, #31
  4004e8:	2601      	movs	r6, #1
  4004ea:	4086      	lsls	r6, r0
  4004ec:	4632      	mov	r2, r6
  4004ee:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4004f2:	4620      	mov	r0, r4
  4004f4:	4b16      	ldr	r3, [pc, #88]	; (400550 <pio_configure_pin+0x118>)
  4004f6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4004f8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
  4004fc:	bf14      	ite	ne
  4004fe:	6666      	strne	r6, [r4, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  400500:	6626      	streq	r6, [r4, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  400502:	2001      	movs	r0, #1
  400504:	e021      	b.n	40054a <pio_configure_pin+0x112>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  400506:	f000 011f 	and.w	r1, r0, #31
  40050a:	2601      	movs	r6, #1
  40050c:	462a      	mov	r2, r5
  40050e:	fa06 f101 	lsl.w	r1, r6, r1
  400512:	4620      	mov	r0, r4
  400514:	4b0f      	ldr	r3, [pc, #60]	; (400554 <pio_configure_pin+0x11c>)
  400516:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  400518:	4630      	mov	r0, r6
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
  40051a:	e016      	b.n	40054a <pio_configure_pin+0x112>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40051c:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
  400520:	f000 011f 	and.w	r1, r0, #31
  400524:	2601      	movs	r6, #1
  400526:	ea05 0306 	and.w	r3, r5, r6
  40052a:	9300      	str	r3, [sp, #0]
  40052c:	f3c5 0380 	ubfx	r3, r5, #2, #1
  400530:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400534:	bf14      	ite	ne
  400536:	2200      	movne	r2, #0
  400538:	2201      	moveq	r2, #1
  40053a:	fa06 f101 	lsl.w	r1, r6, r1
  40053e:	4620      	mov	r0, r4
  400540:	4c05      	ldr	r4, [pc, #20]	; (400558 <pio_configure_pin+0x120>)
  400542:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  400544:	4630      	mov	r0, r6
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400546:	e000      	b.n	40054a <pio_configure_pin+0x112>

	default:
		return 0;
  400548:	2000      	movs	r0, #0
	}

	return 1;
}
  40054a:	b002      	add	sp, #8
  40054c:	bd70      	pop	{r4, r5, r6, pc}
  40054e:	bf00      	nop
  400550:	004002d1 	.word	0x004002d1
  400554:	00400361 	.word	0x00400361
  400558:	00400395 	.word	0x00400395

0040055c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
  40055c:	b570      	push	{r4, r5, r6, lr}
  40055e:	b082      	sub	sp, #8
  400560:	4605      	mov	r5, r0
  400562:	460e      	mov	r6, r1
  400564:	4614      	mov	r4, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  400566:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
  40056a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40056e:	d038      	beq.n	4005e2 <pio_configure_pin_group+0x86>
  400570:	d809      	bhi.n	400586 <pio_configure_pin_group+0x2a>
  400572:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  400576:	d01c      	beq.n	4005b2 <pio_configure_pin_group+0x56>
  400578:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40057c:	d025      	beq.n	4005ca <pio_configure_pin_group+0x6e>
  40057e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  400582:	d150      	bne.n	400626 <pio_configure_pin_group+0xca>
  400584:	e009      	b.n	40059a <pio_configure_pin_group+0x3e>
  400586:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40058a:	d03a      	beq.n	400602 <pio_configure_pin_group+0xa6>
  40058c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  400590:	d037      	beq.n	400602 <pio_configure_pin_group+0xa6>
  400592:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  400596:	d030      	beq.n	4005fa <pio_configure_pin_group+0x9e>
  400598:	e045      	b.n	400626 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
  40059a:	460a      	mov	r2, r1
  40059c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4005a0:	4b22      	ldr	r3, [pc, #136]	; (40062c <pio_configure_pin_group+0xd0>)
  4005a2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4005a4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4005a8:	bf14      	ite	ne
  4005aa:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4005ac:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4005ae:	2001      	movs	r0, #1
  4005b0:	e03a      	b.n	400628 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
  4005b2:	460a      	mov	r2, r1
  4005b4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4005b8:	4b1c      	ldr	r3, [pc, #112]	; (40062c <pio_configure_pin_group+0xd0>)
  4005ba:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4005bc:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4005c0:	bf14      	ite	ne
  4005c2:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4005c4:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4005c6:	2001      	movs	r0, #1
  4005c8:	e02e      	b.n	400628 <pio_configure_pin_group+0xcc>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
  4005ca:	460a      	mov	r2, r1
  4005cc:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4005d0:	4b16      	ldr	r3, [pc, #88]	; (40062c <pio_configure_pin_group+0xd0>)
  4005d2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4005d4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4005d8:	bf14      	ite	ne
  4005da:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4005dc:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4005de:	2001      	movs	r0, #1
  4005e0:	e022      	b.n	400628 <pio_configure_pin_group+0xcc>
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, ul_mask);
  4005e2:	460a      	mov	r2, r1
  4005e4:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4005e8:	4b10      	ldr	r3, [pc, #64]	; (40062c <pio_configure_pin_group+0xd0>)
  4005ea:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4005ec:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
  4005f0:	bf14      	ite	ne
  4005f2:	666e      	strne	r6, [r5, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4005f4:	662e      	streq	r6, [r5, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
  4005f6:	2001      	movs	r0, #1
  4005f8:	e016      	b.n	400628 <pio_configure_pin_group+0xcc>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
  4005fa:	4b0d      	ldr	r3, [pc, #52]	; (400630 <pio_configure_pin_group+0xd4>)
  4005fc:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
  4005fe:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
  400600:	e012      	b.n	400628 <pio_configure_pin_group+0xcc>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
  400602:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
  400606:	f004 0301 	and.w	r3, r4, #1
  40060a:	9300      	str	r3, [sp, #0]
  40060c:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400610:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  400614:	bf14      	ite	ne
  400616:	2200      	movne	r2, #0
  400618:	2201      	moveq	r2, #1
  40061a:	4631      	mov	r1, r6
  40061c:	4628      	mov	r0, r5
  40061e:	4c05      	ldr	r4, [pc, #20]	; (400634 <pio_configure_pin_group+0xd8>)
  400620:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
  400622:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  400624:	e000      	b.n	400628 <pio_configure_pin_group+0xcc>

	default:
		return 0;
  400626:	2000      	movs	r0, #0
	}

	return 1;
}
  400628:	b002      	add	sp, #8
  40062a:	bd70      	pop	{r4, r5, r6, pc}
  40062c:	004002d1 	.word	0x004002d1
  400630:	00400361 	.word	0x00400361
  400634:	00400395 	.word	0x00400395

00400638 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  400638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40063c:	4681      	mov	r9, r0
  40063e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400640:	4b12      	ldr	r3, [pc, #72]	; (40068c <pio_handler_process+0x54>)
  400642:	4798      	blx	r3
  400644:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  400646:	4648      	mov	r0, r9
  400648:	4b11      	ldr	r3, [pc, #68]	; (400690 <pio_handler_process+0x58>)
  40064a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40064c:	4005      	ands	r5, r0
  40064e:	d013      	beq.n	400678 <pio_handler_process+0x40>
  400650:	4c10      	ldr	r4, [pc, #64]	; (400694 <pio_handler_process+0x5c>)
  400652:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  400656:	6823      	ldr	r3, [r4, #0]
  400658:	4543      	cmp	r3, r8
  40065a:	d108      	bne.n	40066e <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40065c:	6861      	ldr	r1, [r4, #4]
  40065e:	4229      	tst	r1, r5
  400660:	d005      	beq.n	40066e <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400662:	68e3      	ldr	r3, [r4, #12]
  400664:	4640      	mov	r0, r8
  400666:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  400668:	6863      	ldr	r3, [r4, #4]
  40066a:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40066e:	42b4      	cmp	r4, r6
  400670:	d002      	beq.n	400678 <pio_handler_process+0x40>
  400672:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  400674:	2d00      	cmp	r5, #0
  400676:	d1ee      	bne.n	400656 <pio_handler_process+0x1e>
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  400678:	4b07      	ldr	r3, [pc, #28]	; (400698 <pio_handler_process+0x60>)
  40067a:	681b      	ldr	r3, [r3, #0]
  40067c:	b123      	cbz	r3, 400688 <pio_handler_process+0x50>
		if (pio_capture_handler) {
  40067e:	4b07      	ldr	r3, [pc, #28]	; (40069c <pio_handler_process+0x64>)
  400680:	681b      	ldr	r3, [r3, #0]
  400682:	b10b      	cbz	r3, 400688 <pio_handler_process+0x50>
			pio_capture_handler(p_pio);
  400684:	4648      	mov	r0, r9
  400686:	4798      	blx	r3
  400688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40068c:	004003f1 	.word	0x004003f1
  400690:	004003f5 	.word	0x004003f5
  400694:	20000464 	.word	0x20000464
  400698:	200004dc 	.word	0x200004dc
  40069c:	20000460 	.word	0x20000460

004006a0 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4006a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4006a2:	4c17      	ldr	r4, [pc, #92]	; (400700 <pio_handler_set+0x60>)
  4006a4:	6826      	ldr	r6, [r4, #0]
  4006a6:	2e06      	cmp	r6, #6
  4006a8:	d828      	bhi.n	4006fc <pio_handler_set+0x5c>
  4006aa:	f04f 0c00 	mov.w	ip, #0
  4006ae:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4006b0:	4f14      	ldr	r7, [pc, #80]	; (400704 <pio_handler_set+0x64>)
	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
  4006b2:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4006b4:	0125      	lsls	r5, r4, #4
  4006b6:	597d      	ldr	r5, [r7, r5]
  4006b8:	428d      	cmp	r5, r1
  4006ba:	d104      	bne.n	4006c6 <pio_handler_set+0x26>
  4006bc:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  4006c0:	686d      	ldr	r5, [r5, #4]
  4006c2:	4295      	cmp	r5, r2
  4006c4:	d004      	beq.n	4006d0 <pio_handler_set+0x30>

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4006c6:	3401      	adds	r4, #1
  4006c8:	b2e4      	uxtb	r4, r4
  4006ca:	46a4      	mov	ip, r4
  4006cc:	42a6      	cmp	r6, r4
  4006ce:	d2f0      	bcs.n	4006b2 <pio_handler_set+0x12>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4006d0:	4d0c      	ldr	r5, [pc, #48]	; (400704 <pio_handler_set+0x64>)
  4006d2:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  4006d6:	eb05 040e 	add.w	r4, r5, lr
  4006da:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  4006de:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4006e0:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4006e2:	9906      	ldr	r1, [sp, #24]
  4006e4:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  4006e6:	3601      	adds	r6, #1
  4006e8:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
  4006ea:	bf04      	itt	eq
  4006ec:	4904      	ldreq	r1, [pc, #16]	; (400700 <pio_handler_set+0x60>)
  4006ee:	600e      	streq	r6, [r1, #0]
  4006f0:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4006f2:	461a      	mov	r2, r3
  4006f4:	4b04      	ldr	r3, [pc, #16]	; (400708 <pio_handler_set+0x68>)
  4006f6:	4798      	blx	r3

	return 0;
  4006f8:	2000      	movs	r0, #0
  4006fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
{
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
		return 1;
  4006fc:	2001      	movs	r0, #1

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);

	return 0;
}
  4006fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400700:	2000045c 	.word	0x2000045c
  400704:	20000464 	.word	0x20000464
  400708:	004003bd 	.word	0x004003bd

0040070c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40070c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40070e:	210b      	movs	r1, #11
  400710:	4801      	ldr	r0, [pc, #4]	; (400718 <PIOA_Handler+0xc>)
  400712:	4b02      	ldr	r3, [pc, #8]	; (40071c <PIOA_Handler+0x10>)
  400714:	4798      	blx	r3
  400716:	bd08      	pop	{r3, pc}
  400718:	400e0e00 	.word	0x400e0e00
  40071c:	00400639 	.word	0x00400639

00400720 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400720:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400722:	210c      	movs	r1, #12
  400724:	4801      	ldr	r0, [pc, #4]	; (40072c <PIOB_Handler+0xc>)
  400726:	4b02      	ldr	r3, [pc, #8]	; (400730 <PIOB_Handler+0x10>)
  400728:	4798      	blx	r3
  40072a:	bd08      	pop	{r3, pc}
  40072c:	400e1000 	.word	0x400e1000
  400730:	00400639 	.word	0x00400639

00400734 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400734:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400736:	210d      	movs	r1, #13
  400738:	4801      	ldr	r0, [pc, #4]	; (400740 <PIOC_Handler+0xc>)
  40073a:	4b02      	ldr	r3, [pc, #8]	; (400744 <PIOC_Handler+0x10>)
  40073c:	4798      	blx	r3
  40073e:	bd08      	pop	{r3, pc}
  400740:	400e1200 	.word	0x400e1200
  400744:	00400639 	.word	0x00400639

00400748 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400748:	4a18      	ldr	r2, [pc, #96]	; (4007ac <pmc_switch_mck_to_pllack+0x64>)
  40074a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40074c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400750:	4318      	orrs	r0, r3
  400752:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400754:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400756:	f013 0f08 	tst.w	r3, #8
  40075a:	d003      	beq.n	400764 <pmc_switch_mck_to_pllack+0x1c>
  40075c:	e009      	b.n	400772 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40075e:	3b01      	subs	r3, #1
  400760:	d103      	bne.n	40076a <pmc_switch_mck_to_pllack+0x22>
  400762:	e01e      	b.n	4007a2 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400764:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400768:	4910      	ldr	r1, [pc, #64]	; (4007ac <pmc_switch_mck_to_pllack+0x64>)
  40076a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40076c:	f012 0f08 	tst.w	r2, #8
  400770:	d0f5      	beq.n	40075e <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400772:	4a0e      	ldr	r2, [pc, #56]	; (4007ac <pmc_switch_mck_to_pllack+0x64>)
  400774:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400776:	f023 0303 	bic.w	r3, r3, #3
  40077a:	f043 0302 	orr.w	r3, r3, #2
  40077e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400780:	6e90      	ldr	r0, [r2, #104]	; 0x68
  400782:	f010 0008 	ands.w	r0, r0, #8
  400786:	d004      	beq.n	400792 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  400788:	2000      	movs	r0, #0
  40078a:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
  40078c:	3b01      	subs	r3, #1
  40078e:	d103      	bne.n	400798 <pmc_switch_mck_to_pllack+0x50>
  400790:	e009      	b.n	4007a6 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400792:	f44f 6300 	mov.w	r3, #2048	; 0x800
  400796:	4905      	ldr	r1, [pc, #20]	; (4007ac <pmc_switch_mck_to_pllack+0x64>)
  400798:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40079a:	f012 0f08 	tst.w	r2, #8
  40079e:	d0f5      	beq.n	40078c <pmc_switch_mck_to_pllack+0x44>
  4007a0:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4007a2:	2001      	movs	r0, #1
  4007a4:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
  4007a6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4007a8:	4770      	bx	lr
  4007aa:	bf00      	nop
  4007ac:	400e0400 	.word	0x400e0400

004007b0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4007b0:	b138      	cbz	r0, 4007c2 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4007b2:	4911      	ldr	r1, [pc, #68]	; (4007f8 <pmc_switch_mainck_to_xtal+0x48>)
  4007b4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4007b6:	4a11      	ldr	r2, [pc, #68]	; (4007fc <pmc_switch_mainck_to_xtal+0x4c>)
  4007b8:	401a      	ands	r2, r3
  4007ba:	4b11      	ldr	r3, [pc, #68]	; (400800 <pmc_switch_mainck_to_xtal+0x50>)
  4007bc:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4007be:	620b      	str	r3, [r1, #32]
  4007c0:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4007c2:	480d      	ldr	r0, [pc, #52]	; (4007f8 <pmc_switch_mainck_to_xtal+0x48>)
  4007c4:	6a02      	ldr	r2, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4007c6:	0209      	lsls	r1, r1, #8
  4007c8:	b289      	uxth	r1, r1
  4007ca:	f422 135c 	bic.w	r3, r2, #3604480	; 0x370000
  4007ce:	f023 0303 	bic.w	r3, r3, #3
  4007d2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4007d6:	f043 0301 	orr.w	r3, r3, #1
  4007da:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4007dc:	6203      	str	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4007de:	4602      	mov	r2, r0
  4007e0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007e2:	f013 0f01 	tst.w	r3, #1
  4007e6:	d0fb      	beq.n	4007e0 <pmc_switch_mainck_to_xtal+0x30>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4007e8:	4a03      	ldr	r2, [pc, #12]	; (4007f8 <pmc_switch_mainck_to_xtal+0x48>)
  4007ea:	6a13      	ldr	r3, [r2, #32]
  4007ec:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4007f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4007f4:	6213      	str	r3, [r2, #32]
  4007f6:	4770      	bx	lr
  4007f8:	400e0400 	.word	0x400e0400
  4007fc:	fec8fffc 	.word	0xfec8fffc
  400800:	01370002 	.word	0x01370002

00400804 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400804:	4b02      	ldr	r3, [pc, #8]	; (400810 <pmc_osc_is_ready_mainck+0xc>)
  400806:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400808:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40080c:	4770      	bx	lr
  40080e:	bf00      	nop
  400810:	400e0400 	.word	0x400e0400

00400814 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400814:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400818:	4b01      	ldr	r3, [pc, #4]	; (400820 <pmc_disable_pllack+0xc>)
  40081a:	629a      	str	r2, [r3, #40]	; 0x28
  40081c:	4770      	bx	lr
  40081e:	bf00      	nop
  400820:	400e0400 	.word	0x400e0400

00400824 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400824:	4b02      	ldr	r3, [pc, #8]	; (400830 <pmc_is_locked_pllack+0xc>)
  400826:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400828:	f000 0002 	and.w	r0, r0, #2
  40082c:	4770      	bx	lr
  40082e:	bf00      	nop
  400830:	400e0400 	.word	0x400e0400

00400834 <pmc_disable_pllbck>:
/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  400834:	2200      	movs	r2, #0
  400836:	4b01      	ldr	r3, [pc, #4]	; (40083c <pmc_disable_pllbck+0x8>)
  400838:	62da      	str	r2, [r3, #44]	; 0x2c
  40083a:	4770      	bx	lr
  40083c:	400e0400 	.word	0x400e0400

00400840 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400840:	2822      	cmp	r0, #34	; 0x22
  400842:	d81e      	bhi.n	400882 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400844:	281f      	cmp	r0, #31
  400846:	d80c      	bhi.n	400862 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400848:	4b11      	ldr	r3, [pc, #68]	; (400890 <pmc_enable_periph_clk+0x50>)
  40084a:	699a      	ldr	r2, [r3, #24]
  40084c:	2301      	movs	r3, #1
  40084e:	4083      	lsls	r3, r0
  400850:	4393      	bics	r3, r2
  400852:	d018      	beq.n	400886 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400854:	2301      	movs	r3, #1
  400856:	fa03 f000 	lsl.w	r0, r3, r0
  40085a:	4b0d      	ldr	r3, [pc, #52]	; (400890 <pmc_enable_periph_clk+0x50>)
  40085c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  40085e:	2000      	movs	r0, #0
  400860:	4770      	bx	lr
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  400862:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  400864:	4b0a      	ldr	r3, [pc, #40]	; (400890 <pmc_enable_periph_clk+0x50>)
  400866:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  40086a:	2301      	movs	r3, #1
  40086c:	4083      	lsls	r3, r0
  40086e:	4393      	bics	r3, r2
  400870:	d00b      	beq.n	40088a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400872:	2301      	movs	r3, #1
  400874:	fa03 f000 	lsl.w	r0, r3, r0
  400878:	4b05      	ldr	r3, [pc, #20]	; (400890 <pmc_enable_periph_clk+0x50>)
  40087a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
  40087e:	2000      	movs	r0, #0
  400880:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
  400882:	2001      	movs	r0, #1
  400884:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400886:	2000      	movs	r0, #0
  400888:	4770      	bx	lr
  40088a:	2000      	movs	r0, #0
}
  40088c:	4770      	bx	lr
  40088e:	bf00      	nop
  400890:	400e0400 	.word	0x400e0400

00400894 <pmc_set_flash_in_wait_mode>:
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
	ul_flash_in_wait_mode = ul_flash_state;
  400894:	4b01      	ldr	r3, [pc, #4]	; (40089c <pmc_set_flash_in_wait_mode+0x8>)
  400896:	6018      	str	r0, [r3, #0]
  400898:	4770      	bx	lr
  40089a:	bf00      	nop
  40089c:	20000010 	.word	0x20000010

004008a0 <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  4008a0:	4a11      	ldr	r2, [pc, #68]	; (4008e8 <pmc_enable_waitmode+0x48>)
  4008a2:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4008a4:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
  4008a8:	4b10      	ldr	r3, [pc, #64]	; (4008ec <pmc_enable_waitmode+0x4c>)
  4008aa:	681b      	ldr	r3, [r3, #0]
  4008ac:	430b      	orrs	r3, r1
#else
	i |= PMC_WAIT_MODE_FLASH_IDLE;
#endif
	PMC->PMC_FSMR = i;
  4008ae:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  4008b0:	6a13      	ldr	r3, [r2, #32]
  4008b2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4008b6:	f043 0304 	orr.w	r3, r3, #4
  4008ba:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4008bc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4008be:	f013 0f08 	tst.w	r3, #8
  4008c2:	d0fb      	beq.n	4008bc <pmc_enable_waitmode+0x1c>
  4008c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4008c8:	bf00      	nop

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  4008ca:	3b01      	subs	r3, #1
  4008cc:	d1fc      	bne.n	4008c8 <pmc_enable_waitmode+0x28>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  4008ce:	4a06      	ldr	r2, [pc, #24]	; (4008e8 <pmc_enable_waitmode+0x48>)
  4008d0:	6a13      	ldr	r3, [r2, #32]
  4008d2:	f013 0f08 	tst.w	r3, #8
  4008d6:	d0fb      	beq.n	4008d0 <pmc_enable_waitmode+0x30>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  4008d8:	4a03      	ldr	r2, [pc, #12]	; (4008e8 <pmc_enable_waitmode+0x48>)
  4008da:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4008dc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4008e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  4008e4:	6713      	str	r3, [r2, #112]	; 0x70
  4008e6:	4770      	bx	lr
  4008e8:	400e0400 	.word	0x400e0400
  4008ec:	20000010 	.word	0x20000010

004008f0 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  4008f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (sleep_mode) {
  4008f4:	1e43      	subs	r3, r0, #1
  4008f6:	2b04      	cmp	r3, #4
  4008f8:	f200 8134 	bhi.w	400b64 <pmc_sleep+0x274>
  4008fc:	e8df f013 	tbh	[pc, r3, lsl #1]
  400900:	00050005 	.word	0x00050005
  400904:	00130013 	.word	0x00130013
  400908:	0123      	.short	0x0123
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  40090a:	4a97      	ldr	r2, [pc, #604]	; (400b68 <pmc_sleep+0x278>)
  40090c:	6913      	ldr	r3, [r2, #16]
  40090e:	f023 0304 	bic.w	r3, r3, #4
  400912:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  400914:	2201      	movs	r2, #1
  400916:	4b95      	ldr	r3, [pc, #596]	; (400b6c <pmc_sleep+0x27c>)
  400918:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  40091a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40091e:	b662      	cpsie	i
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
  400920:	bf30      	wfi
  400922:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400926:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  400928:	2803      	cmp	r0, #3
  40092a:	bf0c      	ite	eq
  40092c:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  40092e:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  400932:	4b8f      	ldr	r3, [pc, #572]	; (400b70 <pmc_sleep+0x280>)
  400934:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400936:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400938:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  40093c:	2200      	movs	r2, #0
  40093e:	4b8b      	ldr	r3, [pc, #556]	; (400b6c <pmc_sleep+0x27c>)
  400940:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  400942:	2201      	movs	r2, #1
  400944:	4b8b      	ldr	r3, [pc, #556]	; (400b74 <pmc_sleep+0x284>)
  400946:	701a      	strb	r2, [r3, #0]
#if defined(EFC1)
		uint32_t *p_fmr_setting1,
#endif
		const bool disable_xtal)
{
	uint32_t mor  = PMC->CKGR_MOR;
  400948:	4b8b      	ldr	r3, [pc, #556]	; (400b78 <pmc_sleep+0x288>)
  40094a:	f8d3 8020 	ldr.w	r8, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  40094e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  400950:	4a8a      	ldr	r2, [pc, #552]	; (400b7c <pmc_sleep+0x28c>)
  400952:	f8d2 a000 	ldr.w	sl, [r2]
# if defined(EFC1)
	uint32_t fmr1 = EFC1->EEFC_FMR;
  400956:	f502 7200 	add.w	r2, r2, #512	; 0x200
  40095a:	f8d2 9000 	ldr.w	r9, [r2]

	if (p_osc_setting) {
		*p_osc_setting = mor;
	}
	if (p_pll0_setting) {
		*p_pll0_setting = PMC->CKGR_PLLAR;
  40095e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
	}
	if (p_pll1_setting) {
#if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP)
		*p_pll1_setting = PMC->CKGR_PLLBR;
  400960:	f8d3 b02c 	ldr.w	fp, [r3, #44]	; 0x2c
		*p_fmr_setting1 = fmr1;
	}
#endif

	/* Enable FAST RC */
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  400964:	f448 125c 	orr.w	r2, r8, #3604480	; 0x370000
  400968:	f042 0208 	orr.w	r2, r2, #8
  40096c:	621a      	str	r2, [r3, #32]
	/* if MCK source is PLL, switch to mainck */
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  40096e:	f005 0603 	and.w	r6, r5, #3
  400972:	2e01      	cmp	r6, #1
  400974:	d90a      	bls.n	40098c <pmc_sleep+0x9c>
		/* MCK -> MAINCK */
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  400976:	f025 0103 	bic.w	r1, r5, #3
  40097a:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  40097e:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400980:	461a      	mov	r2, r3
  400982:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400984:	f013 0f08 	tst.w	r3, #8
  400988:	d0fb      	beq.n	400982 <pmc_sleep+0x92>
  40098a:	e000      	b.n	40098e <pmc_sleep+0x9e>
		uint32_t *p_fmr_setting1,
#endif
		const bool disable_xtal)
{
	uint32_t mor  = PMC->CKGR_MOR;
	uint32_t mckr = PMC->PMC_MCKR;
  40098c:	4629      	mov	r1, r5
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
		PMC->PMC_MCKR = mckr;
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
	}
	/* MCK prescale -> 1 */
	if (mckr & PMC_MCKR_PRES_Msk) {
  40098e:	f011 0f70 	tst.w	r1, #112	; 0x70
  400992:	d008      	beq.n	4009a6 <pmc_sleep+0xb6>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  400994:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  400998:	4b77      	ldr	r3, [pc, #476]	; (400b78 <pmc_sleep+0x288>)
  40099a:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40099c:	461a      	mov	r2, r3
  40099e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4009a0:	f013 0f08 	tst.w	r3, #8
  4009a4:	d0fb      	beq.n	40099e <pmc_sleep+0xae>
	}
	/* Disable PLLs */
	pmc_disable_pllack();
  4009a6:	4b76      	ldr	r3, [pc, #472]	; (400b80 <pmc_sleep+0x290>)
  4009a8:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP)
	pmc_disable_pllbck();
  4009aa:	4b76      	ldr	r3, [pc, #472]	; (400b84 <pmc_sleep+0x294>)
  4009ac:	4798      	blx	r3
	pmc_disable_upll_clock();
#endif

	/* Prepare for entering WAIT mode */
	/* Wait fast RC ready */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4009ae:	4a72      	ldr	r2, [pc, #456]	; (400b78 <pmc_sleep+0x288>)
  4009b0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4009b2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4009b6:	d0fb      	beq.n	4009b0 <pmc_sleep+0xc0>
	EFC0->EEFC_FMR = (fmr & (~EEFC_FMR_FWS_Msk)) | EEFC_FMR_FWS(1);

	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) | CKGR_MOR_MOSCRCF_24_MHz |
			CKGR_MOR_KEY_PASSWD;
#else
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4009b8:	4a6f      	ldr	r2, [pc, #444]	; (400b78 <pmc_sleep+0x288>)
  4009ba:	6a13      	ldr	r3, [r2, #32]
  4009bc:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  4009c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  4009c4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4009c8:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
#endif
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  4009ca:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4009cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4009d0:	d0fb      	beq.n	4009ca <pmc_sleep+0xda>

#if (!SAMG)
	/* FWS update */
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  4009d2:	f42a 6370 	bic.w	r3, sl, #3840	; 0xf00
  4009d6:	4a69      	ldr	r2, [pc, #420]	; (400b7c <pmc_sleep+0x28c>)
  4009d8:	6013      	str	r3, [r2, #0]
#if defined(EFC1)
	EFC1->EEFC_FMR = fmr1 & (~EEFC_FMR_FWS_Msk);
  4009da:	f429 6370 	bic.w	r3, r9, #3840	; 0xf00
  4009de:	f502 7200 	add.w	r2, r2, #512	; 0x200
  4009e2:	6013      	str	r3, [r2, #0]
#endif
#endif

	/* Disable XTALs */
	if (disable_xtal) {
  4009e4:	2c04      	cmp	r4, #4
  4009e6:	d109      	bne.n	4009fc <pmc_sleep+0x10c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4009e8:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
  4009ec:	6a13      	ldr	r3, [r2, #32]
  4009ee:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4009f2:	f023 0301 	bic.w	r3, r3, #1
  4009f6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4009fa:	6213      	str	r3, [r2, #32]
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  4009fc:	4c5b      	ldr	r4, [pc, #364]	; (400b6c <pmc_sleep+0x27c>)
  4009fe:	2301      	movs	r3, #1
  400a00:	7023      	strb	r3, [r4, #0]
  400a02:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400a06:	b662      	cpsie	i

		pmc_enable_waitmode();
  400a08:	4b5f      	ldr	r3, [pc, #380]	; (400b88 <pmc_sleep+0x298>)
  400a0a:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400a0c:	b672      	cpsid	i
  400a0e:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  400a12:	2300      	movs	r3, #0
  400a14:	7023      	strb	r3, [r4, #0]
{
	uint32_t mckr;
	uint32_t pll_sr = 0;

	/* Switch mainck to external xtal */
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  400a16:	f018 0f02 	tst.w	r8, #2
  400a1a:	d00f      	beq.n	400a3c <pmc_sleep+0x14c>
		/* Bypass mode */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400a1c:	4a56      	ldr	r2, [pc, #344]	; (400b78 <pmc_sleep+0x288>)
  400a1e:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400a20:	495a      	ldr	r1, [pc, #360]	; (400b8c <pmc_sleep+0x29c>)
  400a22:	4019      	ands	r1, r3
  400a24:	4b5a      	ldr	r3, [pc, #360]	; (400b90 <pmc_sleep+0x2a0>)
  400a26:	430b      	orrs	r3, r1
	uint32_t pll_sr = 0;

	/* Switch mainck to external xtal */
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
		/* Bypass mode */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400a28:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  400a2a:	6a13      	ldr	r3, [r2, #32]
					~CKGR_MOR_MOSCRCF_Msk)
				| CKGR_MOR_KEY_PASSWD;
  400a2c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400a30:	f023 0378 	bic.w	r3, r3, #120	; 0x78
  400a34:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
		/* Bypass mode */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  400a38:	6213      	str	r3, [r2, #32]
  400a3a:	e02f      	b.n	400a9c <pmc_sleep+0x1ac>
					~CKGR_MOR_MOSCRCF_Msk)
				| CKGR_MOR_KEY_PASSWD;
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  400a3c:	f018 0f01 	tst.w	r8, #1
  400a40:	d02c      	beq.n	400a9c <pmc_sleep+0x1ac>
		/* Enable External XTAL */
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  400a42:	4b4d      	ldr	r3, [pc, #308]	; (400b78 <pmc_sleep+0x288>)
  400a44:	6a1b      	ldr	r3, [r3, #32]
  400a46:	f013 0f01 	tst.w	r3, #1
  400a4a:	d10e      	bne.n	400a6a <pmc_sleep+0x17a>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400a4c:	4a4a      	ldr	r2, [pc, #296]	; (400b78 <pmc_sleep+0x288>)
  400a4e:	6a13      	ldr	r3, [r2, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  400a50:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400a54:	f023 0303 	bic.w	r3, r3, #3
  400a58:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400a5c:	f043 0301 	orr.w	r3, r3, #1
					~CKGR_MOR_MOSCRCF_Msk)
				| CKGR_MOR_KEY_PASSWD;
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
		/* Enable External XTAL */
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400a60:	6213      	str	r3, [r2, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
			/* Wait the Xtal to stabilize */
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400a62:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400a64:	f013 0f01 	tst.w	r3, #1
  400a68:	d0fb      	beq.n	400a62 <pmc_sleep+0x172>
		}
		/* Select External XTAL */
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  400a6a:	4b43      	ldr	r3, [pc, #268]	; (400b78 <pmc_sleep+0x288>)
  400a6c:	6a1b      	ldr	r3, [r3, #32]
  400a6e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400a72:	d10a      	bne.n	400a8a <pmc_sleep+0x19a>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400a74:	4a40      	ldr	r2, [pc, #256]	; (400b78 <pmc_sleep+0x288>)
  400a76:	6a13      	ldr	r3, [r2, #32]
  400a78:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  400a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  400a80:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  400a82:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400a84:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400a88:	d0fb      	beq.n	400a82 <pmc_sleep+0x192>
		}
		/* Disable Fast RC */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  400a8a:	4a3b      	ldr	r2, [pc, #236]	; (400b78 <pmc_sleep+0x288>)
  400a8c:	6a13      	ldr	r3, [r2, #32]
						~CKGR_MOR_MOSCRCF_Msk)
					| CKGR_MOR_KEY_PASSWD;
  400a8e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  400a92:	f023 0378 	bic.w	r3, r3, #120	; 0x78
  400a96:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
		}
		/* Disable Fast RC */
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  400a9a:	6213      	str	r3, [r2, #32]
						~CKGR_MOR_MOSCRCF_Msk)
					| CKGR_MOR_KEY_PASSWD;
	}

	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  400a9c:	4b3d      	ldr	r3, [pc, #244]	; (400b94 <pmc_sleep+0x2a4>)
  400a9e:	403b      	ands	r3, r7
  400aa0:	b12b      	cbz	r3, 400aae <pmc_sleep+0x1be>
#if (SAM4C || SAM4CM || SAMG || SAM4CP)
		PMC->CKGR_PLLAR = pll0_setting;
#else
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  400aa2:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
  400aa6:	4b34      	ldr	r3, [pc, #208]	; (400b78 <pmc_sleep+0x288>)
  400aa8:	629f      	str	r7, [r3, #40]	; 0x28
#endif
		pll_sr |= PMC_SR_LOCKA;
  400aaa:	2202      	movs	r2, #2
  400aac:	e000      	b.n	400ab0 <pmc_sleep+0x1c0>
		, const uint32_t fmr_setting1
#endif
		)
{
	uint32_t mckr;
	uint32_t pll_sr = 0;
  400aae:	2200      	movs	r2, #0
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
#endif
		pll_sr |= PMC_SR_LOCKA;
	}
#if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP)
	if (pll1_setting & CKGR_PLLBR_MULB_Msk) {
  400ab0:	4b38      	ldr	r3, [pc, #224]	; (400b94 <pmc_sleep+0x2a4>)
  400ab2:	ea0b 0303 	and.w	r3, fp, r3
  400ab6:	b123      	cbz	r3, 400ac2 <pmc_sleep+0x1d2>
		PMC->CKGR_PLLBR = pll1_setting;
  400ab8:	4b2f      	ldr	r3, [pc, #188]	; (400b78 <pmc_sleep+0x288>)
  400aba:	f8c3 b02c 	str.w	fp, [r3, #44]	; 0x2c
		pll_sr |= PMC_SR_LOCKB;
  400abe:	f042 0204 	orr.w	r2, r2, #4
	}
#else
	UNUSED(pll1_setting);
#endif
	/* Wait MCK source ready */
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  400ac2:	2e02      	cmp	r6, #2
  400ac4:	d002      	beq.n	400acc <pmc_sleep+0x1dc>
  400ac6:	2e03      	cmp	r6, #3
  400ac8:	d006      	beq.n	400ad8 <pmc_sleep+0x1e8>
  400aca:	e00a      	b.n	400ae2 <pmc_sleep+0x1f2>
	case PMC_MCKR_CSS_PLLA_CLK:
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  400acc:	492a      	ldr	r1, [pc, #168]	; (400b78 <pmc_sleep+0x288>)
  400ace:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  400ad0:	f013 0f02 	tst.w	r3, #2
  400ad4:	d0fb      	beq.n	400ace <pmc_sleep+0x1de>
  400ad6:	e004      	b.n	400ae2 <pmc_sleep+0x1f2>
		break;
#if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP)
	case PMC_MCKR_CSS_PLLB_CLK:
		while (!(PMC->PMC_SR & PMC_SR_LOCKB));
  400ad8:	4927      	ldr	r1, [pc, #156]	; (400b78 <pmc_sleep+0x288>)
  400ada:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  400adc:	f013 0f04 	tst.w	r3, #4
  400ae0:	d0fb      	beq.n	400ada <pmc_sleep+0x1ea>
		break;
#endif
	}

	/* Switch to faster clock */
	mckr = PMC->PMC_MCKR;
  400ae2:	4825      	ldr	r0, [pc, #148]	; (400b78 <pmc_sleep+0x288>)
  400ae4:	6b03      	ldr	r3, [r0, #48]	; 0x30

	/* Set PRES */
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
		| (mck_setting & PMC_MCKR_PRES_Msk);
  400ae6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
  400aea:	f005 0370 	and.w	r3, r5, #112	; 0x70
  400aee:	430b      	orrs	r3, r1

	/* Switch to faster clock */
	mckr = PMC->PMC_MCKR;

	/* Set PRES */
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  400af0:	6303      	str	r3, [r0, #48]	; 0x30
		| (mck_setting & PMC_MCKR_PRES_Msk);
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400af2:	4601      	mov	r1, r0
  400af4:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  400af6:	f013 0f08 	tst.w	r3, #8
  400afa:	d0fb      	beq.n	400af4 <pmc_sleep+0x204>

	/* Restore flash wait states */
	EFC0->EEFC_FMR = fmr_setting;
  400afc:	4b1f      	ldr	r3, [pc, #124]	; (400b7c <pmc_sleep+0x28c>)
  400afe:	f8c3 a000 	str.w	sl, [r3]
#if defined(EFC1)
	EFC1->EEFC_FMR = fmr_setting1;
  400b02:	f503 7300 	add.w	r3, r3, #512	; 0x200
  400b06:	f8c3 9000 	str.w	r9, [r3]
#endif

	/* Set CSS and others */
	PMC->PMC_MCKR = mck_setting;
  400b0a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
  400b0e:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400b10:	4619      	mov	r1, r3
  400b12:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  400b14:	f013 0f08 	tst.w	r3, #8
  400b18:	d0fb      	beq.n	400b12 <pmc_sleep+0x222>

	/* Waiting all restored PLLs ready */
	while (!(PMC->PMC_SR & pll_sr));
  400b1a:	4917      	ldr	r1, [pc, #92]	; (400b78 <pmc_sleep+0x288>)
  400b1c:	6e8b      	ldr	r3, [r1, #104]	; 0x68
  400b1e:	4213      	tst	r3, r2
  400b20:	d0fc      	beq.n	400b1c <pmc_sleep+0x22c>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  400b22:	2200      	movs	r2, #0
  400b24:	4b13      	ldr	r3, [pc, #76]	; (400b74 <pmc_sleep+0x284>)
  400b26:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  400b28:	4b1b      	ldr	r3, [pc, #108]	; (400b98 <pmc_sleep+0x2a8>)
  400b2a:	681b      	ldr	r3, [r3, #0]
  400b2c:	b11b      	cbz	r3, 400b36 <pmc_sleep+0x246>
			callback_clocks_restored();
  400b2e:	4798      	blx	r3
			callback_clocks_restored = NULL;
  400b30:	2200      	movs	r2, #0
  400b32:	4b19      	ldr	r3, [pc, #100]	; (400b98 <pmc_sleep+0x2a8>)
  400b34:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  400b36:	2201      	movs	r2, #1
  400b38:	4b0c      	ldr	r3, [pc, #48]	; (400b6c <pmc_sleep+0x27c>)
  400b3a:	701a      	strb	r2, [r3, #0]
  400b3c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  400b40:	b662      	cpsie	i
  400b42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  400b46:	4a08      	ldr	r2, [pc, #32]	; (400b68 <pmc_sleep+0x278>)
  400b48:	6913      	ldr	r3, [r2, #16]
  400b4a:	f043 0304 	orr.w	r3, r3, #4
  400b4e:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  400b50:	4a12      	ldr	r2, [pc, #72]	; (400b9c <pmc_sleep+0x2ac>)
  400b52:	4b13      	ldr	r3, [pc, #76]	; (400ba0 <pmc_sleep+0x2b0>)
  400b54:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  400b56:	2201      	movs	r2, #1
  400b58:	4b04      	ldr	r3, [pc, #16]	; (400b6c <pmc_sleep+0x27c>)
  400b5a:	701a      	strb	r2, [r3, #0]
  400b5c:	f3bf 8f5f 	dmb	sy
  400b60:	b662      	cpsie	i
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
  400b62:	bf30      	wfi
  400b64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400b68:	e000ed00 	.word	0xe000ed00
  400b6c:	2000000c 	.word	0x2000000c
  400b70:	00400895 	.word	0x00400895
  400b74:	200004d8 	.word	0x200004d8
  400b78:	400e0400 	.word	0x400e0400
  400b7c:	400e0a00 	.word	0x400e0a00
  400b80:	00400815 	.word	0x00400815
  400b84:	00400835 	.word	0x00400835
  400b88:	004008a1 	.word	0x004008a1
  400b8c:	fec8fffc 	.word	0xfec8fffc
  400b90:	01370002 	.word	0x01370002
  400b94:	07ff0000 	.word	0x07ff0000
  400b98:	200004d4 	.word	0x200004d4
  400b9c:	a5000004 	.word	0xa5000004
  400ba0:	400e1410 	.word	0x400e1410

00400ba4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400ba4:	e7fe      	b.n	400ba4 <Dummy_Handler>
  400ba6:	bf00      	nop

00400ba8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  400ba8:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
  400baa:	4b20      	ldr	r3, [pc, #128]	; (400c2c <Reset_Handler+0x84>)
  400bac:	4a20      	ldr	r2, [pc, #128]	; (400c30 <Reset_Handler+0x88>)
  400bae:	429a      	cmp	r2, r3
  400bb0:	d912      	bls.n	400bd8 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
  400bb2:	4b20      	ldr	r3, [pc, #128]	; (400c34 <Reset_Handler+0x8c>)
  400bb4:	4a1d      	ldr	r2, [pc, #116]	; (400c2c <Reset_Handler+0x84>)
  400bb6:	429a      	cmp	r2, r3
  400bb8:	d21e      	bcs.n	400bf8 <Reset_Handler+0x50>
  400bba:	4611      	mov	r1, r2
  400bbc:	3b01      	subs	r3, #1
  400bbe:	1a9b      	subs	r3, r3, r2
  400bc0:	f023 0303 	bic.w	r3, r3, #3
  400bc4:	3304      	adds	r3, #4
  400bc6:	4a1a      	ldr	r2, [pc, #104]	; (400c30 <Reset_Handler+0x88>)
  400bc8:	4413      	add	r3, r2
			*pDest++ = *pSrc++;
  400bca:	f852 0b04 	ldr.w	r0, [r2], #4
  400bce:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  400bd2:	429a      	cmp	r2, r3
  400bd4:	d1f9      	bne.n	400bca <Reset_Handler+0x22>
  400bd6:	e00f      	b.n	400bf8 <Reset_Handler+0x50>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  400bd8:	4b14      	ldr	r3, [pc, #80]	; (400c2c <Reset_Handler+0x84>)
  400bda:	4a15      	ldr	r2, [pc, #84]	; (400c30 <Reset_Handler+0x88>)
  400bdc:	429a      	cmp	r2, r3
  400bde:	d20b      	bcs.n	400bf8 <Reset_Handler+0x50>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  400be0:	4b14      	ldr	r3, [pc, #80]	; (400c34 <Reset_Handler+0x8c>)
  400be2:	4a12      	ldr	r2, [pc, #72]	; (400c2c <Reset_Handler+0x84>)
  400be4:	1a9a      	subs	r2, r3, r2
  400be6:	4814      	ldr	r0, [pc, #80]	; (400c38 <Reset_Handler+0x90>)
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  400be8:	1811      	adds	r1, r2, r0
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400bea:	b12a      	cbz	r2, 400bf8 <Reset_Handler+0x50>
			*pDest-- = *pSrc--;
  400bec:	f851 2904 	ldr.w	r2, [r1], #-4
  400bf0:	f843 2d04 	str.w	r2, [r3, #-4]!
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  400bf4:	4281      	cmp	r1, r0
  400bf6:	d1f9      	bne.n	400bec <Reset_Handler+0x44>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  400bf8:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400bfa:	4b10      	ldr	r3, [pc, #64]	; (400c3c <Reset_Handler+0x94>)
  400bfc:	4a10      	ldr	r2, [pc, #64]	; (400c40 <Reset_Handler+0x98>)
  400bfe:	429a      	cmp	r2, r3
  400c00:	d20b      	bcs.n	400c1a <Reset_Handler+0x72>
  400c02:	1d13      	adds	r3, r2, #4
  400c04:	4a0f      	ldr	r2, [pc, #60]	; (400c44 <Reset_Handler+0x9c>)
  400c06:	1ad2      	subs	r2, r2, r3
  400c08:	f022 0203 	bic.w	r2, r2, #3
  400c0c:	441a      	add	r2, r3
  400c0e:	3b04      	subs	r3, #4
		*pDest++ = 0;
  400c10:	2100      	movs	r1, #0
  400c12:	f843 1b04 	str.w	r1, [r3], #4
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  400c16:	429a      	cmp	r2, r3
  400c18:	d1fb      	bne.n	400c12 <Reset_Handler+0x6a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc);
  400c1a:	4b0b      	ldr	r3, [pc, #44]	; (400c48 <Reset_Handler+0xa0>)
  400c1c:	4a0b      	ldr	r2, [pc, #44]	; (400c4c <Reset_Handler+0xa4>)
  400c1e:	609a      	str	r2, [r3, #8]

	/* Initialize the C library */
	__libc_init_array();
  400c20:	4b0b      	ldr	r3, [pc, #44]	; (400c50 <Reset_Handler+0xa8>)
  400c22:	4798      	blx	r3

	/* Branch to main function */
	main();
  400c24:	4b0b      	ldr	r3, [pc, #44]	; (400c54 <Reset_Handler+0xac>)
  400c26:	4798      	blx	r3
  400c28:	e7fe      	b.n	400c28 <Reset_Handler+0x80>
  400c2a:	bf00      	nop
  400c2c:	20000000 	.word	0x20000000
  400c30:	00401044 	.word	0x00401044
  400c34:	20000440 	.word	0x20000440
  400c38:	00401040 	.word	0x00401040
  400c3c:	200004e0 	.word	0x200004e0
  400c40:	20000440 	.word	0x20000440
  400c44:	200004e3 	.word	0x200004e3
  400c48:	e000ed00 	.word	0xe000ed00
  400c4c:	00400000 	.word	0x00400000
  400c50:	00400edd 	.word	0x00400edd
  400c54:	00400e71 	.word	0x00400e71

00400c58 <SystemCoreClockUpdate>:
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  400c58:	4b3d      	ldr	r3, [pc, #244]	; (400d50 <SystemCoreClockUpdate+0xf8>)
  400c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c5c:	f003 0303 	and.w	r3, r3, #3
  400c60:	2b03      	cmp	r3, #3
  400c62:	d85d      	bhi.n	400d20 <SystemCoreClockUpdate+0xc8>
  400c64:	e8df f003 	tbb	[pc, r3]
  400c68:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  400c6c:	4b39      	ldr	r3, [pc, #228]	; (400d54 <SystemCoreClockUpdate+0xfc>)
  400c6e:	695b      	ldr	r3, [r3, #20]
  400c70:	f013 0f80 	tst.w	r3, #128	; 0x80
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400c74:	bf14      	ite	ne
  400c76:	f44f 4200 	movne.w	r2, #32768	; 0x8000
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400c7a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400c7e:	4b36      	ldr	r3, [pc, #216]	; (400d58 <SystemCoreClockUpdate+0x100>)
  400c80:	601a      	str	r2, [r3, #0]
  400c82:	e04d      	b.n	400d20 <SystemCoreClockUpdate+0xc8>
			}
		break;
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400c84:	4b32      	ldr	r3, [pc, #200]	; (400d50 <SystemCoreClockUpdate+0xf8>)
  400c86:	6a1b      	ldr	r3, [r3, #32]
  400c88:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400c8c:	d003      	beq.n	400c96 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL;
  400c8e:	4a33      	ldr	r2, [pc, #204]	; (400d5c <SystemCoreClockUpdate+0x104>)
  400c90:	4b31      	ldr	r3, [pc, #196]	; (400d58 <SystemCoreClockUpdate+0x100>)
  400c92:	601a      	str	r2, [r3, #0]
  400c94:	e044      	b.n	400d20 <SystemCoreClockUpdate+0xc8>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400c96:	4a32      	ldr	r2, [pc, #200]	; (400d60 <SystemCoreClockUpdate+0x108>)
  400c98:	4b2f      	ldr	r3, [pc, #188]	; (400d58 <SystemCoreClockUpdate+0x100>)
  400c9a:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400c9c:	4b2c      	ldr	r3, [pc, #176]	; (400d50 <SystemCoreClockUpdate+0xf8>)
  400c9e:	6a1b      	ldr	r3, [r3, #32]
  400ca0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400ca4:	2b10      	cmp	r3, #16
  400ca6:	d002      	beq.n	400cae <SystemCoreClockUpdate+0x56>
  400ca8:	2b20      	cmp	r3, #32
  400caa:	d004      	beq.n	400cb6 <SystemCoreClockUpdate+0x5e>
  400cac:	e038      	b.n	400d20 <SystemCoreClockUpdate+0xc8>
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			break;
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400cae:	4a2d      	ldr	r2, [pc, #180]	; (400d64 <SystemCoreClockUpdate+0x10c>)
  400cb0:	4b29      	ldr	r3, [pc, #164]	; (400d58 <SystemCoreClockUpdate+0x100>)
  400cb2:	601a      	str	r2, [r3, #0]
			break;
  400cb4:	e034      	b.n	400d20 <SystemCoreClockUpdate+0xc8>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400cb6:	4a29      	ldr	r2, [pc, #164]	; (400d5c <SystemCoreClockUpdate+0x104>)
  400cb8:	4b27      	ldr	r3, [pc, #156]	; (400d58 <SystemCoreClockUpdate+0x100>)
  400cba:	601a      	str	r2, [r3, #0]
			break;
  400cbc:	e030      	b.n	400d20 <SystemCoreClockUpdate+0xc8>
		}
		break;
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  400cbe:	4b24      	ldr	r3, [pc, #144]	; (400d50 <SystemCoreClockUpdate+0xf8>)
  400cc0:	6a1b      	ldr	r3, [r3, #32]
  400cc2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400cc6:	d003      	beq.n	400cd0 <SystemCoreClockUpdate+0x78>
				SystemCoreClock = CHIP_FREQ_XTAL;
  400cc8:	4a24      	ldr	r2, [pc, #144]	; (400d5c <SystemCoreClockUpdate+0x104>)
  400cca:	4b23      	ldr	r3, [pc, #140]	; (400d58 <SystemCoreClockUpdate+0x100>)
  400ccc:	601a      	str	r2, [r3, #0]
  400cce:	e012      	b.n	400cf6 <SystemCoreClockUpdate+0x9e>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400cd0:	4a23      	ldr	r2, [pc, #140]	; (400d60 <SystemCoreClockUpdate+0x108>)
  400cd2:	4b21      	ldr	r3, [pc, #132]	; (400d58 <SystemCoreClockUpdate+0x100>)
  400cd4:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  400cd6:	4b1e      	ldr	r3, [pc, #120]	; (400d50 <SystemCoreClockUpdate+0xf8>)
  400cd8:	6a1b      	ldr	r3, [r3, #32]
  400cda:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400cde:	2b10      	cmp	r3, #16
  400ce0:	d002      	beq.n	400ce8 <SystemCoreClockUpdate+0x90>
  400ce2:	2b20      	cmp	r3, #32
  400ce4:	d004      	beq.n	400cf0 <SystemCoreClockUpdate+0x98>
  400ce6:	e006      	b.n	400cf6 <SystemCoreClockUpdate+0x9e>
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
					break;
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  400ce8:	4a1e      	ldr	r2, [pc, #120]	; (400d64 <SystemCoreClockUpdate+0x10c>)
  400cea:	4b1b      	ldr	r3, [pc, #108]	; (400d58 <SystemCoreClockUpdate+0x100>)
  400cec:	601a      	str	r2, [r3, #0]
					break;
  400cee:	e002      	b.n	400cf6 <SystemCoreClockUpdate+0x9e>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  400cf0:	4a1a      	ldr	r2, [pc, #104]	; (400d5c <SystemCoreClockUpdate+0x104>)
  400cf2:	4b19      	ldr	r3, [pc, #100]	; (400d58 <SystemCoreClockUpdate+0x100>)
  400cf4:	601a      	str	r2, [r3, #0]
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  400cf6:	4b16      	ldr	r3, [pc, #88]	; (400d50 <SystemCoreClockUpdate+0xf8>)
  400cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400cfa:	f003 0303 	and.w	r3, r3, #3
  400cfe:	2b02      	cmp	r3, #2
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  400d00:	4a13      	ldr	r2, [pc, #76]	; (400d50 <SystemCoreClockUpdate+0xf8>)
  400d02:	bf07      	ittee	eq
  400d04:	6a93      	ldreq	r3, [r2, #40]	; 0x28
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  400d06:	6a92      	ldreq	r2, [r2, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  400d08:	6ad3      	ldrne	r3, [r2, #44]	; 0x2c
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  400d0a:	6ad2      	ldrne	r2, [r2, #44]	; 0x2c
  400d0c:	4812      	ldr	r0, [pc, #72]	; (400d58 <SystemCoreClockUpdate+0x100>)
  400d0e:	f3c3 410a 	ubfx	r1, r3, #16, #11
  400d12:	6803      	ldr	r3, [r0, #0]
  400d14:	fb01 3303 	mla	r3, r1, r3, r3
  400d18:	b2d2      	uxtb	r2, r2
  400d1a:	fbb3 f3f2 	udiv	r3, r3, r2
  400d1e:	6003      	str	r3, [r0, #0]
		
	default:
		break;
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  400d20:	4b0b      	ldr	r3, [pc, #44]	; (400d50 <SystemCoreClockUpdate+0xf8>)
  400d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400d24:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400d28:	2b70      	cmp	r3, #112	; 0x70
  400d2a:	d107      	bne.n	400d3c <SystemCoreClockUpdate+0xe4>
		SystemCoreClock /= 3U;
  400d2c:	4a0a      	ldr	r2, [pc, #40]	; (400d58 <SystemCoreClockUpdate+0x100>)
  400d2e:	6813      	ldr	r3, [r2, #0]
  400d30:	490d      	ldr	r1, [pc, #52]	; (400d68 <SystemCoreClockUpdate+0x110>)
  400d32:	fba1 1303 	umull	r1, r3, r1, r3
  400d36:	085b      	lsrs	r3, r3, #1
  400d38:	6013      	str	r3, [r2, #0]
  400d3a:	4770      	bx	lr
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400d3c:	4b04      	ldr	r3, [pc, #16]	; (400d50 <SystemCoreClockUpdate+0xf8>)
  400d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  400d40:	4905      	ldr	r1, [pc, #20]	; (400d58 <SystemCoreClockUpdate+0x100>)
  400d42:	f3c3 1202 	ubfx	r2, r3, #4, #3
  400d46:	680b      	ldr	r3, [r1, #0]
  400d48:	40d3      	lsrs	r3, r2
  400d4a:	600b      	str	r3, [r1, #0]
  400d4c:	4770      	bx	lr
  400d4e:	bf00      	nop
  400d50:	400e0400 	.word	0x400e0400
  400d54:	400e1410 	.word	0x400e1410
  400d58:	20000014 	.word	0x20000014
  400d5c:	00b71b00 	.word	0x00b71b00
  400d60:	003d0900 	.word	0x003d0900
  400d64:	007a1200 	.word	0x007a1200
  400d68:	aaaaaaab 	.word	0xaaaaaaab

00400d6c <system_init_flash>:
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  400d6c:	4b1a      	ldr	r3, [pc, #104]	; (400dd8 <system_init_flash+0x6c>)
  400d6e:	4298      	cmp	r0, r3
  400d70:	d807      	bhi.n	400d82 <system_init_flash+0x16>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400d72:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  400d76:	4a19      	ldr	r2, [pc, #100]	; (400ddc <system_init_flash+0x70>)
  400d78:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400d7a:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400d7e:	6013      	str	r3, [r2, #0]
  400d80:	4770      	bx	lr
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  400d82:	4b17      	ldr	r3, [pc, #92]	; (400de0 <system_init_flash+0x74>)
  400d84:	4298      	cmp	r0, r3
  400d86:	d806      	bhi.n	400d96 <system_init_flash+0x2a>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400d88:	4b16      	ldr	r3, [pc, #88]	; (400de4 <system_init_flash+0x78>)
  400d8a:	4a14      	ldr	r2, [pc, #80]	; (400ddc <system_init_flash+0x70>)
  400d8c:	6013      	str	r3, [r2, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400d8e:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400d92:	6013      	str	r3, [r2, #0]
  400d94:	4770      	bx	lr
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  400d96:	4b14      	ldr	r3, [pc, #80]	; (400de8 <system_init_flash+0x7c>)
  400d98:	4298      	cmp	r0, r3
  400d9a:	d806      	bhi.n	400daa <system_init_flash+0x3e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400d9c:	4b13      	ldr	r3, [pc, #76]	; (400dec <system_init_flash+0x80>)
  400d9e:	4a0f      	ldr	r2, [pc, #60]	; (400ddc <system_init_flash+0x70>)
  400da0:	6013      	str	r3, [r2, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400da2:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400da6:	6013      	str	r3, [r2, #0]
  400da8:	4770      	bx	lr
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  400daa:	4b11      	ldr	r3, [pc, #68]	; (400df0 <system_init_flash+0x84>)
  400dac:	4298      	cmp	r0, r3
  400dae:	d806      	bhi.n	400dbe <system_init_flash+0x52>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400db0:	4b10      	ldr	r3, [pc, #64]	; (400df4 <system_init_flash+0x88>)
  400db2:	4a0a      	ldr	r2, [pc, #40]	; (400ddc <system_init_flash+0x70>)
  400db4:	6013      	str	r3, [r2, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400db6:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400dba:	6013      	str	r3, [r2, #0]
  400dbc:	4770      	bx	lr
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  400dbe:	4b0e      	ldr	r3, [pc, #56]	; (400df8 <system_init_flash+0x8c>)
  400dc0:	4298      	cmp	r0, r3
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400dc2:	bf94      	ite	ls
  400dc4:	f04f 2304 	movls.w	r3, #67109888	; 0x4000400
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400dc8:	4b0c      	ldrhi	r3, [pc, #48]	; (400dfc <system_init_flash+0x90>)
  400dca:	4a04      	ldr	r2, [pc, #16]	; (400ddc <system_init_flash+0x70>)
  400dcc:	6013      	str	r3, [r2, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400dce:	f502 7200 	add.w	r2, r2, #512	; 0x200
  400dd2:	6013      	str	r3, [r2, #0]
  400dd4:	4770      	bx	lr
  400dd6:	bf00      	nop
  400dd8:	01312cff 	.word	0x01312cff
  400ddc:	400e0a00 	.word	0x400e0a00
  400de0:	026259ff 	.word	0x026259ff
  400de4:	04000100 	.word	0x04000100
  400de8:	039386ff 	.word	0x039386ff
  400dec:	04000200 	.word	0x04000200
  400df0:	04c4b3ff 	.word	0x04c4b3ff
  400df4:	04000300 	.word	0x04000300
  400df8:	05f5e0ff 	.word	0x05f5e0ff
  400dfc:	04000500 	.word	0x04000500

00400e00 <tratamento_interrupcao_pioB>:
#include <asf.h>

#define LED_AZUL IOPORT_CREATE_PIN(PIOA, 20)
#define LED_VERDE IOPORT_CREATE_PIN(PIOA, 19)

void tratamento_interrupcao_pioB(){
  400e00:	b508      	push	{r3, lr}
	LED_Toggle(LED0_GPIO);
  400e02:	2013      	movs	r0, #19
  400e04:	4b02      	ldr	r3, [pc, #8]	; (400e10 <tratamento_interrupcao_pioB+0x10>)
  400e06:	4798      	blx	r3
	delay_ms(1000);
  400e08:	4802      	ldr	r0, [pc, #8]	; (400e14 <tratamento_interrupcao_pioB+0x14>)
  400e0a:	4b03      	ldr	r3, [pc, #12]	; (400e18 <tratamento_interrupcao_pioB+0x18>)
  400e0c:	4798      	blx	r3
  400e0e:	bd08      	pop	{r3, pc}
  400e10:	00400415 	.word	0x00400415
  400e14:	0082ca25 	.word	0x0082ca25
  400e18:	20000001 	.word	0x20000001

00400e1c <configurar_botao1>:
}

void configurar_botao1(){
  400e1c:	b530      	push	{r4, r5, lr}
  400e1e:	b083      	sub	sp, #12
	pio_set_input(PIOB, PIO_PB3, PIO_PULLUP | PIO_DEBOUNCE);
  400e20:	4c0d      	ldr	r4, [pc, #52]	; (400e58 <configurar_botao1+0x3c>)
  400e22:	2209      	movs	r2, #9
  400e24:	2108      	movs	r1, #8
  400e26:	4620      	mov	r0, r4
  400e28:	4b0c      	ldr	r3, [pc, #48]	; (400e5c <configurar_botao1+0x40>)
  400e2a:	4798      	blx	r3
	pio_handler_set(PIOB, ID_PIOB, PIO_PB3, PIO_IT_RISE_EDGE, tratamento_interrupcao_pioB);
  400e2c:	4b0c      	ldr	r3, [pc, #48]	; (400e60 <configurar_botao1+0x44>)
  400e2e:	9300      	str	r3, [sp, #0]
  400e30:	2370      	movs	r3, #112	; 0x70
  400e32:	2208      	movs	r2, #8
  400e34:	210c      	movs	r1, #12
  400e36:	4620      	mov	r0, r4
  400e38:	4d0a      	ldr	r5, [pc, #40]	; (400e64 <configurar_botao1+0x48>)
  400e3a:	47a8      	blx	r5
	pio_enable_interrupt(PIOB, PIO_PB3);
  400e3c:	2108      	movs	r1, #8
  400e3e:	4620      	mov	r0, r4
  400e40:	4b09      	ldr	r3, [pc, #36]	; (400e68 <configurar_botao1+0x4c>)
  400e42:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
  400e44:	4b09      	ldr	r3, [pc, #36]	; (400e6c <configurar_botao1+0x50>)
  400e46:	22f0      	movs	r2, #240	; 0xf0
  400e48:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400e4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  400e50:	601a      	str	r2, [r3, #0]
	
	NVIC_SetPriority(PIOB_IRQn,15);
	NVIC_EnableIRQ(PIOB_IRQn);
}
  400e52:	b003      	add	sp, #12
  400e54:	bd30      	pop	{r4, r5, pc}
  400e56:	bf00      	nop
  400e58:	400e1000 	.word	0x400e1000
  400e5c:	00400361 	.word	0x00400361
  400e60:	00400e01 	.word	0x00400e01
  400e64:	004006a1 	.word	0x004006a1
  400e68:	004003ed 	.word	0x004003ed
  400e6c:	e000e100 	.word	0xe000e100

00400e70 <main>:

int main (void)
{
  400e70:	b508      	push	{r3, lr}

	sysclk_init();
  400e72:	4b11      	ldr	r3, [pc, #68]	; (400eb8 <main+0x48>)
  400e74:	4798      	blx	r3
	board_init();
  400e76:	4b11      	ldr	r3, [pc, #68]	; (400ebc <main+0x4c>)
  400e78:	4798      	blx	r3
  400e7a:	200b      	movs	r0, #11
  400e7c:	4c10      	ldr	r4, [pc, #64]	; (400ec0 <main+0x50>)
  400e7e:	47a0      	blx	r4
  400e80:	200c      	movs	r0, #12
  400e82:	47a0      	blx	r4
  400e84:	200d      	movs	r0, #13
  400e86:	47a0      	blx	r4

	ioport_init();
	configurar_botao1();
  400e88:	4b0e      	ldr	r3, [pc, #56]	; (400ec4 <main+0x54>)
  400e8a:	4798      	blx	r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400e8c:	4b0e      	ldr	r3, [pc, #56]	; (400ec8 <main+0x58>)
  400e8e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  400e92:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400e94:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400e98:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400e9c:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400e9e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	//pio_set_output(PIOA, PIO_PA19, LOW, DISABLE, ENABLE);
	ioport_set_pin_dir(LED_AZUL, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(LED_VERDE, IOPORT_DIR_OUTPUT);

	while(1){
		LED_Toggle(LED1_GPIO);
  400ea2:	4e0a      	ldr	r6, [pc, #40]	; (400ecc <main+0x5c>)
		delay_ms(300);
  400ea4:	4d0a      	ldr	r5, [pc, #40]	; (400ed0 <main+0x60>)
  400ea6:	4c0b      	ldr	r4, [pc, #44]	; (400ed4 <main+0x64>)
	//pio_set_output(PIOA, PIO_PA19, LOW, DISABLE, ENABLE);
	ioport_set_pin_dir(LED_AZUL, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(LED_VERDE, IOPORT_DIR_OUTPUT);

	while(1){
		LED_Toggle(LED1_GPIO);
  400ea8:	2014      	movs	r0, #20
  400eaa:	47b0      	blx	r6
		delay_ms(300);
  400eac:	4628      	mov	r0, r5
  400eae:	47a0      	blx	r4
		pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
  400eb0:	2002      	movs	r0, #2
  400eb2:	4b09      	ldr	r3, [pc, #36]	; (400ed8 <main+0x68>)
  400eb4:	4798      	blx	r3
  400eb6:	e7f7      	b.n	400ea8 <main+0x38>
  400eb8:	00400129 	.word	0x00400129
  400ebc:	0040018d 	.word	0x0040018d
  400ec0:	00400841 	.word	0x00400841
  400ec4:	00400e1d 	.word	0x00400e1d
  400ec8:	400e0e00 	.word	0x400e0e00
  400ecc:	00400415 	.word	0x00400415
  400ed0:	00273ca5 	.word	0x00273ca5
  400ed4:	20000001 	.word	0x20000001
  400ed8:	004008f1 	.word	0x004008f1

00400edc <__libc_init_array>:
  400edc:	b570      	push	{r4, r5, r6, lr}
  400ede:	4e0f      	ldr	r6, [pc, #60]	; (400f1c <__libc_init_array+0x40>)
  400ee0:	4d0f      	ldr	r5, [pc, #60]	; (400f20 <__libc_init_array+0x44>)
  400ee2:	1b76      	subs	r6, r6, r5
  400ee4:	10b6      	asrs	r6, r6, #2
  400ee6:	bf18      	it	ne
  400ee8:	2400      	movne	r4, #0
  400eea:	d005      	beq.n	400ef8 <__libc_init_array+0x1c>
  400eec:	3401      	adds	r4, #1
  400eee:	f855 3b04 	ldr.w	r3, [r5], #4
  400ef2:	4798      	blx	r3
  400ef4:	42a6      	cmp	r6, r4
  400ef6:	d1f9      	bne.n	400eec <__libc_init_array+0x10>
  400ef8:	4e0a      	ldr	r6, [pc, #40]	; (400f24 <__libc_init_array+0x48>)
  400efa:	4d0b      	ldr	r5, [pc, #44]	; (400f28 <__libc_init_array+0x4c>)
  400efc:	1b76      	subs	r6, r6, r5
  400efe:	f000 f88f 	bl	401020 <_init>
  400f02:	10b6      	asrs	r6, r6, #2
  400f04:	bf18      	it	ne
  400f06:	2400      	movne	r4, #0
  400f08:	d006      	beq.n	400f18 <__libc_init_array+0x3c>
  400f0a:	3401      	adds	r4, #1
  400f0c:	f855 3b04 	ldr.w	r3, [r5], #4
  400f10:	4798      	blx	r3
  400f12:	42a6      	cmp	r6, r4
  400f14:	d1f9      	bne.n	400f0a <__libc_init_array+0x2e>
  400f16:	bd70      	pop	{r4, r5, r6, pc}
  400f18:	bd70      	pop	{r4, r5, r6, pc}
  400f1a:	bf00      	nop
  400f1c:	0040102c 	.word	0x0040102c
  400f20:	0040102c 	.word	0x0040102c
  400f24:	00401034 	.word	0x00401034
  400f28:	0040102c 	.word	0x0040102c

00400f2c <register_fini>:
  400f2c:	4b02      	ldr	r3, [pc, #8]	; (400f38 <register_fini+0xc>)
  400f2e:	b113      	cbz	r3, 400f36 <register_fini+0xa>
  400f30:	4802      	ldr	r0, [pc, #8]	; (400f3c <register_fini+0x10>)
  400f32:	f000 b805 	b.w	400f40 <atexit>
  400f36:	4770      	bx	lr
  400f38:	00000000 	.word	0x00000000
  400f3c:	00400f4d 	.word	0x00400f4d

00400f40 <atexit>:
  400f40:	2300      	movs	r3, #0
  400f42:	4601      	mov	r1, r0
  400f44:	461a      	mov	r2, r3
  400f46:	4618      	mov	r0, r3
  400f48:	f000 b814 	b.w	400f74 <__register_exitproc>

00400f4c <__libc_fini_array>:
  400f4c:	b538      	push	{r3, r4, r5, lr}
  400f4e:	4d07      	ldr	r5, [pc, #28]	; (400f6c <__libc_fini_array+0x20>)
  400f50:	4c07      	ldr	r4, [pc, #28]	; (400f70 <__libc_fini_array+0x24>)
  400f52:	1b2c      	subs	r4, r5, r4
  400f54:	10a4      	asrs	r4, r4, #2
  400f56:	d005      	beq.n	400f64 <__libc_fini_array+0x18>
  400f58:	3c01      	subs	r4, #1
  400f5a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  400f5e:	4798      	blx	r3
  400f60:	2c00      	cmp	r4, #0
  400f62:	d1f9      	bne.n	400f58 <__libc_fini_array+0xc>
  400f64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400f68:	f000 b864 	b.w	401034 <_fini>
  400f6c:	00401044 	.word	0x00401044
  400f70:	00401040 	.word	0x00401040

00400f74 <__register_exitproc>:
  400f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400f78:	4c25      	ldr	r4, [pc, #148]	; (401010 <__register_exitproc+0x9c>)
  400f7a:	6825      	ldr	r5, [r4, #0]
  400f7c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  400f80:	4606      	mov	r6, r0
  400f82:	4688      	mov	r8, r1
  400f84:	4692      	mov	sl, r2
  400f86:	4699      	mov	r9, r3
  400f88:	b3c4      	cbz	r4, 400ffc <__register_exitproc+0x88>
  400f8a:	6860      	ldr	r0, [r4, #4]
  400f8c:	281f      	cmp	r0, #31
  400f8e:	dc17      	bgt.n	400fc0 <__register_exitproc+0x4c>
  400f90:	1c43      	adds	r3, r0, #1
  400f92:	b176      	cbz	r6, 400fb2 <__register_exitproc+0x3e>
  400f94:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  400f98:	2201      	movs	r2, #1
  400f9a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  400f9e:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  400fa2:	4082      	lsls	r2, r0
  400fa4:	4311      	orrs	r1, r2
  400fa6:	2e02      	cmp	r6, #2
  400fa8:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  400fac:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  400fb0:	d01e      	beq.n	400ff0 <__register_exitproc+0x7c>
  400fb2:	3002      	adds	r0, #2
  400fb4:	6063      	str	r3, [r4, #4]
  400fb6:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  400fba:	2000      	movs	r0, #0
  400fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400fc0:	4b14      	ldr	r3, [pc, #80]	; (401014 <__register_exitproc+0xa0>)
  400fc2:	b303      	cbz	r3, 401006 <__register_exitproc+0x92>
  400fc4:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400fc8:	f3af 8000 	nop.w
  400fcc:	4604      	mov	r4, r0
  400fce:	b1d0      	cbz	r0, 401006 <__register_exitproc+0x92>
  400fd0:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  400fd4:	2700      	movs	r7, #0
  400fd6:	e880 0088 	stmia.w	r0, {r3, r7}
  400fda:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  400fde:	4638      	mov	r0, r7
  400fe0:	2301      	movs	r3, #1
  400fe2:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  400fe6:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  400fea:	2e00      	cmp	r6, #0
  400fec:	d0e1      	beq.n	400fb2 <__register_exitproc+0x3e>
  400fee:	e7d1      	b.n	400f94 <__register_exitproc+0x20>
  400ff0:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  400ff4:	430a      	orrs	r2, r1
  400ff6:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  400ffa:	e7da      	b.n	400fb2 <__register_exitproc+0x3e>
  400ffc:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  401000:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  401004:	e7c1      	b.n	400f8a <__register_exitproc+0x16>
  401006:	f04f 30ff 	mov.w	r0, #4294967295
  40100a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40100e:	bf00      	nop
  401010:	0040101c 	.word	0x0040101c
  401014:	00000000 	.word	0x00000000
  401018:	00000043 	.word	0x00000043

0040101c <_global_impure_ptr>:
  40101c:	20000018                                ... 

00401020 <_init>:
  401020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401022:	bf00      	nop
  401024:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401026:	bc08      	pop	{r3}
  401028:	469e      	mov	lr, r3
  40102a:	4770      	bx	lr

0040102c <__init_array_start>:
  40102c:	00400f2d 	.word	0x00400f2d

00401030 <__frame_dummy_init_array_entry>:
  401030:	004000f1                                ..@.

00401034 <_fini>:
  401034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401036:	bf00      	nop
  401038:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40103a:	bc08      	pop	{r3}
  40103c:	469e      	mov	lr, r3
  40103e:	4770      	bx	lr

00401040 <__fini_array_start>:
  401040:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	d1fb      	bne.n	20000000 <portable_delay_cycles>
20000008:	4770      	bx	lr
2000000a:	bf00      	nop

2000000c <g_interrupt_enabled>:
2000000c:	0001 0000                                   ....

20000010 <ul_flash_in_wait_mode>:
20000010:	0000 0020                                   .. .

20000014 <SystemCoreClock>:
20000014:	0900 003d                                   ..=.

20000018 <impure_data>:
20000018:	0000 0000 0304 2000 036c 2000 03d4 2000     ....... l.. ... 
	...
2000004c:	1018 0040 0000 0000 0000 0000 0000 0000     ..@.............
	...
200000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
